<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>DriveWorks.Engine</name>
  </assembly>
  <members>
    <member name="T:DriveWorks.IArrayTableExportDocument">
      <summary>Provides a contract for documents that export data to tables.</summary>
    </member>
    <member name="T:DriveWorks.IComponentTaskScopeProvider">
      <summary>Represents a class that registers component task scopes in the engine.</summary>
    </member>
    <member name="T:DriveWorks.IDataExportDefinition">
      <summary>Provides a contract for a Data Export document.</summary>
    </member>
    <member name="T:DriveWorks.IExportableTable">
      <summary>Provides a contract for tables that can have their data read and set.</summary>
    </member>
    <member name="T:DriveWorks.IGroupReportWriter">
      <summary>Provides a contract for report writers which write to a DriveWorks Group.</summary>
    </member>
    <member name="T:DriveWorks.IGroupResultEnumerator">
      <summary>Provides a contract for enumerated results retrieved from a group.</summary>
    </member>
    <member name="T:DriveWorks.IGroupResultEnumerator`1">
      <summary>Provides a contract for enumerated results retrieved from a group.</summary>
      <typeparam name="T">The type of result.</typeparam>
    </member>
    <member name="T:DriveWorks.IHasProjectFunctions">
      <summary>Represents a class whose methods can be made available to rules as functions.</summary>
    </member>
    <member name="T:DriveWorks.IHasRuleContext">
      <summary>provides a contract for rules that have context associated with them.</summary>
    </member>
    <member name="T:DriveWorks.IListenForSpecificationContextCreation">
      <summary>Interface that is used on objects that would like to be notifed when specifications are created.</summary>
    </member>
    <member name="T:DriveWorks.INotifyChanged">
      <summary>Provide a very simple contract for an object notifying observers when it has changed.</summary>
    </member>
    <member name="T:DriveWorks.IPreviewDocument">
      <summary>Provides a contract for documents that can be used to interact with preview documents.</summary>
    </member>
    <member name="T:DriveWorks.ISafeProjectExecutor">
      <summary>Provides a contract for a service that allows for thread-safe execution of project functions.</summary>
    </member>
    <member name="T:DriveWorks.ISpecificationFileCopyService">
      <summary>Provides the contract for objects that copy files relating to specifications.</summary>
    </member>
    <member name="T:DriveWorks.ITableValue">
      <summary>Represents a tabular value which can be used with DriveWorks' controls.</summary>
    </member>
    <member name="M:DriveWorks.IArrayTableExportDocument.FetchTargetTable">
      <summary>Returns the target table for this export document.</summary>
    </member>
    <member name="M:DriveWorks.IArrayTableExportDocument.GetDetails">
      <summary>Returns details for this document that will be used during generation (export).</summary>
    </member>
    <member name="M:DriveWorks.IArrayTableExportDocument.GetExportSummary">
      <summary>Returns a summary for the export that would take place if executed now.</summary>
    </member>
    <member name="P:DriveWorks.IArrayTableExportDocument.ReportEntryClass">
      <summary>Gets the report entry class for the document (typically the document's type).</summary>
    </member>
    <member name="P:DriveWorks.IArrayTableExportDocument.TableName">
      <summary>Gets/sets the name of that target table that will be exported to.</summary>
    </member>
    <member name="M:DriveWorks.IDataExportDefinition.AddColumn(System.String,System.String,DriveWorks.ColumnType)">
      <summary>Adds a column to the document.</summary>
      <returns>Returns the added column</returns>
      <param name="name">The name of the column.</param>
      <param name="type">The data type for this column.</param>
      <param name="columnType">The type of column - Common, Control or Not Specified.</param>
    </member>
    <member name="M:DriveWorks.IDataExportDefinition.AddCommonColumn(System.String,System.String,System.String,System.String)">
      <summary>Adds a common column to the document.</summary>
      <returns>Returns the added column.</returns>
      <param name="name">The name of this column.</param>
      <param name="type">The data type for this column.</param>
      <param name="commonRule">The common rule to set for this column.</param>
      <param name="commonComment">The common comment to set for this column.</param>
    </member>
    <member name="M:DriveWorks.IDataExportDefinition.AddRow(System.Collections.Generic.IDictionary{System.String,DriveWorks.Abstractions.IHasRule})">
      <summary>Adds a row to the list of export rows.</summary>
      <returns>Returns the added row.</returns>
      <param name="fields">The dictionary of fields that are specified on this row. Key is the field name and the value is the rule for the cell.</param>
    </member>
    <member name="M:DriveWorks.IDataExportDefinition.AddRule(System.String,System.String)">
      <summary>Adds the specified rule to the data export document.</summary>
      <returns>The newly added rule.</returns>
      <param name="id">The id for the new rule.</param>
      <param name="formula">The rule to set.</param>
    </member>
    <member name="M:DriveWorks.IDataExportDefinition.ClearColumns">
      <summary>Removes all column specifications.</summary>
    </member>
    <member name="M:DriveWorks.IDataExportDefinition.ClearRows">
      <summary>Removes all rows from the list of export rows.</summary>
    </member>
    <member name="M:DriveWorks.IDataExportDefinition.DeleteRule(DriveWorks.ProjectDocumentRule)">
      <summary>Deletes the specified rule from the data export document.</summary>
      <param name="rule">The rule to be deleted.</param>
    </member>
    <member name="M:DriveWorks.IDataExportDefinition.GetExportSummary">
      <summary>Determines what would happen per-row if the export were executed.</summary>
    </member>
    <member name="M:DriveWorks.IDataExportDefinition.GetRules(System.String[])">
      <summary>Retrieves the rules of the specified rule Id's.</summary>
      <returns>The rules stored with the specified rule Id's.</returns>
      <param name="ruleIds">The Id's of the rules to retrieve.</param>
    </member>
    <member name="P:DriveWorks.IDataExportDefinition.Columns">
      <summary>Gets all the columns in the data export document.</summary>
    </member>
    <member name="P:DriveWorks.IDataExportDefinition.CommonColumns">
      <summary>Gets all the common columns in the data export document.</summary>
    </member>
    <member name="P:DriveWorks.IDataExportDefinition.DatabaseName">
      <summary>Gets the name of the database that the document will be exported to.</summary>
    </member>
    <member name="P:DriveWorks.IDataExportDefinition.ExportWhen">
      <summary>Gets the value that determines when the document will be exported.</summary>
    </member>
    <member name="P:DriveWorks.IDataExportDefinition.Password">
      <summary>Gets the password needed to connect to the database.</summary>
    </member>
    <member name="P:DriveWorks.IDataExportDefinition.Rows">
      <summary>Gets all the rows in the data export document.</summary>
    </member>
    <member name="P:DriveWorks.IDataExportDefinition.TableName">
      <summary>Gets the name of the table that the document will be exported to.</summary>
    </member>
    <member name="P:DriveWorks.IDataExportDefinition.Username">
      <summary>Gets the username needed to connect to the database.</summary>
    </member>
    <member name="M:DriveWorks.IExportableTable.GetColumns">
      <summary>Returns a collection of column names for this table.</summary>
    </member>
    <member name="M:DriveWorks.IExportableTable.GetTableData">
      <summary>Returns the data present in this table.</summary>
    </member>
    <member name="M:DriveWorks.IExportableTable.SetTableData(System.Object[0:,0:])">
      <summary>Sets the data for this table.</summary>
      <param name="tableData">The new data to set in this table.</param>
    </member>
    <member name="P:DriveWorks.IGroupReportWriter.Id">
      <summary>Gets the unique identifier associated with the report.</summary>
    </member>
    <member name="P:DriveWorks.IGroupResultEnumerator.CurrentResultIndex">
      <summary>Gets the index of the current result.</summary>
    </member>
    <member name="P:DriveWorks.IGroupResultEnumerator.EstimatedResultCount">
      <summary>Gets a count of the results expected to be retrieved by the enumerator.</summary>
      <returns>The estimated result count, or -1 if not supported.</returns>
    </member>
    <member name="M:DriveWorks.IHasProjectFunctions.Initialize(DriveWorks.Project)">
      <summary>Performs initialization logic.</summary>
      <param name="project">The project that the functions are being loaded for.</param>
    </member>
    <member name="P:DriveWorks.IHasRuleContext.Context">
      <summary>Gets the context for this rule object</summary>
    </member>
    <member name="M:DriveWorks.IListenForSpecificationContextCreation.NotifySpecificationContextCreated(DriveWorks.Specification.SpecificationContext)">
      <summary>Called whenever a specification context is created.</summary>
      <param name="context">The specification context that was created.</param>
    </member>
    <member name="E:DriveWorks.INotifyChanged.Changed">
      <summary>Raise when the owning object has changed.</summary>
    </member>
    <member name="M:DriveWorks.IPreviewDocument.GetMacroNameByInstanceAddress(System.String)">
      <summary>Takes an instance address and returns the result of its click macro rule.</summary>
      <returns>The name of the macro for the instance with the given address.</returns>
      <param name="address">Address of the instance you want to find the macro for.</param>
    </member>
    <member name="M:DriveWorks.IPreviewDocument.TryGetTouchPointMacroAndArgument(System.Object,System.String,System.String@,System.String@)">
      <summary>Takes an instance address and returns the result of its click macro argument rule.</summary>
      <returns>True if a macro name was found. Note that <paramref name="macroArgument" /> might be set despite this though.</returns>
      <param name="preview">The preview object to check. This can be null.</param>
      <param name="address">Address of the instance you want to find the macro name and argument for.</param>
      <param name="macroName">Name of the touchpoint macro if found.</param>
      <param name="macroArgument">Touchpoint macro argument if found</param>
    </member>
    <member name="M:DriveWorks.IPreviewDocument.GetPreview">
      <summary>Generates the document and updates the preview result.</summary>
    </member>
    <member name="M:DriveWorks.IPreviewDocument.GetPreview(System.String)">
      <summary>Generates the document and updates the preview result.</summary>
      <param name="lightPreset">Name of the lighting preset to apply.</param>
    </member>
    <member name="E:DriveWorks.IPreviewDocument.PreviewResultInvalidated">
      <summary>Raised when the preview result becomes out of date.</summary>
    </member>
    <member name="M:DriveWorks.IReportProcessItem.EndProcess">
      <summary>Stops timing the process</summary>
    </member>
    <member name="M:DriveWorks.IReportProcessItem.StartProcess">
      <summary>Starts timing the process.</summary>
    </member>
    <member name="P:DriveWorks.IReportProcessItem.Description">
      <summary>The description of the process, excluding the clone name and timing information (use Title for full description including these).</summary>
    </member>
    <member name="P:DriveWorks.IReportProcessItem.EndDate">
      <summary>Gets or sets the end date of the process</summary>
    </member>
    <member name="P:DriveWorks.IReportProcessItem.IReportProcessItem">
      <summary>A list of sub-processes for this process.</summary>
    </member>
    <member name="P:DriveWorks.IReportProcessItem.ParentProcessID">
      <summary>Unique ID of the parent process</summary>
    </member>
    <member name="P:DriveWorks.IReportProcessItem.ProcessClass">
      <summary>Gets or sets the Process Class used in the report.</summary>
    </member>
    <member name="P:DriveWorks.IReportProcessItem.ProcessDescription">
      <summary>The full description of the process, including the clone name and timing information.</summary>
    </member>
    <member name="P:DriveWorks.IReportProcessItem.ProcessID">
      <summary>Unique ID for this process</summary>
    </member>
    <member name="P:DriveWorks.IReportProcessItem.ProcessTarget">
      <summary>Optionally sets the process target name used to help users track entries in the report.</summary>
    </member>
    <member name="P:DriveWorks.IReportProcessItem.ProcessTime">
      <summary>Gets the time span of the process</summary>
    </member>
    <member name="P:DriveWorks.IReportProcessItem.ReportEntries">
      <summary>A list of all child report entries.</summary>
    </member>
    <member name="P:DriveWorks.IReportProcessItem.StartDate">
      <summary>Gets or sets the start date of the process</summary>
    </member>
    <member name="M:DriveWorks.ISafeProjectExecutor.BeginInvoke(System.Action)">
      <summary>Invokes an action asynchronously on the same thread as the dispatcher.</summary>
    </member>
    <member name="M:DriveWorks.ISafeProjectExecutor.Invoke(System.Action)">
      <summary>Invokes an action synchronously on the same thread as the dispatcher.</summary>
    </member>
    <member name="M:DriveWorks.ISpecificationFileCopyService.CopyDirectory(System.String,System.String,System.Boolean,System.Boolean)">
      <summary>Recursively copies all files in the specified source directory to the target directory using
, while maintaining the directory structure, with the ability to overwrite
existing files.</summary>
      <param name="source">The directory to copy files from.</param>
      <param name="target">The directory to copy files to.</param>
      <param name="deleteSource">True if the source folder should be deleted after all files have been copied.</param>
      <param name="overwrite">True if the files in the destination folder should be overwritten.</param>
    </member>
    <member name="M:DriveWorks.ISpecificationFileCopyService.CopyDirectory(System.String,System.String,System.Boolean)">
      <summary>Recursively copies all files in the specified source directory to the target directory using
, while maintaining the directory structure.</summary>
      <param name="source">The directory to copy files from.</param>
      <param name="target">The directory to copy files to.</param>
      <param name="deleteSource">True if the source folder should be deleted after all files have been copied.</param>
    </member>
    <member name="M:DriveWorks.ISpecificationFileCopyService.CopyDirectory(System.String,System.String)">
      <summary>Recursively copies all files in the specified source directory to the target directory using
, while maintaining the directory structure without deleting the source
files.</summary>
      <param name="source">The directory to copy files from.</param>
      <param name="target">The directory to copy files to.</param>
    </member>
    <member name="M:DriveWorks.ISpecificationFileCopyService.CopyFile(System.String,System.String)">
      <summary>Copies the given file to the specified target without deleting the source file.</summary>
      <param name="source">The path to the file to copy.</param>
      <param name="target">The path to copy the file to.</param>
    </member>
    <member name="M:DriveWorks.ISpecificationFileCopyService.CopyFile(System.String,System.String,System.Boolean)">
      <summary>Copies the given file to the specified target and optionally deletes the source file.</summary>
      <param name="source">The path to the file to copy.</param>
      <param name="target">The path to copy the file to.</param>
      <param name="deleteSource">Whether to delete the source file after the file has been copied.</param>
    </member>
    <member name="M:DriveWorks.ISpecificationFileCopyService.CopyFile(System.String,System.String,System.Boolean,System.Boolean)">
      <summary>Copies the given file to the specified target, optionally deletes the source file and optionally overwrites existing files</summary>
      <param name="source">The path to the file to copy.</param>
      <param name="target">The path to copy the file to.</param>
      <param name="deleteSource">Whether to delete the source file after the file has been copied.</param>
      <param name="overwrite">Whether to overwrite the file if it already exists.</param>
    </member>
    <member name="E:DriveWorks.ISpecificationFileCopyService.CopiedFile">
      <summary>Raised whenever a file has been copied using  method.</summary>
    </member>
    <member name="E:DriveWorks.ISpecificationFileCopyService.CopyingFile">
      <summary>Raised whenever a file is being copied by the  method.</summary>
    </member>
    <member name="M:DriveWorks.ITableValue.GetElement(System.Int32,System.Int32)">
      <summary>Gets the element at the given row and column index.</summary>
      <param name="rowIndex">The row index of the element to get.</param>
      <param name="columnIndex">The column index of the element to get.</param>
    </member>
    <member name="M:DriveWorks.ITableValue.GetElementAsBoolean(System.Globalization.CultureInfo,System.Int32,System.Int32)">
      <summary>Gets the element at the given row and column index as a boolean, converting using Titan's data conversion rules if necessary.</summary>
      <returns>The value, converted value, or a null reference if conversion fails.</returns>
      <param name="ci">The culture information to use for conversions.</param>
      <param name="rowIndex">The row index of the element to get.</param>
      <param name="columnIndex">The column index of the element to get.</param>
    </member>
    <member name="M:DriveWorks.ITableValue.GetElementAsDateTime(System.Globalization.CultureInfo,System.Int32,System.Int32)">
      <summary>Gets the element at the given row and column index as a date-time, converting using Titan's data conversion rules if necessary.</summary>
      <returns>The value, converted value, or a null reference if conversion fails.</returns>
      <param name="ci">The culture information to use for conversions.</param>
      <param name="rowIndex">The row index of the element to get.</param>
      <param name="columnIndex">The column index of the element to get.</param>
    </member>
    <member name="M:DriveWorks.ITableValue.GetElementAsDouble(System.Globalization.CultureInfo,System.Int32,System.Int32)">
      <summary>Gets the element at the given row and column index as a double, converting using Titan's data conversion rules if necessary.</summary>
      <returns>The value, converted value, or a null reference if conversion fails.</returns>
      <param name="ci">The culture information to use for conversions.</param>
      <param name="rowIndex">The row index of the element to get.</param>
      <param name="columnIndex">The column index of the element to get.</param>
    </member>
    <member name="M:DriveWorks.ITableValue.GetElementAsString(System.Globalization.CultureInfo,System.Int32,System.Int32)">
      <summary>Gets the element at the given row and column index as a string, converting using Titan's data conversion rules if necessary.</summary>
      <returns>The value, or converted value.</returns>
      <param name="ci">The culture information to use for conversions.</param>
      <param name="rowIndex">The row index of the element to get.</param>
      <param name="columnIndex">The column index of the element to get.</param>
    </member>
    <member name="M:DriveWorks.ITableValue.ToArray">
      <summary>Creates a two dimensional object array containing the values from the array value.</summary>
    </member>
    <member name="P:DriveWorks.ITableValue.Columns">
      <summary>Gets the number of columns in the array.</summary>
    </member>
    <member name="P:DriveWorks.ITableValue.Rows">
      <summary>Gets the number of rows in the array.</summary>
    </member>
    <member name="T:DriveWorks.CaptureImportDuplicateBehavior">
      <summary>Controls the import of duplicate capture items for the .</summary>
    </member>
    <member name="F:DriveWorks.CaptureImportDuplicateBehavior.Fail">
      <summary>Don't allow duplicate items to be imported.</summary>
    </member>
    <member name="F:DriveWorks.CaptureImportDuplicateBehavior.Replace">
      <summary>Replace the existing item in the group.</summary>
    </member>
    <member name="T:DriveWorks.ColumnType">
      <summary>Determines the type of an Data Export column.</summary>
    </member>
    <member name="T:DriveWorks.DataExportSummaryType">
      <summary>Specifies the result of exporting a row.</summary>
    </member>
    <member name="F:DriveWorks.DataExportSummaryType.Updated">
      <summary>The row updates an exisiting row in the database.</summary>
    </member>
    <member name="F:DriveWorks.DataExportSummaryType.Inserted">
      <summary>The row is inserted into the database.</summary>
    </member>
    <member name="F:DriveWorks.DataExportSummaryType.Failed">
      <summary>The row failed to export.</summary>
    </member>
    <member name="T:DriveWorks.DataExportWhen">
      <summary>Determines when a data export is processed.</summary>
    </member>
    <member name="F:DriveWorks.DataExportWhen.OnFinish">
      <summary>The data export is processed on finish.</summary>
    </member>
    <member name="F:DriveWorks.DataExportWhen.OnRelease">
      <summary>The data export is processed on release.</summary>
    </member>
    <member name="F:DriveWorks.DataExportWhen.OnAny">
      <summary>The data export is processed in any specification state.</summary>
    </member>
    <member name="T:DriveWorks.DeleteMacroCategoryBehavior">
      <summary>Specifies the behavior to use when deleting a specification macro category.</summary>
    </member>
    <member name="F:DriveWorks.DeleteMacroCategoryBehavior.None">
      <summary>Delete a single specification macro category with no children.</summary>
    </member>
    <member name="F:DriveWorks.DeleteMacroCategoryBehavior.DeleteCategoriesAndMoveMacros">
      <summary>Deletes descendent categories, and moves all descendent macros to the category's parent.</summary>
    </member>
    <member name="F:DriveWorks.DeleteMacroCategoryBehavior.MoveCategoriesAndMacros">
      <summary>Moves child categories and macros to the category's parent.</summary>
    </member>
    <member name="T:DriveWorks.DeleteVariableCategoryBehavior">
      <summary>Specifies the behavior to use when deleting a variable category.</summary>
    </member>
    <member name="F:DriveWorks.DeleteVariableCategoryBehavior.None">
      <summary>Delete a single variable category with no children.</summary>
    </member>
    <member name="F:DriveWorks.DeleteVariableCategoryBehavior.DeleteCategoriesAndMoveVariables">
      <summary>Deletes descendent categories, and moves all descendent variables to the category's parent.</summary>
    </member>
    <member name="F:DriveWorks.DeleteVariableCategoryBehavior.MoveCategoriesAndVariables">
      <summary>Moves child categories and variables to the category's parent.</summary>
    </member>
    <member name="T:DriveWorks.DistanceMeasurementUnitOptions">
      <summary>Provides the measurement unit options supported by DriveWorks measurement-enabled facilities</summary>
    </member>
    <member name="F:DriveWorks.DistanceMeasurementUnitOptions.Feet">
      <summary>The measurement is given in decimal feet.</summary>
    </member>
    <member name="F:DriveWorks.DistanceMeasurementUnitOptions.Inches">
      <summary>The measurement is given in decimal inches.</summary>
    </member>
    <member name="F:DriveWorks.DistanceMeasurementUnitOptions.Meters">
      <summary>The measurement is given in meters.</summary>
    </member>
    <member name="F:DriveWorks.DistanceMeasurementUnitOptions.Millimeters">
      <summary>The measurement is given in millimeters.</summary>
    </member>
    <member name="T:DriveWorks.FileResultStatus">
      <summary>Represents the status of a file result.</summary>
    </member>
    <member name="F:DriveWorks.FileResultStatus.Valid">
      <summary>The result is a file that is valid.</summary>
    </member>
    <member name="F:DriveWorks.FileResultStatus.Suppressed">
      <summary>The result is a suppression result.</summary>
    </member>
    <member name="F:DriveWorks.FileResultStatus.Invalid">
      <summary>The result is a file path which isn't valid.</summary>
    </member>
    <member name="T:DriveWorks.FunctionInformationAttributes">
      <summary>Provides information on various states and flags of a function.</summary>
    </member>
    <member name="F:DriveWorks.FunctionInformationAttributes.None">
      <summary>A lack of special attributes.</summary>
    </member>
    <member name="F:DriveWorks.FunctionInformationAttributes.IsHidden">
      <summary>Whether or not the function should be hidden from editors.</summary>
    </member>
    <member name="T:DriveWorks.ProjectCalculationTableColumnType">
      <summary>A set of different types of calculation table columns.</summary>
    </member>
    <member name="F:DriveWorks.ProjectCalculationTableColumnType.Data">
      <summary>Default type with no special behaviours.</summary>
    </member>
    <member name="F:DriveWorks.ProjectCalculationTableColumnType.ControlInput">
      <summary>Column's cell values are fetched from controls with the same names as the cells.</summary>
    </member>
    <member name="F:DriveWorks.ProjectCalculationTableColumnType.ControlOutput">
      <summary>The values from the cells can be automatically bound into matching controls with the same name.</summary>
    </member>
    <member name="T:DriveWorks.ProjectChildSpecificationOutputType">
      <summary>Represents the types of output for a child specification.</summary>
    </member>
    <member name="F:DriveWorks.ProjectChildSpecificationOutputType.Variable">
      <summary>Represents a project variable type.</summary>
    </member>
    <member name="F:DriveWorks.ProjectChildSpecificationOutputType.SpecificationProperty">
      <summary>Represents a project specification property type.</summary>
    </member>
    <member name="T:DriveWorks.ProjectRuleTechnology">
      <summary>Specifies the rule technology used in the Project.</summary>
    </member>
    <member name="F:DriveWorks.ProjectRuleTechnology.Titan">
      <summary>Specifies that this Project uses the Titan rule engine for its calculations.</summary>
    </member>
    <member name="T:DriveWorks.RelativeToDirectory">
      <summary>Specifies how relative paths are handled.</summary>
    </member>
    <member name="F:DriveWorks.RelativeToDirectory.Auto">
      <summary>For a project, this is equivalent to , for a specification it is equivalent to
<see cref="F:DriveWorks.RelativeToDirectory.Specification" />.</summary>
    </member>
    <member name="F:DriveWorks.RelativeToDirectory.Project">
      <summary>Relative paths are resolved relative to the project directory, for a specification, this means the original project directory.</summary>
    </member>
    <member name="F:DriveWorks.RelativeToDirectory.Specification">
      <summary>Relative paths are resolved relative to the specification directory. For a project, this is equivalent to .</summary>
    </member>
    <member name="F:DriveWorks.RelativeToDirectory.SpecificationMetadata">
      <summary>Relative paths are resolved relative to the specification metadata directory. For a project, this is equivalent to .</summary>
    </member>
    <member name="F:DriveWorks.RelativeToDirectory.GroupContent">
      <summary>Relative paths are resolved relative to the groups' content directory if it is set, otherwise null is returned.</summary>
    </member>
    <member name="T:DriveWorks.RuleErrorCodeOptions">
      <summary>Gets known rule evaluation error codes.</summary>
    </member>
    <member name="F:DriveWorks.RuleErrorCodeOptions.DivisionByZero">
      <summary>An attempt was made to divide by zero.</summary>
    </member>
    <member name="F:DriveWorks.RuleErrorCodeOptions.NotApplicable">
      <summary>A performed operation was invalid.</summary>
    </member>
    <member name="F:DriveWorks.RuleErrorCodeOptions.Name">
      <summary>A name used in the rule or one or more of its dependants is invalid.</summary>
    </member>
    <member name="F:DriveWorks.RuleErrorCodeOptions.Null">
      <summary>An attempt is made to use a null value.</summary>
    </member>
    <member name="F:DriveWorks.RuleErrorCodeOptions.Reference">
      <summary>A referenced cell is invalid.</summary>
    </member>
    <member name="F:DriveWorks.RuleErrorCodeOptions.Value">
      <summary>The value is invalid or out of range.</summary>
    </member>
    <member name="F:DriveWorks.RuleErrorCodeOptions.Calculation">
      <summary>The value couldn't be calculated (this is a DriveWorks defined error code.)</summary>
    </member>
    <member name="F:DriveWorks.RuleErrorCodeOptions.CircularReference">
      <summary>The value couldn't be calculated because the rule is circular (this is a DriveWorks defined error code.)</summary>
    </member>
    <member name="F:DriveWorks.RuleErrorCodeOptions.InvalidRule">
      <summary>The value couldn't be calculated because the rule is invalid (this is a DriveWorks defined error code.)</summary>
    </member>
    <member name="T:DriveWorks.RuleSection">
      <summary>Represents a part of DriveWorks containing rules.</summary>
    </member>
    <member name="F:DriveWorks.RuleSection.Variables">
      <summary>The Variables view.</summary>
    </member>
    <member name="F:DriveWorks.RuleSection.ComponentSets">
      <summary>The Model And Drawing rules view.</summary>
    </member>
    <member name="F:DriveWorks.RuleSection.Controls">
      <summary>The dynamic properties of Form Controls.</summary>
    </member>
    <member name="F:DriveWorks.RuleSection.Decisions">
      <summary>Decisions in the Specification Flow.</summary>
    </member>
    <member name="F:DriveWorks.RuleSection.Documents">
      <summary>The Documents view.</summary>
    </member>
    <member name="F:DriveWorks.RuleSection.Messages">
      <summary>The project messages view.</summary>
    </member>
    <member name="F:DriveWorks.RuleSection.SpecificationFlow">
      <summary>Specification Flow Tasks.</summary>
    </member>
    <member name="F:DriveWorks.RuleSection.SpecificationMacros">
      <summary>Specification Macros.</summary>
    </member>
    <member name="F:DriveWorks.RuleSection.SpecificationProperties">
      <summary>The project specification properties.</summary>
    </member>
    <member name="F:DriveWorks.RuleSection.SpecificationSetting">
      <summary>The Specification Settings view.</summary>
    </member>
    <member name="F:DriveWorks.RuleSection.CalculationTables">
      <summary>Calculation Table Cells.</summary>
    </member>
    <member name="F:DriveWorks.RuleSection.ComponentTasks">
      <summary>The component tasks.</summary>
    </member>
    <member name="F:DriveWorks.RuleSection.All">
      <summary>All areas of DriveWorks containing rules.</summary>
    </member>
    <member name="T:DriveWorks.SpecificationPropertiesResult">
      <summary>Represents the result of trying to retrieve the properties for a Specification.</summary>
    </member>
    <member name="F:DriveWorks.SpecificationPropertiesResult.Success">
      <summary>The specification properties were loaded successfully.</summary>
    </member>
    <member name="F:DriveWorks.SpecificationPropertiesResult.InvalidXml">
      <summary>The specification properties could not be loaded because the XML was malformed.</summary>
    </member>
    <member name="F:DriveWorks.SpecificationPropertiesResult.FileMissing">
      <summary>The specification properties could not be loaded because the specification file could not be found.</summary>
    </member>
    <member name="F:DriveWorks.SpecificationPropertiesResult.AccessDenied">
      <summary>The specification properties file could not be accessed. This could be due to insufficient permissions.</summary>
    </member>
    <member name="T:DriveWorks.AdvancedXmlDocument">
      <summary>Provides the capability to generate an XML Document from an existing template.</summary>
    </member>
    <member name="T:DriveWorks.AgentDetails">
      <summary>Provides information about a group agent.</summary>
    </member>
    <member name="T:DriveWorks.AgentLogEntry">
      <summary>Provides information about a log entry for an agent.</summary>
    </member>
    <member name="T:DriveWorks.AlreadyInitializedException">
      <summary>Thrown when an attempt is made to initalize an object which has already been initialized.</summary>
    </member>
    <member name="T:DriveWorks.BasicLockSafeProjectExecutor">
      <summary>Represents an object that will allow thread-safe project executions to be performed by locking on an object.</summary>
    </member>
    <member name="T:DriveWorks.CalculationTableExport">
      <summary>A Document responsible for updating and appending rows to calculation tables.</summary>
    </member>
    <member name="T:DriveWorks.CalculationTableExportDetails">
      <summary>Represents a collection of information for a calculation table export document.</summary>
    </member>
    <member name="T:DriveWorks.CapturedComponentStatus">
      <summary>Represents the status of a captured component.</summary>
    </member>
    <member name="T:DriveWorks.CaptureImportManager">
      <summary>Provides the ability to import components from one source into the group which created the import manager.</summary>
    </member>
    <member name="T:DriveWorks.CellValueChangedEventArgs">
      <summary>Provides event information for when a cell's value changes.</summary>
    </member>
    <member name="T:DriveWorks.ChangedValue`1">
      <summary>Provides the new and old values of an object</summary>
      <typeparam name="T">The type for the object that has changed.</typeparam>
    </member>
    <member name="T:DriveWorks.ClipboardException">
      <summary>Thrown when an exception occurs in the ClipboardHelper class.</summary>
    </member>
    <member name="T:DriveWorks.Column">
      <summary>Represents a column definition for a tabular data.</summary>
    </member>
    <member name="T:DriveWorks.Columns">
      <summary>Provides access to a list of column definitions for a table of data.</summary>
    </member>
    <member name="T:DriveWorks.ComponentTaskRuleEventArgs">
      <summary>The event data for events involving s.</summary>
    </member>
    <member name="T:DriveWorks.ConnectionManager">
      <summary>Manages connections for all projects created by a given engine host.</summary>
    </member>
    <member name="T:DriveWorks.ConstantDataCorruptException">
      <summary>Thrown when constant information cannot be loaded because the underlying data store is in the wrong format.</summary>
    </member>
    <member name="T:DriveWorks.ConstantEventArgs">
      <summary>Provides the data for the event raised when a constant is changed.</summary>
    </member>
    <member name="T:DriveWorks.CopiedFile">
      <summary>Provides support for creating duplicates of files as part of the DriveWorks specification.</summary>
    </member>
    <member name="T:DriveWorks.CorruptDocumentDataException">
      <summary>Thrown when a project is in the process of being opened but one or more of its documents has corrupt data.</summary>
    </member>
    <member name="T:DriveWorks.DataExportRowDefinition">
      <summary>Used by the  and <see cref="T:DriveWorks.SqlServerExport" /> classes to represent a row that will be exported.</summary>
    </member>
    <member name="T:DriveWorks.DataExportSummaryInfo">
      <summary>Used to provide a summary of what will be done for a particular row when a Data Export is ran.</summary>
    </member>
    <member name="T:DriveWorks.DataTableEventArgs">
      <summary>Provides the data for the event raised when a table is changed.</summary>
    </member>
    <member name="T:DriveWorks.DeferredTaskFailureDetails">
      <summary>Represents information about a failed attempt at processing a deferred task.</summary>
    </member>
    <member name="T:DriveWorks.DesignMasterExistsException">
      <summary>Thrown when a project cannot be created because the design master file already exists.</summary>
    </member>
    <member name="T:DriveWorks.DesignMasterFormatException">
      <summary>Thrown when a project cannot be loaded because the design master format is not understood.</summary>
    </member>
    <member name="T:DriveWorks.DesignMasterReadOnlyException">
      <summary>Thrown when an attempt is made to open a project whose design master is read-only.</summary>
    </member>
    <member name="T:DriveWorks.DialogUserMessage">
      <summary>Provides a base for user messages that wish to use dialogs.</summary>
    </member>
    <member name="T:DriveWorks.DisplayFileDataCorruptException">
      <summary>Thrown when display file information cannot be loaded because the underlying data store is in the wrong format.</summary>
    </member>
    <member name="T:DriveWorks.DisposableProject">
      <summary>Represents a temporary project which can be used to query information about a project and later disposed.</summary>
    </member>
    <member name="T:DriveWorks.DocumentEventArgs">
      <summary>Provides the data for the event raised when a document is changed.</summary>
    </member>
    <member name="T:DriveWorks.Email">
      <summary>Provides support for sending custom emails, as part of the driveworks specification.</summary>
    </member>
    <member name="T:DriveWorks.EmailDocumentDetails">
      <summary>Provides a cached copy of an email documents settings that can be edited and then pushed into the document at will.</summary>
    </member>
    <member name="T:DriveWorks.EmailResult">
      <summary>Helper class to store email details.</summary>
    </member>
    <member name="T:DriveWorks.EnumerationInterruptedException">
      <summary>Thrown when an enumeration operation is interrupted, for example, by a lack of network connectivity.</summary>
    </member>
    <member name="T:DriveWorks.ExcelDocument">
      <summary>Provides support for creating Microsoft Excel documents as part of a DriveWorks specification.</summary>
    </member>
    <member name="T:DriveWorks.FileCopyingEventArgs">
      <summary>Represents event date for file copying.</summary>
    </member>
    <member name="T:DriveWorks.FileDocumentBase">
      <summary>Provides a base for documents that are based on using specific files.</summary>
    </member>
    <member name="T:DriveWorks.FormDataCorruptException">
      <summary>Thrown when form information cannot be loaded because the underlying data store is in the wrong format.</summary>
    </member>
    <member name="T:DriveWorks.FunctionInformation">
      <summary>Provides information about a function.</summary>
    </member>
    <member name="T:DriveWorks.GeneralGroupSettings">
      <summary>Provides access to general group level settings.</summary>
    </member>
    <member name="T:DriveWorks.Group">
      <summary>Provides access to the information stored in a DriveWorks group such as project and specification registration information.</summary>
    </member>
    <member name="T:DriveWorks.GroupCapturedComponents">
      <summary>Provides accessors for a group's capture information.</summary>
    </member>
    <member name="T:DriveWorks.GroupConnectionException">
      <summary>Thrown when an attempt is made to open a group with a bad connection string.</summary>
    </member>
    <member name="T:DriveWorks.GroupConnectionStringBuilder">
      <summary>Provides help for building up and interpreting group connection strings.</summary>
    </member>
    <member name="T:DriveWorks.GroupConnectorInformation">
      <summary>Provides a base for group connector configuration.</summary>
    </member>
    <member name="T:DriveWorks.GroupConnectors">
      <summary>Provides access and management for a collection of group connectors.</summary>
    </member>
    <member name="T:DriveWorks.GroupDataTable">
      <summary>Provides a base class for a Group level table.</summary>
    </member>
    <member name="T:DriveWorks.GroupDataTables">
      <summary>Provides access to group tables and their management.</summary>
    </member>
    <member name="T:DriveWorks.GroupEditionException">
      <summary>Thrown when an attempt is made to open a group which is from an unsupported edition of DriveWorks.</summary>
    </member>
    <member name="T:DriveWorks.GroupException">
      <summary>Thrown when an attempt is made to connect to a group and fails.</summary>
    </member>
    <member name="T:DriveWorks.GroupExistsException">
      <summary>Thrown when an attempt is made to open a group and it is already in use.</summary>
    </member>
    <member name="T:DriveWorks.GroupNotFoundException">
      <summary>Thrown when an attempt is made to open a group and it is not found.</summary>
    </member>
    <member name="T:DriveWorks.GroupProjects">
      <summary>Provides accessors for a group's project information.</summary>
    </member>
    <member name="T:DriveWorks.GroupReleasedComponents">
      <summary>Provides accessors for a group's released component information.</summary>
    </member>
    <member name="T:DriveWorks.GroupReports">
      <summary>Provides accessors for a group's report information.</summary>
    </member>
    <member name="T:DriveWorks.GroupSecurity">
      <summary>Provides accessors for a group's security information.</summary>
    </member>
    <member name="T:DriveWorks.GroupSharingViolationException">
      <summary>Thrown when an attempt is made to open a group and it is already in use.</summary>
    </member>
    <member name="T:DriveWorks.GroupSpecifications">
      <summary>Provides access to the specifications in a DriveWorks group.</summary>
    </member>
    <member name="T:DriveWorks.GroupTableExport">
      <summary>Document that when generated will update a group table's data.</summary>
    </member>
    <member name="T:DriveWorks.GroupUpgradeAbortedException">
      <summary>Thrown when a group upgrade has been stopped by the user.</summary>
    </member>
    <member name="T:DriveWorks.GroupVersionException">
      <summary>Thrown when a group version is higher than what is currently supported.</summary>
    </member>
    <member name="T:DriveWorks.GroupVersionInformation">
      <summary>Provides group version information.</summary>
    </member>
    <member name="T:DriveWorks.IArrayValueConverter">
      <summary>Implements a type converter for array values.</summary>
    </member>
    <member name="T:DriveWorks.ImportedDataTable">
      <summary>Provides access to a data table that has been imported from an excel source</summary>
    </member>
    <member name="T:DriveWorks.IndexesChangedEventArgs">
      <summary>Provides event data about an index change.</summary>
    </member>
    <member name="T:DriveWorks.InvalidAttachmentsException">
      <summary>Thrown when attachments are not valid.</summary>
    </member>
    <member name="T:DriveWorks.InvalidCharactersException">
      <summary>Thrown when a file path contains invalid characters</summary>
    </member>
    <member name="T:DriveWorks.InvalidDocumentGeneratedException">
      <summary>Contains error information pertaining to an invalid document that has been generated.</summary>
    </member>
    <member name="T:DriveWorks.InvalidDocumentPathException">
      <summary>Contains error information pertaining to invalid DriveWorks document file and relative path rules.</summary>
    </member>
    <member name="T:DriveWorks.InvalidRuleException">
      <summary>Thrown when a formula can not be set because the given rule has errors within it.</summary>
    </member>
    <member name="T:DriveWorks.ItemDeletedException">
      <summary>Thrown when a modification is attempted against an item which has been deleted.</summary>
    </member>
    <member name="T:DriveWorks.ItemExistsException">
      <summary>Thrown when an attempt is made to create or add an item which already exists.</summary>
    </member>
    <member name="T:DriveWorks.ItemNotFoundException">
      <summary>Thrown when an attempt is made to retrieve an item which could not be found.</summary>
    </member>
    <member name="T:DriveWorks.Job">
      <summary>Represents something to be actioned in DriveWorks.</summary>
    </member>
    <member name="T:DriveWorks.JobClientDetails">
      <summary>Represents information about a client requesting to process a job.</summary>
    </member>
    <member name="T:DriveWorks.JobProcessorAttribute">
      <summary>Used to indicate something that will handle the processing of a particular type of job within DriveWorks.</summary>
    </member>
    <member name="T:DriveWorks.JobQueue">
      <summary>Represents a queue of jobs that need processing.</summary>
    </member>
    <member name="T:DriveWorks.JobRequestTagInformation">
      <summary>Represents information about a job request.</summary>
    </member>
    <member name="T:DriveWorks.Jobs">
      <summary>Represents a collection of jobs that are waiting to be processed or are currently being processed in DriveWorks.</summary>
    </member>
    <member name="T:DriveWorks.JobTypeConstants">
      <summary>Provides strings for the types of job that can be processed in DriveWorks.</summary>
    </member>
    <member name="T:DriveWorks.MacroFailedException">
      <summary>Thrown when a macro has failed to execute.</summary>
    </member>
    <member name="T:DriveWorks.MeasurementHelper">
      <summary>Provides methods to help when working with measurement values.</summary>
    </member>
    <member name="T:DriveWorks.MessageDataCorruptException">
      <summary>Thrown when message information cannot be loaded because the underlying data store is in the wrong format.</summary>
    </member>
    <member name="T:DriveWorks.MessageEventArgs">
      <summary>Provides the data for the event raised when a message is changed.</summary>
    </member>
    <member name="T:DriveWorks.MissingApplicationException">
      <summary>Thrown when an attempt is made to use an application that is not installed or is corrupt etc.</summary>
    </member>
    <member name="T:DriveWorks.MissingPrerequisiteException">
      <summary>Thrown when an attempt is made to use a prerequisite component that is not available.</summary>
    </member>
    <member name="T:DriveWorks.NotInitializedException">
      <summary>Thrown when an attempt is made to access a member of an object which requires that the object is initialized first.</summary>
    </member>
    <member name="T:DriveWorks.OdbcDataTable">
      <summary>Provides support for retrieving data from ODBC data sources.</summary>
    </member>
    <member name="T:DriveWorks.OdbcExport">
      <summary>Provides support for exporting data to an ODBC database as part of a DriveWorks specification.</summary>
    </member>
    <member name="T:DriveWorks.PreviewControlException">
      <summary>Thrown when there is a problem with the 3D preview control.</summary>
    </member>
    <member name="T:DriveWorks.PreviewExceptionEventArgs">
      <summary>Provides event data for events related to preview exceptions.</summary>
    </member>
    <member name="T:DriveWorks.PreviewResourceChangedEventArgs">
      <summary>Event args for when a 3D Preview's resource has been changed.</summary>
    </member>
    <member name="T:DriveWorks.PreviewServerResult">
      <summary>Represents the result of a preview request that will round trip through SOLIDWORKS.</summary>
    </member>
    <member name="T:DriveWorks.ProfilerSpecificationMonitor">
      <summary>Provides support for monitoring a specification in the profiler.</summary>
    </member>
    <member name="T:DriveWorks.Project">
      <summary>Provides facilities for working with DriveWorks projects and specifications.</summary>
    </member>
    <member name="T:DriveWorks.ProjectCalculationTable">
      <summary>A project based table that is comprised of referable cells and can interact with controls based on naming conventions.</summary>
    </member>
    <member name="T:DriveWorks.ProjectCalculationTableColumn">
      <summary>Represents a project calculation table's column and a collection of cell's within it.</summary>
    </member>
    <member name="T:DriveWorks.ProjectCalculationTableColumns">
      <summary>Provides access to a collection to calculation table columns.</summary>
    </member>
    <member name="T:DriveWorks.ProjectCalculationTableRule">
      <summary>Provides a representation of a calculation table rule. I.e. either a cell rule or a column rule etc.</summary>
    </member>
    <member name="T:DriveWorks.ProjectCalculationTables">
      <summary>Provides access to a collection project calculation tables.</summary>
    </member>
    <member name="T:DriveWorks.ProjectChildSpecificationDef">
      <summary>Provides access to a child specification definition.</summary>
    </member>
    <member name="T:DriveWorks.ProjectChildSpecificationInputDef">
      <summary>Provides access to an input mapping for a given project in a child specification definition.</summary>
    </member>
    <member name="T:DriveWorks.ProjectChildSpecificationOutputDef">
      <summary>Provides access to an output mapping for a given project in a child specification definition.</summary>
    </member>
    <member name="T:DriveWorks.ProjectChildSpecificationProjectDef">
      <summary>Provides access to the input and output mappings that have been defined for a given type of project in a child specification definition.</summary>
    </member>
    <member name="T:DriveWorks.ProjectClosingEventArgs">
      <summary>Represents event data for project closing.</summary>
    </member>
    <member name="T:DriveWorks.ProjectComponentManager">
      <summary>Provides functionality to update a DriveWorks Project file as necessary during import from another group.</summary>
    </member>
    <member name="T:DriveWorks.ProjectComponentSet">
      <summary>Provides access to a component set which contains the rules for a complete hierarchy of components.</summary>
    </member>
    <member name="T:DriveWorks.ProjectComponentSetEventArgs">
      <summary>Provides the data for the event raised when a component set is changed.</summary>
    </member>
    <member name="T:DriveWorks.ProjectComponentSetNameChangedEventArgs">
      <summary>Provides the data for the event raised when a component set's name is changed.</summary>
    </member>
    <member name="T:DriveWorks.ProjectComponentSets">
      <summary>Provides access to a project's component sets.</summary>
    </member>
    <member name="T:DriveWorks.ProjectComponentTasks">
      <summary>Represents collections of s that aren't tied to specific components.</summary>
    </member>
    <member name="T:DriveWorks.ProjectConstant">
      <summary>Represents a constant value in a project.</summary>
    </member>
    <member name="T:DriveWorks.ProjectConstants">
      <summary>Provides access to a project's constants.</summary>
    </member>
    <member name="T:DriveWorks.ProjectCreationException">
      <summary>Thrown when a project cannot be created for an unknown reason.</summary>
    </member>
    <member name="T:DriveWorks.ProjectDataTable">
      <summary>Provides a means to work with a data table in a project.</summary>
    </member>
    <member name="T:DriveWorks.ProjectDataTables">
      <summary>Provides access to a project's data tables.</summary>
    </member>
    <member name="T:DriveWorks.ProjectDetails">
      <summary>Provides information about a registered DriveWorks project.</summary>
    </member>
    <member name="T:DriveWorks.ProjectDisplayFile">
      <summary>Represents a display file rule.</summary>
    </member>
    <member name="T:DriveWorks.ProjectDocument">
      <summary>Provides the base class for a project output document definition.</summary>
    </member>
    <member name="T:DriveWorks.ProjectDocumentRule">
      <summary>Provides a document provider with access to a document rule.</summary>
    </member>
    <member name="T:DriveWorks.ProjectDocumentRules">
      <summary>Provides a document provider with access to the rules which have been defined for the project.</summary>
    </member>
    <member name="T:DriveWorks.ProjectDocuments">
      <summary>Provides access to a project's output documents.</summary>
    </member>
    <member name="T:DriveWorks.ProjectExtenderLoadException">
      <summary>The exception that gets raised when a  or <see cref="T:DriveWorks.Extensibility.SharedProjectExtender" /> fails to load.</summary>
    </member>
    <member name="T:DriveWorks.ProjectFileExistsException">
      <summary>Thrown when a project cannot be created because one or more of the project files already exist.</summary>
    </member>
    <member name="T:DriveWorks.ProjectFilterList">
      <summary>Provides access to a collection filter strings for a specific section of DriveWorks, for a specific project.</summary>
    </member>
    <member name="T:DriveWorks.ProjectFunctionEvent">
      <summary>Provides information about an instance of a function's execution.</summary>
    </member>
    <member name="T:DriveWorks.ProjectFunctionProfile">
      <summary>Represents a summation of function based events of a particular type.</summary>
    </member>
    <member name="T:DriveWorks.ProjectInUseException">
      <summary>Thrown when a project is already opened</summary>
    </member>
    <member name="T:DriveWorks.ProjectItemListDef">
      <summary>Provides access to an item list definition.</summary>
    </member>
    <member name="T:DriveWorks.ProjectItemListTypeDef">
      <summary>Provides access to the information which defines a valid item type in an item list.</summary>
    </member>
    <member name="T:DriveWorks.ProjectItemListTypeOutputDef">
      <summary>Provides access to a mapping between a dialog control name and an item list column name.</summary>
    </member>
    <member name="T:DriveWorks.ProjectListItemData">
      <summary>Provides a simple wrapper for a Item List or <see cref="T:DriveWorks.Forms.ChildSpecificationList">child Specification List</see> Item.</summary>
    </member>
    <member name="T:DriveWorks.ProjectLoadException">
      <summary>Thrown when a project cannot be loaded for an unknown reason.</summary>
    </member>
    <member name="T:DriveWorks.ProjectMaintenance">
      <summary>Provides a way of maintaining a potentially broken project.</summary>
    </member>
    <member name="T:DriveWorks.ProjectMessage">
      <summary>Provides access to a project's messages.</summary>
    </member>
    <member name="T:DriveWorks.ProjectMessages">
      <summary>Provides access to a project's messages.</summary>
    </member>
    <member name="T:DriveWorks.ProjectMetadata">
      <summary>Provides access to the data stored in the project metadata file.</summary>
    </member>
    <member name="T:DriveWorks.ProjectMetadataSection">
      <summary>Provides access to the data in a section store in the project metadata file.</summary>
    </member>
    <member name="T:DriveWorks.ProjectNotFoundException">
      <summary>Thrown when an attempt is made to work with a specification for which the project could not be found.</summary>
    </member>
    <member name="T:DriveWorks.ProjectPermissionException">
      <summary>Thrown when a user does not have edit permission for a project they are trying to load.</summary>
    </member>
    <member name="T:DriveWorks.ProjectProfileEvent">
      <summary>Represents a logical event scope used to track processes in profiling.</summary>
    </member>
    <member name="T:DriveWorks.ProjectProfileEventArgs">
      <summary>Provides the event data for profiler events.</summary>
    </member>
    <member name="T:DriveWorks.ProjectProfileEventBase">
      <summary>Base concept of a profile event, be it either a rule or logical event.</summary>
    </member>
    <member name="T:DriveWorks.ProjectProfiler">
      <summary>Provides the ability to monitor events coming from a project.</summary>
    </member>
    <member name="T:DriveWorks.ProjectProfileRuleEventArgs">
      <summary>Provides the event data for profiler rule adding events.</summary>
    </member>
    <member name="T:DriveWorks.ProjectRuleEvent">
      <summary>Represents a project based rule event, such a calculation or value change.</summary>
    </member>
    <member name="T:DriveWorks.ProjectSaveException">
      <summary>Thrown when a project cannot be saved for an unknown reason.</summary>
    </member>
    <member name="T:DriveWorks.ProjectSpecialVariable">
      <summary>Provides access to an individual special variable.</summary>
    </member>
    <member name="T:DriveWorks.ProjectSpecialVariables">
      <summary>Provides access to a project's special variables.</summary>
    </member>
    <member name="T:DriveWorks.ProjectSpecificationProperties">
      <summary>Provides administration support for a project's specification properties.</summary>
    </member>
    <member name="T:DriveWorks.ProjectSpecificationProperty">
      <summary>Provides administration support for a project's specification property.</summary>
    </member>
    <member name="T:DriveWorks.ProjectSpecificationPropertyEventArgs">
      <summary>Provides the event data for events which affect a specification property.</summary>
    </member>
    <member name="T:DriveWorks.ProjectSpecificationSettings">
      <summary>Provides access to specification settings which are set at a project level</summary>
    </member>
    <member name="T:DriveWorks.ProjectUtility">
      <summary>Provides utility methods applicable to working with projects.</summary>
    </member>
    <member name="T:DriveWorks.ProjectVariable">
      <summary>Provides access to a variable.</summary>
    </member>
    <member name="T:DriveWorks.ProjectVariableCategories">
      <summary>Provides access to a project's variable categories.</summary>
    </member>
    <member name="T:DriveWorks.ProjectVariableCategory">
      <summary>Provides access to a variable category.</summary>
    </member>
    <member name="T:DriveWorks.ProjectVariables">
      <summary>Provides access to a project's variables.</summary>
    </member>
    <member name="T:DriveWorks.ProjectVersionException">
      <summary>Thrown when a project version is higher than what is currently supported.</summary>
    </member>
    <member name="T:DriveWorks.ReferencedFile">
      <summary>Provides support for referencing an arbitrary file as part of a DriveWorks Specification.</summary>
    </member>
    <member name="T:DriveWorks.ReleasedComponentTask">
      <summary>Represents a released .</summary>
    </member>
    <member name="T:DriveWorks.ReleasedEmail">
      <summary>Represents information about an email that has been released by DriveWorks.</summary>
    </member>
    <member name="T:DriveWorks.ReleasedTriggeredAction">
      <summary>Represents information about a triggered action that has been released by DriveWorks.</summary>
    </member>
    <member name="T:DriveWorks.ReleaseParameterDataContainer">
      <summary>Provides a wrapper around a  collection, adding in helper methods for extracting values from them.</summary>
    </member>
    <member name="T:DriveWorks.RemoteGroupBrowser">
      <summary>Provides browser support for a remote group server.</summary>
    </member>
    <member name="T:DriveWorks.RemoteGroupManager">
      <summary>Provides support for creating, deleting, and enumerating remote groups.</summary>
    </member>
    <member name="T:DriveWorks.RemoteGroupServer">
      <summary>Provides support for hosting a remote group.</summary>
    </member>
    <member name="T:DriveWorks.RemoteGroupServerVersionException">
      <summary>Thrown when the version number of the client connection is different to the version number of the server.</summary>
    </member>
    <member name="T:DriveWorks.RemoteGroupVersionDetails">
      <summary>Stores version details that are serializable.</summary>
    </member>
    <member name="T:DriveWorks.ReportDetails">
      <summary>Encapsulates information about a report.</summary>
    </member>
    <member name="T:DriveWorks.RollupDataTable">
      <summary>Provides access to a rollup table of all child specification values within an implementation.</summary>
    </member>
    <member name="T:DriveWorks.RuleChangeData">
      <summary>Represents data about a  to be changed.</summary>
    </member>
    <member name="T:DriveWorks.RuleSectionUtility">
      <summary>Provides a set of helper functions for working with the RuleSection enum.</summary>
    </member>
    <member name="T:DriveWorks.RuleVersionDetails">
      <summary>Provides information about a single version of a revisioned rule.</summary>
    </member>
    <member name="T:DriveWorks.SettingChangedEventArgs">
      <summary>Provides event data for the  event.</summary>
    </member>
    <member name="T:DriveWorks.SharedGroupDetails">
      <summary>Provides information about a shared group.</summary>
    </member>
    <member name="T:DriveWorks.SimpleDataTable">
      <summary>Provides access to a simple typed in data table, for use within DriveWorks.</summary>
    </member>
    <member name="T:DriveWorks.SimpleTableExport">
      <summary>Document that when generated will update a project simple table's data.</summary>
    </member>
    <member name="T:DriveWorks.SpecificationDialogMessage">
      <summary>Provides information about specification specific dialog messages.</summary>
    </member>
    <member name="T:DriveWorks.SpecificationMacroCategories">
      <summary>Provides access to a projects specification macro categories.</summary>
    </member>
    <member name="T:DriveWorks.SpecificationMacroCategory">
      <summary>Provides access to a specification macro category.</summary>
    </member>
    <member name="T:DriveWorks.SpecificationMacroCategoryEventArgs">
      <summary>Provides the data for the event raised when a specification macro category is changed.</summary>
    </member>
    <member name="T:DriveWorks.SqlServerDataTable">
      <summary>Provides support for retrieving data from SQL data sources.</summary>
    </member>
    <member name="T:DriveWorks.SqlServerExport">
      <summary>Provides support for exporting data to an SQl Server database as part of a DriveWorks specification.</summary>
    </member>
    <member name="T:DriveWorks.SqlTestResult">
      <summary>Provides information about an attempt to connect to a SQL server.</summary>
    </member>
    <member name="T:DriveWorks.StandardRuleTypes">
      <summary>Provides constants for standard types of rules and values exposed by the Engine.</summary>
    </member>
    <member name="T:DriveWorks.StandardSchemas">
      <summary>Provides access to core DriveWorks Engine XML namespaces.</summary>
    </member>
    <member name="T:DriveWorks.TableDataCorruptException">
      <summary>Thrown when table information cannot be loaded because the underlying data store is in the wrong format.</summary>
    </member>
    <member name="T:DriveWorks.TableExportCell">
      <summary>Provides interaction with a cell in table export document.</summary>
    </member>
    <member name="T:DriveWorks.TableExportColumn">
      <summary>Represents a table export column.</summary>
    </member>
    <member name="T:DriveWorks.TableExportColumns">
      <summary>Represents a collection of columns for table export document.</summary>
    </member>
    <member name="T:DriveWorks.TableExportDetails">
      <summary>Represents a collection of information for a table export document.</summary>
    </member>
    <member name="T:DriveWorks.TableExportRow">
      <summary>Represents an export row that will be used in a table export document.</summary>
    </member>
    <member name="T:DriveWorks.TableExportRows">
      <summary>Represents a collection of table export rows for a table export document.</summary>
    </member>
    <member name="T:DriveWorks.TableExportSummary">
      <summary>Represents a preview of all changes that will take place if a table export document is exported.</summary>
    </member>
    <member name="T:DriveWorks.TableExportSummaryRow">
      <summary>Represents a summary of an data table's export row.</summary>
    </member>
    <member name="T:DriveWorks.TextDocument">
      <summary>Provides support for creating a text file from scratch based on rules.</summary>
    </member>
    <member name="T:DriveWorks.TextDocumentLine">
      <summary>Provides support for building a rule for a line in a text document.</summary>
    </member>
    <member name="T:DriveWorks.TextDocumentLineRuleWrapper">
      <summary>Provides a wrapper around a Text Document's Line rule that allows the DisplayName property to be changed.</summary>
    </member>
    <member name="T:DriveWorks.TextDocumentLines">
      <summary>Represents the lines within a text document.</summary>
    </member>
    <member name="T:DriveWorks.TriggeredAction">
      <summary>Provides support for performing an action based on an event.</summary>
    </member>
    <member name="T:DriveWorks.TriggeredActionDetails">
      <summary>Provides support for exposing information about a released .</summary>
    </member>
    <member name="T:DriveWorks.TriggeredActionFileResult">
      <summary>Represents the result of evaluating a file for a  document.</summary>
    </member>
    <member name="T:DriveWorks.TriggeredActionTestResult">
      <summary>Represents the result of a  document.</summary>
    </member>
    <member name="T:DriveWorks.UnknownDataTableProviderException">
      <summary>Thrown when a project cannot be loaded because one or more of its documents specify unsupported providers.</summary>
    </member>
    <member name="T:DriveWorks.UnknownDocumentProviderException">
      <summary>Thrown when a project is in the process of being opened but one or more of its documents specify unsupported providers.</summary>
    </member>
    <member name="T:DriveWorks.UpgradeGroupDialogMessage">
      <summary>Represents the message sent to the application when the group needs to be upgraded.</summary>
    </member>
    <member name="T:DriveWorks.UploadFileException">
      <summary>Thrown when an exception occurs in the  class.</summary>
    </member>
    <member name="T:DriveWorks.UserChangedEventArgs">
      <summary>Provides the data raised for an event raised due to a user changing.</summary>
    </member>
    <member name="T:DriveWorks.UserDefinedFunctionInfo">
      <summary>Provides information about a user-defined function which is available for use in a project.</summary>
    </member>
    <member name="T:DriveWorks.UserMessage">
      <summary>Provides a base class for all user messages that can be raised from the engine to be shown to users.</summary>
    </member>
    <member name="T:DriveWorks.ValueChangedEventArgs`1">
      <summary>Provides event data for value changing events.</summary>
      <typeparam name="T">The type for the value that has changed</typeparam>
    </member>
    <member name="T:DriveWorks.ValueEventArgs`1">
      <summary>Provides event data for value specific events.</summary>
    </member>
    <member name="T:DriveWorks.VariableCategoryEventArgs">
      <summary>Provides the data for the event raised when a variable category is changed.</summary>
    </member>
    <member name="T:DriveWorks.VariableDataCorruptException">
      <summary>Thrown when variable information cannot be loaded because the underlying data store is in the wrong format.</summary>
    </member>
    <member name="T:DriveWorks.VariableEventArgs">
      <summary>Provides the data for the event raised when a variable is changed.</summary>
    </member>
    <member name="T:DriveWorks.WordDocument">
      <summary>Provides the capability to work with Microsoft Word documents.</summary>
    </member>
    <member name="T:DriveWorks.XmlTemplateDocument">
      <summary>Provides the capability to work with XML documents.</summary>
    </member>
    <member name="M:DriveWorks.AdvancedXmlDocument.#ctor">
      <summary>Creates a new instance of the  class.</summary>
    </member>
    <member name="M:DriveWorks.AdvancedXmlDocument.AddRule(System.Guid,System.String,System.String,System.String)">
      <summary>Creates and Adds a new  to the document.</summary>
      <returns>The created  object.</returns>
      <param name="ruleId">A unique Id for the new rule.</param>
      <param name="xpath">The XPath of the element being added.</param>
      <param name="formula">The formula for the rule.</param>
      <param name="comment">The rules comment.</param>
    </member>
    <member name="M:DriveWorks.AdvancedXmlDocument.GenerateCore(System.String,DriveWorks.Specification.RuleResults)">
      <summary>Generates a new driven advanced xml document.</summary>
      <param name="generateDirectory">Relative directory to place driven document.</param>
      <param name="results">Resolved rules.</param>
    </member>
    <member name="M:DriveWorks.AdvancedXmlDocument.GetDocumentRuleIds">
      <summary>Returns a Dictionary of rule XPaths and respective Rule Id.</summary>
    </member>
    <member name="M:DriveWorks.AdvancedXmlDocument.GetProjectDocumentRule(System.String)">
      <summary>Gets the  associated with this Id.</summary>
      <param name="id">The Id of the required rule.</param>
    </member>
    <member name="M:DriveWorks.AdvancedXmlDocument.GetRuleForPath(System.String)">
      <summary>Gets the  at the given XPath.</summary>
      <param name="xPath">The XPath to the required element.</param>
    </member>
    <member name="M:DriveWorks.AdvancedXmlDocument.GetRuleResults">
      <summary>Gets a Dictionary of all Rule Ids for this document and their evaluated result.</summary>
    </member>
    <member name="M:DriveWorks.AgentDetails.#ctor(System.String,System.String,System.String)">
      <summary>Creates a new instance of the AgentDetails class.</summary>
      <param name="machineName">The name of the machine for this agent.</param>
      <param name="operatingSystem">The operating system for this agent.</param>
      <param name="processorArchitecture">The processor architecture for this agent.</param>
    </member>
    <member name="P:DriveWorks.AgentDetails.MachineName">
      <summary>Gets the machine name of this agent.</summary>
    </member>
    <member name="P:DriveWorks.AgentDetails.OperatingSystem">
      <summary>Gets the operating system name for this agent.</summary>
    </member>
    <member name="P:DriveWorks.AgentDetails.ProcessorArchitecture">
      <summary>Gets the processor architecture for this agent.</summary>
    </member>
    <member name="P:DriveWorks.AgentLogEntry.AgentName">
      <summary>Name the of the agent that logged this entry.</summary>
    </member>
    <member name="P:DriveWorks.AgentLogEntry.DateAndTime">
      <summary>the date and time of this log entry.</summary>
    </member>
    <member name="P:DriveWorks.AgentLogEntry.Description">
      <summary>The description for this entry.</summary>
    </member>
    <member name="P:DriveWorks.AgentLogEntry.SourceDisplayName">
      <summary>The source display name of this log entry.</summary>
    </member>
    <member name="P:DriveWorks.AgentLogEntry.TargetDisplayName">
      <summary>The target display name of this entry.</summary>
    </member>
    <member name="P:DriveWorks.AgentLogEntry.Type">
      <summary>The log type for this entry.</summary>
    </member>
    <member name="M:DriveWorks.AlreadyInitializedException.#ctor">
      <summary>Creates an instance of the  class.</summary>
    </member>
    <member name="M:DriveWorks.AlreadyInitializedException.#ctor(System.String)">
      <summary>Creates an instance of the  class.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:DriveWorks.AlreadyInitializedException.#ctor(System.String,System.Exception)">
      <summary>Creates an instance of the  class.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">The inner exception.</param>
    </member>
    <member name="M:DriveWorks.AlreadyInitializedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the  class with serialized data.</summary>
      <param name="info">The  that holds the serialized object data about the exception being thrown</param>
      <param name="context">The  that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:DriveWorks.BasicLockSafeProjectExecutor.BeginInvoke(System.Action)">
      <summary>Invokes an action asynchronously on a new thread.</summary>
      <param name="action">The action to run.</param>
    </member>
    <member name="M:DriveWorks.BasicLockSafeProjectExecutor.Invoke(System.Action)">
      <summary>Invokes an action synchronously on the current thread.</summary>
      <param name="action">The action to run.</param>
    </member>
    <member name="M:DriveWorks.CalculationTableExport.GetDetails">
      <summary>Gets the details for this document.</summary>
    </member>
    <member name="M:DriveWorks.CalculationTableExport.GetExportSummary">
      <summary>Gets a summary of changes that would take place if the document was generated now.</summary>
    </member>
    <member name="P:DriveWorks.CalculationTableExportDetails.DriveControlColumns">
      <summary>Whether or not control columns will be driven during export.</summary>
    </member>
    <member name="P:DriveWorks.CalculationTableExportDetails.TableName">
      <summary>The name of the table that the document will drive.</summary>
    </member>
    <member name="P:DriveWorks.CapturedComponentStatus.Id">
      <summary>Gets the unique identifier of the captured component if it exists, otherwise a null reference is returned.</summary>
    </member>
    <member name="P:DriveWorks.CapturedComponentStatus.IsDeleted">
      <summary>Determines whether the captured component is deleted in the target group.</summary>
    </member>
    <member name="P:DriveWorks.CapturedComponentStatus.Path">
      <summary>Gets the full path of the captured component if it exists, otherwise a null reference is returned.</summary>
    </member>
    <member name="M:DriveWorks.CaptureImportManager.Import">
      <summary>Performs the import process.</summary>
      <returns>A dictionary mapping the original captured component identifiers to their new captured component identifiers for components which required remapping.</returns>
    </member>
    <member name="M:DriveWorks.CaptureImportManager.AddFromComponent(DriveWorks.Components.CapturedComponent)">
      <summary>Adds the given component to the collection of components to import.</summary>
      <param name="component">The component to add.</param>
    </member>
    <member name="M:DriveWorks.CaptureImportManager.AddFromComponent(DriveWorks.Components.CapturedComponent,System.String)">
      <summary>Adds the given component to the collection of components to import, and changes it's master path to the new path given.</summary>
      <param name="component">The component to add.</param>
      <param name="newPath">The new master path of the component.</param>
    </member>
    <member name="P:DriveWorks.CaptureImportManager.DuplicateBehavior">
      <summary>Gets/sets the default behavior for duplicated items.</summary>
    </member>
    <member name="P:DriveWorks.CellValueChangedEventArgs.X">
      <summary>The horizontal location of the cell.</summary>
    </member>
    <member name="P:DriveWorks.CellValueChangedEventArgs.Y">
      <summary>The vertical location of the cell.</summary>
    </member>
    <member name="M:DriveWorks.ChangedValue`1.#ctor(`0,`0)">
      <summary>Creates a new instance of the  class.</summary>
      <param name="oldValue">The old value.</param>
      <param name="newValue">the new value.</param>
    </member>
    <member name="P:DriveWorks.ChangedValue`1.NewValue">
      <summary>The new, current value.</summary>
    </member>
    <member name="P:DriveWorks.ChangedValue`1.OldValue">
      <summary>The old, original value.</summary>
    </member>
    <member name="M:DriveWorks.ClipboardException.#ctor">
      <summary>Creates a new  object.</summary>
    </member>
    <member name="M:DriveWorks.ClipboardException.#ctor(System.String)">
      <summary>Creates a new  object.</summary>
    </member>
    <member name="M:DriveWorks.ClipboardException.#ctor(System.String,System.Exception)">
      <summary>Creates a new  object.</summary>
    </member>
    <member name="M:DriveWorks.Column.MoveDown">
      <summary>Moves the column to a position after its following sibling.</summary>
    </member>
    <member name="M:DriveWorks.Column.MoveUp">
      <summary>Moves the column to a position before its preceding sibling.</summary>
    </member>
    <member name="P:DriveWorks.Column.Index">
      <summary>Gets an index which indicates the position of the column.</summary>
      <returns>The index of the column in the column set.</returns>
    </member>
    <member name="P:DriveWorks.Column.Name">
      <summary>Gets the name of the column.</summary>
      <returns>A string containing the name of the column.</returns>
    </member>
    <member name="M:DriveWorks.Columns.Add(System.String)">
      <summary>Adds a new column to the column collection.</summary>
      <param name="name">Name of the new column.</param>
    </member>
    <member name="M:DriveWorks.Columns.Clear">
      <summary>Removes all columns from the collection.</summary>
    </member>
    <member name="M:DriveWorks.Columns.GetEnumerator">
      <summary>Returns an enumerator that iterates through the .</summary>
      <returns>An enumerator that iterates through the .</returns>
    </member>
    <member name="M:DriveWorks.Columns.MoveColumnDown(DriveWorks.Column)">
      <summary>Moves the column to a position after its following sibling.</summary>
      <param name="columnToMove">The Column to move.</param>
    </member>
    <member name="M:DriveWorks.Columns.MoveColumnUp(DriveWorks.Column)">
      <summary>Moves the column to a position before its preceding sibling.</summary>
      <param name="columnToMove">The Column to move.</param>
    </member>
    <member name="M:DriveWorks.Columns.Remove(DriveWorks.Column)">
      <summary>Removes a column from the column collection.</summary>
      <param name="column">Column to remove.</param>
    </member>
    <member name="M:DriveWorks.Columns.ToArray">
      <summary>Gets an array of all the columns which have been defined.</summary>
    </member>
    <member name="E:DriveWorks.Columns.Changed">
      <summary>Raised when a column has changed it's index or name.</summary>
    </member>
    <member name="P:DriveWorks.ComponentTaskRuleEventArgs.Rule">
      <summary>Gets the rule associated with the event.</summary>
    </member>
    <member name="M:DriveWorks.ConnectionManager.DbExecute(System.String,System.String,System.String,System.String,System.Boolean)">
      <summary>Executes a query against a database.</summary>
      <returns>A number indicating how many records were affected, or a string containing the error message if something went wrong.</returns>
      <param name="dsn">The connection string or ODBC DSN to which to connect.</param>
      <param name="sql">The SQL command to execute.</param>
      <param name="username">Optionally, the user name to use to connect.</param>
      <param name="password">Optionally, the user password to use to connect.</param>
      <param name="preview">Indicates whether the result should be committed or not.</param>
    </member>
    <member name="M:DriveWorks.ConnectionManager.GetDataDispatch(System.Boolean,System.String)">
      <summary>Performs a DriveWorks GetData operation given a GetData string.</summary>
      <returns>The result of the GetData string.</returns>
      <param name="isArray">True if the result is going to be used in an array rule, and therefore should be delimited by | characters, false if a single value is expected.</param>
      <param name="getDataString">The GetData string to execute.</param>
    </member>
    <member name="M:DriveWorks.ConnectionManager.GetOdbcConnection(System.String,System.String,System.String)">
      <summary>Gets an ODBC connection.</summary>
      <returns>An instance of the  class representing an open connection.</returns>
      <param name="databaseName">The DSN name to which to connect.</param>
      <param name="userName">The username to use for the connection.</param>
      <param name="password">The password to use for the connection.</param>
    </member>
    <member name="M:DriveWorks.ConnectionManager.GetSqlConnection(System.String,System.String,System.String)">
      <summary>Gets a SQL connection.</summary>
      <returns>An instance of the  class representing an open connection.</returns>
      <param name="connectionString">The connection string to use for connection.</param>
      <param name="userName">The username to use for the connection.</param>
      <param name="password">The password to use for the connection.</param>
    </member>
    <member name="M:DriveWorks.ConnectionManager.QueryData(System.String,System.String,System.String,System.String)">
      <summary>Performs a DriveWorks QueryData operation given an arbitrary SQL statement.</summary>
      <returns>The requested data.</returns>
      <param name="dsn">The data source name which identifies the ODBC or SQL connection to connect to.</param>
      <param name="sql">The SQL string to execute against the connection.</param>
      <param name="username">The username to use for the connection.</param>
      <param name="password">The password to use for the connection.</param>
    </member>
    <member name="M:DriveWorks.ConnectionManager.GetData(System.Boolean,System.String,System.String,System.String,System.String)">
      <summary>Performs a DriveWorks GetData operation given an arbitrary SQL statement.</summary>
      <returns>The requested data.</returns>
      <param name="isArray">True if the result is going to be used in an array rule, and therefore should be delimited by | characters, false if a single value is expected.</param>
      <param name="dsn">The data source name which identifies the ODBC connection to connect to.</param>
      <param name="userName">The username to use for the connection.</param>
      <param name="password">The password to use for the connection.</param>
      <param name="sql">The SQL string to execute against the connection.</param>
    </member>
    <member name="M:DriveWorks.ConnectionManager.GetData(System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String)">
      <summary>Performs a DriveWorks GetData operation given a table, result field, and where clause.</summary>
      <returns>The requested data.</returns>
      <param name="isArray">True if the result is going to be used in an array rule, and therefore should be delimited by | characters, false if a single value is expected.</param>
      <param name="dsn">The data source name which identifies the ODBC connection to connect to.</param>
      <param name="userName">The username to use for the connection.</param>
      <param name="password">The password to use for the connection.</param>
      <param name="tableName">The table from which to get data.</param>
      <param name="fieldName">The name of the field from which results should be retrieved.</param>
      <param name="whereClause">The where clause used to filter the results.</param>
    </member>
    <member name="M:DriveWorks.ConnectionManager.QueryDataValues(System.String,System.String,System.String,System.String)">
      <summary>Performs a DriveWorks QueryData operation given an arbitrary SQL statement.</summary>
      <param name="dsn">The data source name which identifies the ODBC or SQL connection to connect to.</param>
      <param name="sql">The SQL string to execute against the connection.</param>
      <param name="username">The username to use for the connection.</param>
      <param name="password">The password to use for the connection.</param>
    </member>
    <member name="M:DriveWorks.ConnectionManager.QueryDataValues(System.String,System.String,System.String,System.String,System.Boolean)">
      <summary>Performs a DriveWorks QueryData operation given an arbitrary SQL statement.</summary>
      <returns>The requested data.</returns>
      <param name="dsn">The data source name which identifies the ODBC or SQL connection to connect to.</param>
      <param name="sql">The SQL string to execute against the connection.</param>
      <param name="username">The username to use for the connection.</param>
      <param name="password">The password to use for the connection.</param>
      <param name="includeHeaders">A flag to indicate whether column headers should be included in the result.</param>
    </member>
    <member name="P:DriveWorks.ConnectionManager.IsDisabled">
      <summary>Gets or sets whether database connections are currently disabled. Note, changing the disabled state will not cause rules to be recalculated.</summary>
    </member>
    <member name="M:DriveWorks.ConstantEventArgs.#ctor(DriveWorks.ProjectConstant)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="constant">The constant that was changed.</param>
    </member>
    <member name="P:DriveWorks.ConstantEventArgs.Constant">
      <summary>Gets the constant that was changed.</summary>
    </member>
    <member name="M:DriveWorks.DataExportRowDefinition.AddField(System.String,System.String,System.String)">
      <summary>Adds a cell to the row.</summary>
      <param name="name">The name of the column that this cell is on.</param>
      <param name="formula">The rule for the cell.</param>
      <param name="comment">The comment for the rule.</param>
    </member>
    <member name="M:DriveWorks.DataExportRowDefinition.GetFields">
      <summary>Returns a dictionary of the fields that have been specified on this row.</summary>
    </member>
    <member name="M:DriveWorks.DataExportRowDefinition.RemoveField(System.String)">
      <summary>Removes a cell from the row.</summary>
      <param name="name">The name of the column that the cell is on.</param>
    </member>
    <member name="M:DriveWorks.DataTableEventArgs.#ctor(DriveWorks.ProjectDataTable)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="table">The table that was changed.</param>
    </member>
    <member name="P:DriveWorks.DataTableEventArgs.Table">
      <summary>Gets the table that was changed.</summary>
    </member>
    <member name="P:DriveWorks.DeferredTaskFailureDetails.Element">
      <summary>Gets the XML element with the failure information.</summary>
    </member>
    <member name="P:DriveWorks.DeferredTaskFailureDetails.FailDate">
      <summary>Gets the date that the failure occurred. This is in the format yyyy-MM-dd HH:mm:ss</summary>
    </member>
    <member name="P:DriveWorks.DeferredTaskFailureDetails.Message">
      <summary>Gets the message about the failure.</summary>
    </member>
    <member name="M:DriveWorks.DesignMasterReadOnlyException.#ctor">
      <summary>Initializes a new instance of the  class.</summary>
    </member>
    <member name="M:DriveWorks.DesignMasterReadOnlyException.#ctor(System.String)">
      <summary>Initializes a new instance of the  class with a specified error message.</summary>
      <param name="message">The message which describes the error.</param>
    </member>
    <member name="M:DriveWorks.DesignMasterReadOnlyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the  class with serialized data.</summary>
      <param name="info">The  that holds the serialized object data about the exception being thrown</param>
      <param name="context">The  that contains contextual information about the source or destination.</param>
    </member>
    <member name="P:DriveWorks.DialogUserMessage.Body">
      <summary>Gets the main content of the message for the user.</summary>
    </member>
    <member name="P:DriveWorks.DialogUserMessage.Buttons">
      <summary>Gets the available buttons that the user has to respond with.</summary>
    </member>
    <member name="P:DriveWorks.DialogUserMessage.DialogResult">
      <summary>Gets/sets the result that the user has specified.</summary>
    </member>
    <member name="P:DriveWorks.DialogUserMessage.Icon">
      <summary>Gets the icon style for the user message.</summary>
    </member>
    <member name="P:DriveWorks.DialogUserMessage.Title">
      <summary>Gets the title of the user message.</summary>
    </member>
    <member name="M:DriveWorks.DisposableProject.Dispose">
      <summary>Closes the project represented by the instance.</summary>
    </member>
    <member name="P:DriveWorks.DisposableProject.IsDisposed">
      <summary>Determines whether the project has already been disposed.</summary>
    </member>
    <member name="P:DriveWorks.DisposableProject.Project">
      <summary>Gets the project represented by the instance.</summary>
    </member>
    <member name="M:DriveWorks.DocumentEventArgs.#ctor(DriveWorks.ProjectDocument)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="document">The document that was changed.</param>
    </member>
    <member name="P:DriveWorks.DocumentEventArgs.Document">
      <summary>Gets the document that was changed.</summary>
    </member>
    <member name="M:DriveWorks.Email.GenerateTestEmail(DriveWorks.EmailDocumentDetails,System.Boolean)">
      <summary>Generates and sends a test email.</summary>
    </member>
    <member name="M:DriveWorks.Email.GetDetails">
      <summary>Gets all of the document information cached into an object that can be edited and commited to update this document.</summary>
    </member>
    <member name="M:DriveWorks.Email.GetResults">
      <summary>Calculates the email's rules and returns the results</summary>
    </member>
    <member name="P:DriveWorks.Email.AttachmentRule">
      <summary>The rule for the attachment segment of the email.</summary>
    </member>
    <member name="P:DriveWorks.Email.BccRule">
      <summary>The rule for the BCC segment of the email.</summary>
    </member>
    <member name="P:DriveWorks.Email.BodyText">
      <summary>Gets the body text with all rules visible.</summary>
    </member>
    <member name="P:DriveWorks.Email.CcRule">
      <summary>The rule for the CC segment of the email.</summary>
    </member>
    <member name="P:DriveWorks.Email.FinalBodyText">
      <summary>Gets body text with resolved formulae.</summary>
    </member>
    <member name="P:DriveWorks.Email.PreventOutlookNewlineRemoval">
      <summary>Prevent Outlook from automatically removing newlines in text emails.</summary>
    </member>
    <member name="P:DriveWorks.Email.ReceiverRule">
      <summary>The rule for the receiver segment of the email.</summary>
    </member>
    <member name="P:DriveWorks.Email.SendAsHTML">
      <summary>Gets/sets whether or not the email's body is HTML.</summary>
    </member>
    <member name="P:DriveWorks.Email.SenderRule">
      <summary>The rule for the sender segment of the email.</summary>
    </member>
    <member name="P:DriveWorks.Email.SubjectRule">
      <summary>The rule for the subject segment of the email.</summary>
    </member>
    <member name="P:DriveWorks.Email.TagsRule">
      <summary>The rule for a set of tags that are associated with this email.</summary>
    </member>
    <member name="M:DriveWorks.EmailDocumentDetails.#ctor(DriveWorks.Email)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="document">The email document to be based on.</param>
    </member>
    <member name="M:DriveWorks.EmailDocumentDetails.CommitChanges">
      <summary>Pushes changes to the original email document.</summary>
    </member>
    <member name="P:DriveWorks.EmailDocumentDetails.Attachments">
      <summary>The attachments of the email.</summary>
    </member>
    <member name="P:DriveWorks.EmailDocumentDetails.Bcc">
      <summary>The Bcc email addresses to recieve the email.</summary>
    </member>
    <member name="P:DriveWorks.EmailDocumentDetails.BodyText">
      <summary>The body text of the email.</summary>
    </member>
    <member name="P:DriveWorks.EmailDocumentDetails.Cc">
      <summary>The Cc email addresses to recieve the email.</summary>
    </member>
    <member name="P:DriveWorks.EmailDocumentDetails.IsBodyHtml">
      <summary>Whether or not the email will be sent as a HTML email.</summary>
    </member>
    <member name="P:DriveWorks.EmailDocumentDetails.OutlookNewlineRemoval">
      <summary>Whether or not outlook can remove new lines from the email.</summary>
    </member>
    <member name="P:DriveWorks.EmailDocumentDetails.Receiver">
      <summary>The email address of the receiver of the email.</summary>
    </member>
    <member name="P:DriveWorks.EmailDocumentDetails.Sender">
      <summary>The email address of the sender of the email.</summary>
    </member>
    <member name="P:DriveWorks.EmailDocumentDetails.Subject">
      <summary>The subject of the email.</summary>
    </member>
    <member name="P:DriveWorks.EmailDocumentDetails.Tags">
      <summary>The tags associated with the email.</summary>
    </member>
    <member name="P:DriveWorks.EmailResult.Attachments">
      <summary>Gets the email's attachment list.</summary>
    </member>
    <member name="P:DriveWorks.EmailResult.Bcc">
      <summary>Gets the email's blind carbon copy list.</summary>
    </member>
    <member name="P:DriveWorks.EmailResult.Cc">
      <summary>Gets the carbon copy list.</summary>
    </member>
    <member name="P:DriveWorks.EmailResult.Reciever">
      <summary>Gets the email's receiver.</summary>
    </member>
    <member name="P:DriveWorks.EmailResult.Sender">
      <summary>Gets the email's sender.</summary>
    </member>
    <member name="P:DriveWorks.EmailResult.Subject">
      <summary>Gets the email's subject.</summary>
    </member>
    <member name="P:DriveWorks.EmailResult.Tags">
      <summary>Gets the tags associated with this email.</summary>
    </member>
    <member name="M:DriveWorks.EnumerationInterruptedException.#ctor">
      <summary>Creates a new  object.</summary>
    </member>
    <member name="M:DriveWorks.EnumerationInterruptedException.#ctor(System.String)">
      <summary>Creates a new  object.</summary>
    </member>
    <member name="M:DriveWorks.EnumerationInterruptedException.#ctor(System.String,System.Exception)">
      <summary>Creates a new  object.</summary>
    </member>
    <member name="M:DriveWorks.ExcelDocument.ClearRanges">
      <summary>Removes all ranges from the list of ranges to be driven.</summary>
    </member>
    <member name="M:DriveWorks.ExcelDocument.GenerateCore(System.String,DriveWorks.Specification.RuleResults)">
      <summary>Generates a new driven Excel document.</summary>
      <param name="generateDirectory">Relative directory to place driven document.</param>
      <param name="results">Resolved rules.</param>
    </member>
    <member name="M:DriveWorks.ExcelDocument.GeneratePreviewCore(System.String,DriveWorks.Specification.RuleResults)">
      <summary>Generates a new driven Excel document.</summary>
      <param name="previewDirectory">Relative directory to place driven document.</param>
      <param name="results">Resolved rules.</param>
    </member>
    <member name="M:DriveWorks.ExcelDocument.GetRange(System.String)">
      <summary>Get the formula for a driven range name.</summary>
      <returns>The formula for the driven range, or nothing if it does not exist.</returns>
      <param name="name">Name of the driven range.</param>
    </member>
    <member name="M:DriveWorks.ExcelDocument.GetRangeNames">
      <summary>Gets a list of all the driven range names.</summary>
    </member>
    <member name="M:DriveWorks.ExcelDocument.GetRangeValues">
      <summary>Gets all resolved values for ranges.</summary>
      <returns>A dictionary where the key is the range name and the value is the resolved value.</returns>
    </member>
    <member name="M:DriveWorks.ExcelDocument.LoadRangesFromFile(System.Boolean)">
      <summary>Matches range information with ranges from file. Creates missing ranges and removes unused ones.</summary>
      <param name="overwrite">If the ranges from the file should overwrite the existing ones.</param>
    </member>
    <member name="M:DriveWorks.ExcelDocument.RangeExists(System.String)">
      <summary>Sees if a given range exists with a specific name.</summary>
      <param name="rangeName">Name of the range to find the existence of.</param>
    </member>
    <member name="M:DriveWorks.ExcelDocument.RemoveRange(System.String)">
      <summary>Removes a range from the list of ranges to be driven.</summary>
      <param name="name">Name of the range to be removed from the drive list.</param>
    </member>
    <member name="M:DriveWorks.ExcelDocument.SetRange(System.String,System.String)">
      <summary>Sets/adds ranges to be driven.</summary>
      <param name="name">Name of the range to be driven.</param>
      <param name="formula">Formula of the range.</param>
    </member>
    <member name="M:DriveWorks.ExcelDocument.SetRange(System.String,System.String,System.String)">
      <summary>Sets/adds ranges to be driven.</summary>
      <param name="name">Name of the range to be driven.</param>
      <param name="formula">Formula of the range.</param>
      <param name="comment">Comment of the range</param>
    </member>
    <member name="P:DriveWorks.ExcelDocument.CreateHtmlFile">
      <summary>Gets/sets if additional HTML file should be created during generation.</summary>
    </member>
    <member name="P:DriveWorks.ExcelDocument.CreatePdfFile">
      <summary>Gets/sets if the document should be exported to PDF after it is generated.</summary>
    </member>
    <member name="P:DriveWorks.ExcelDocument.HideHtmlFile">
      <summary>Gets/sets if generated HTML files should be hidden from the specification's documents list.</summary>
    </member>
    <member name="P:DriveWorks.ExcelDocument.HidePdfFile">
      <summary>Gets/sets if generated PDF files should be hidden from the specification's documents list.</summary>
    </member>
    <member name="M:DriveWorks.FileCopyingEventArgs.#ctor(System.String,System.String)">
      <summary>Creates a new instance of the  class.</summary>
      <param name="sourcePath">The fully-qualified path to the source file.</param>
      <param name="targetPath">The fully-qualified destination path the file will be copied to.</param>
    </member>
    <member name="P:DriveWorks.FileCopyingEventArgs.FileCopied">
      <summary>Gets/sets whether the file has been copied or not.</summary>
    </member>
    <member name="P:DriveWorks.FileCopyingEventArgs.OverWrite">
      <summary>Gets whether the target file should be overwritten if it exists.</summary>
    </member>
    <member name="P:DriveWorks.FileCopyingEventArgs.SourcePath">
      <summary>Gets the path to the source file that should be copied.</summary>
    </member>
    <member name="P:DriveWorks.FileCopyingEventArgs.TargetPath">
      <summary>Gets the path the source file should be copied to.</summary>
    </member>
    <member name="P:DriveWorks.FileDocumentBase.DocumentNameRule">
      <summary>Gets/sets the name of the output file</summary>
    </member>
    <member name="P:DriveWorks.FileDocumentBase.DocumentNameValue">
      <summary>Gives the resolved name that this document will have.</summary>
    </member>
    <member name="P:DriveWorks.FileDocumentBase.DocumentPathRule">
      <summary>Gets the rule which calculates the relative path for the document.</summary>
    </member>
    <member name="P:DriveWorks.FileDocumentBase.DocumentPathValue">
      <summary>Gets the resolved path offset that this document will have</summary>
    </member>
    <member name="P:DriveWorks.FileDocumentBase.IsHidden">
      <summary>Property to determine if the generated document is hidden from the end-user view.</summary>
    </member>
    <member name="P:DriveWorks.FileDocumentBase.SourceFilePath">
      <summary>Gets/sets the path to the master file. This is often a relative path.</summary>
    </member>
    <member name="P:DriveWorks.FunctionInformation.ArgumentDescriptions">
      <summary>A collection of argument descriptions for the function, in the order that they are used.</summary>
    </member>
    <member name="P:DriveWorks.FunctionInformation.ArgumentNames">
      <summary>A collection of argument names for the function, in the order that they are used.</summary>
    </member>
    <member name="P:DriveWorks.FunctionInformation.ArgumentTypes">
      <summary>A collection of argument types for the function, in the order that they are used.</summary>
    </member>
    <member name="P:DriveWorks.FunctionInformation.Attributes">
      <summary>Flags specified for this function.</summary>
    </member>
    <member name="P:DriveWorks.FunctionInformation.FunctionCategory">
      <summary>Category that the function belongs to.</summary>
    </member>
    <member name="P:DriveWorks.FunctionInformation.FunctionDescription">
      <summary>A short description of what the function does (to help users in UI).</summary>
    </member>
    <member name="P:DriveWorks.FunctionInformation.FunctionLocalizedName">
      <summary>The localized name, as will be see in UI etc.</summary>
    </member>
    <member name="P:DriveWorks.FunctionInformation.FunctionName">
      <summary>Gets the name of the function as it will be used in rules.</summary>
    </member>
    <member name="P:DriveWorks.FunctionInformation.HasParameterArray">
      <summary>Whether or not the function can accept any number of arguments.</summary>
    </member>
    <member name="P:DriveWorks.FunctionInformation.IsDeprecated">
      <summary>Whether or not the function should be used or not any more.</summary>
    </member>
    <member name="M:DriveWorks.GeneralGroupSettings.#ctor(DriveWorks.Group)">
      <summary>Creates an instance of the  class.</summary>
      <param name="group">The group whose settings will be accessed.</param>
    </member>
    <member name="M:DriveWorks.GeneralGroupSettings.GetDocumentGenerationBehaviourOptions">
      <summary>Gets the available options for document generation.</summary>
    </member>
    <member name="P:DriveWorks.GeneralGroupSettings.DocumentGenerationBehavior">
      <summary>Gets/sets when documents will be generated.</summary>
    </member>
    <member name="P:DriveWorks.GeneralGroupSettings.HideReportsFromNonAdmins">
      <summary>Gets/sets whether reports should be hidden from non-adminstrators.</summary>
    </member>
    <member name="P:DriveWorks.GeneralGroupSettings.ReleaseToAutoPilot">
      <summary>Get/sets whether specifications will be released to Autopilot.</summary>
    </member>
    <member name="P:DriveWorks.GeneralGroupSettings.ShowDisplayFiles">
      <summary>Gets/sets whether or not to hide hidden documents.</summary>
    </member>
    <member name="E:DriveWorks.GeneralGroupSettings.DocumentGenerationBehaviorGroupSettingChanged">
      <summary>Raised when the  event has been fired for the Document Generation Behavior setting.</summary>
    </member>
    <member name="E:DriveWorks.GeneralGroupSettings.HideReportsFromNonAdminsGroupSettingChanged">
      <summary>Raised when the  event has been fired for the Hide Reports from Non-Administrators setting.</summary>
    </member>
    <member name="E:DriveWorks.GeneralGroupSettings.ReleaseToAutopilotGroupSettingChanged">
      <summary>Raised when the  event has been fired for the Release To Autopilot setting.</summary>
    </member>
    <member name="E:DriveWorks.GeneralGroupSettings.ShowDisplayFilesGroupSettingChanged">
      <summary>Raised when the  event has been fired for the Show Display Files setting.</summary>
    </member>
    <member name="M:DriveWorks.Group.AddAgentLogEntry(System.String,System.String,System.String,System.String,System.String,System.Int32)">
      <summary>Adds an agent log entry.</summary>
      <param name="agentName">The name of the agent who the log entry originates from.</param>
      <param name="dateAndTime">The date and time of the event.</param>
      <param name="sourceDisplayName">The display name of the source of the event.</param>
      <param name="targetDisplayName">The display name of the target of the event.</param>
      <param name="description">The description of the event.</param>
    </member>
    <member name="M:DriveWorks.Group.DeleteSetting(System.String)">
      <summary>Deletes the named setting from the group.</summary>
      <param name="name">The name of the setting to delete.</param>
    </member>
    <member name="M:DriveWorks.Group.GetAgentLog(System.String)">
      <summary>Gets the agent message log of an agent.</summary>
      <param name="agentName">The name of the agent whose message log is to be returned.</param>
    </member>
    <member name="M:DriveWorks.Group.GetAgents">
      <summary>Gets a list of generated agents in the group.</summary>
    </member>
    <member name="M:DriveWorks.Group.GetAllJobs(System.String)">
      <summary>Gets all pending and currently in progress jobs that the current user has access to, for the specified job type.</summary>
      <returns>All pending and currently in progress jobs for the specified job type.</returns>
      <param name="jobType">The type of jobs to retrieve.</param>
    </member>
    <member name="M:DriveWorks.Group.GetGroupSetting(System.String)">
      <summary>Gets the named setting from the group.</summary>
      <returns>The string value of the setting that was retrieved, or a null reference (Nothing in Visual Basic) if the setting was not present.</returns>
      <param name="name">The name of the setting to retrieve.</param>
    </member>
    <member name="M:DriveWorks.Group.RefreshSecurity">
      <summary>Refreshes cached security information.</summary>
    </member>
    <member name="M:DriveWorks.Group.RegisterJobQueue(System.String)">
      <summary>Registers a queue of jobs within DriveWorks that need to be processed.</summary>
      <param name="jobType">The type of job that the queue will process.</param>
    </member>
    <member name="M:DriveWorks.Group.SendAgentNotification(System.String,System.Object)">
      <summary>Attempts to send a notification message to the specified agent.</summary>
      <param name="agentName">Name of the agent to send the message to</param>
      <param name="message">The notification to send to the agent. Object type MUST be marked with .</param>
    </member>
    <member name="M:DriveWorks.Group.SendAgentRequest(System.String,System.Object)">
      <summary>Attempts to send a request message to the specified agent. Then waits for a reply and returns that result.</summary>
      <returns>The reply value from the agent.</returns>
      <param name="agentName">The name of the agent to send the request message to.</param>
      <param name="message">The request to send to the specified agent. Object type MUST be marked with .</param>
    </member>
    <member name="M:DriveWorks.Group.StartAgent(System.String)">
      <summary>Starts an agent.</summary>
      <param name="agentName">The name of the agent to be started.</param>
    </member>
    <member name="M:DriveWorks.Group.StopAgent(System.String)">
      <summary>Stops an agent.</summary>
      <param name="agentName">The name of the agent to be stopped.</param>
    </member>
    <member name="M:DriveWorks.Group.GetGroupSettingAsBoolean(System.String,System.Boolean)">
      <summary>Gets the named setting from the group.</summary>
      <param name="name">The name of the setting to retrieve.</param>
      <param name="defaultValue">The value to return if the setting isn't present.</param>
    </member>
    <member name="M:DriveWorks.Group.GetGroupSettingAsBoolean(System.String)">
      <summary>Gets the named setting from the group.</summary>
      <returns>The boolean value of the setting that was retrieved, or a null reference (Nothing in Visual Basic) if the setting was not present.</returns>
      <param name="name">The name of the setting to retrieve.</param>
    </member>
    <member name="M:DriveWorks.Group.SetGroupSetting(System.String,System.String)">
      <summary>Saves the named setting to the group.</summary>
      <param name="name">The name of the setting.</param>
      <param name="value">The value of the setting.</param>
    </member>
    <member name="M:DriveWorks.Group.SetGroupSetting(System.String,System.Boolean)">
      <summary>Saves the named setting to the group.</summary>
      <param name="name">The name of the setting.</param>
      <param name="value">The value of the setting.</param>
    </member>
    <member name="P:DriveWorks.Group.CanEditAllSpecifications">
      <summary>Gets if the current user has permission to view and edit all specifications.</summary>
    </member>
    <member name="P:DriveWorks.Group.CanEditCompletedSpecifications">
      <summary>Gets/sets whether completed specifications in the standard specification flow can be edited.</summary>
    </member>
    <member name="P:DriveWorks.Group.CanEditGroupSecurity">
      <summary>Gets if the current user has permission to edit group security details.</summary>
    </member>
    <member name="P:DriveWorks.Group.CapturedComponents">
      <summary>Gets an instance of the  type which is responsible for managing the captured component information in the group.</summary>
    </member>
    <member name="P:DriveWorks.Group.ConnectionString">
      <summary>Gets the connection string which was used to open the group.</summary>
    </member>
    <member name="P:DriveWorks.Group.Connectors">
      <summary>Gets an instance of  for this group.</summary>
    </member>
    <member name="P:DriveWorks.Group.CurrentUser">
      <summary>Gets the logged-on user.</summary>
    </member>
    <member name="P:DriveWorks.Group.CurrentUserCredentials">
      <summary>Gets the credentials that were used to log on to the group.</summary>
    </member>
    <member name="P:DriveWorks.Group.CurrentUserIsAllowedCapture">
      <summary>Gets whether the logged-on user belongs to at least one team with permission to capture.</summary>
    </member>
    <member name="P:DriveWorks.Group.CurrentUserTeams">
      <summary>Gets the teams to which the logged-on user belongs.</summary>
    </member>
    <member name="P:DriveWorks.Group.DataTables">
      <summary>Gets an instance of  for this group.</summary>
    </member>
    <member name="P:DriveWorks.Group.DefaultSpecificationFolder">
      <summary>Gets/sets the default specification folder.</summary>
    </member>
    <member name="P:DriveWorks.Group.GroupContentFolder">
      <summary>Gets/sets the group content folder.</summary>
    </member>
    <member name="P:DriveWorks.Group.IsClosed">
      <summary>Determines whether the group has been closed.</summary>
      <returns>True if the group is closed, otherwise false.</returns>
    </member>
    <member name="P:DriveWorks.Group.IsOpen">
      <summary>Determines whether the group is open.</summary>
      <returns>True if the group is open, otherwise false.</returns>
    </member>
    <member name="P:DriveWorks.Group.Name">
      <summary>Gets the name of the Group.</summary>
    </member>
    <member name="P:DriveWorks.Group.OverwriteReleasedComponentData">
      <summary>Gets/sets whether released component data gets overwritten or used-as is.</summary>
    </member>
    <member name="P:DriveWorks.Group.Projects">
      <summary>Gets an instance of the  type which is responsible for managing the project information in the group.</summary>
    </member>
    <member name="P:DriveWorks.Group.ReleasedComponents">
      <summary>Gets an instance of the  which is responsible for managing the released component information in the group.</summary>
    </member>
    <member name="P:DriveWorks.Group.Reports">
      <summary>Gets an instance of the  type which is responsible for managing the reports in the group.</summary>
    </member>
    <member name="P:DriveWorks.Group.RuleVersionHistory">
      <summary>Gets an instance of the  type which is responsible for managing the rule revisions in the group.</summary>
    </member>
    <member name="P:DriveWorks.Group.Security">
      <summary>Gets an instance of the  type which is responsible for managing the security information in the group.</summary>
    </member>
    <member name="P:DriveWorks.Group.Specifications">
      <summary>Gets an instance of the  type which is responsible for managing the specifications in the group.</summary>
    </member>
    <member name="E:DriveWorks.Group.AgentNotificationReceived">
      <summary>Raised when a notification is received from another session.</summary>
    </member>
    <member name="E:DriveWorks.Group.AgentRequestReceived">
      <summary>Raised when a request is received from another session.</summary>
    </member>
    <member name="E:DriveWorks.Group.SettingChanged">
      <summary>Raised when a setting is changed.</summary>
    </member>
    <member name="M:DriveWorks.GroupCapturedComponents.CreateImportManager">
      <summary>Creates and returns a new capture import manager which can be used to import components from another source.</summary>
      <returns>An instance of a capture import manager.</returns>
    </member>
    <member name="M:DriveWorks.GroupCapturedComponents.DeleteComponent(System.Guid)">
      <summary>Uncaptures the specified component.</summary>
      <param name="componentId">The unique identifier of the component to delete.</param>
    </member>
    <member name="M:DriveWorks.GroupCapturedComponents.IsCaptured(System.String)">
      <summary>Determines whether the specified file is registered as a captured component in the group.</summary>
      <returns>True if the component is captured, otherwise false.</returns>
      <param name="fileName">The fully-qualified path to the component file.</param>
    </member>
    <member name="M:DriveWorks.GroupCapturedComponents.RemapComponents(System.String,System.String)">
      <summary>Attempts to change all captured components and their references that match <paramref name="oldBasePath" /> to use the new base path in <paramref name="newBasePath" />.</summary>
      <returns>A mapping of all old paths to new paths.</returns>
      <param name="oldBasePath">The base path from which all changes must match.</param>
      <param name="newBasePath">The new base path to give all matching components.</param>
    </member>
    <member name="M:DriveWorks.GroupCapturedComponents.SaveComponent(DriveWorks.Components.CapturedComponent)">
      <summary>Saves a new or existing component to the group.</summary>
      <param name="component">The component to save to the group.</param>
    </member>
    <member name="M:DriveWorks.GroupCapturedComponents.ChangeComponentPath(System.String,System.String)">
      <summary>Updates the path of the specified component.</summary>
      <returns>True if the component was successfully rereferenced.</returns>
      <param name="originalComponentPath">The original path to the component to update.</param>
      <param name="updatedComponentPath">The new path to the component.</param>
    </member>
    <member name="M:DriveWorks.GroupCapturedComponents.ChangeComponentPath(System.Guid,System.String)">
      <summary>Updates the path of the specified component.</summary>
      <returns>True if the component was successfully rereferenced.</returns>
      <param name="originalComponentId">The unique identifier of the component to update.</param>
      <param name="updatedComponentPath">The new path to the component.</param>
    </member>
    <member name="M:DriveWorks.GroupCapturedComponents.CreateComponent``1(System.String)">
      <summary>Creates and returns a new component of the specified type without registering it with the group.</summary>
      <returns>A new component of the specified type.</returns>
      <typeparam name="T">The type of component to create.</typeparam>
      <param name="path">The path to the file represented by the component.</param>
    </member>
    <member name="M:DriveWorks.GroupCapturedComponents.CreateComponent(System.Type,System.String)">
      <summary>Creates and returns a new component of the specified type without registering it with the group.</summary>
      <returns>An instance of type derived from  which represents a component of the specified type</returns>
      <param name="type">The type of component to create.</param>
      <param name="path">The path to the file represented by the component.</param>
    </member>
    <member name="M:DriveWorks.GroupCapturedComponents.GetComponent(System.Guid)">
      <summary>Gets the captured component with the specified identifier.</summary>
      <exception caption="" cref="T:System.NotSupportedException">The component type is not supported.</exception>
      <returns>The component with the specified identifier if it is registered, otherwise a null reference.</returns>
      <param name="componentId">The unique identifier of the component.</param>
    </member>
    <member name="M:DriveWorks.GroupCapturedComponents.GetComponent(System.String)">
      <summary>Gets the captured component with the specified file path.</summary>
      <exception caption="" cref="T:System.NotSupportedException">The component type is not supported.</exception>
      <returns>The component with the specified file path if it is registered, otherwise a null reference.</returns>
      <param name="componentPath">The fully qualified file path to the component.</param>
    </member>
    <member name="M:DriveWorks.GroupCapturedComponents.GetComponents">
      <summary>Gets information about all of the captured components in the group.</summary>
      <returns>An array containing one instance of the  class for each captured component.</returns>
    </member>
    <member name="M:DriveWorks.GroupCapturedComponents.GetComponents(System.Boolean)">
      <summary>Gets information about all of the captured components in the group.</summary>
      <returns>An array containing one instance of the  class for each captured component.</returns>
      <param name="includeDeletedComponents">True to include components which have been deleted in the results.</param>
    </member>
    <member name="M:DriveWorks.GroupCapturedComponents.GetStatus(System.Guid)">
      <summary>Gets the status of a component in the group.</summary>
      <param name="componentId">The component identifier for which to get details.</param>
    </member>
    <member name="M:DriveWorks.GroupCapturedComponents.GetStatus(System.String)">
      <summary>Gets the status of a component in the group.</summary>
      <param name="componentPath">The component path for which to get details.</param>
    </member>
    <member name="M:DriveWorks.GroupConnectionException.#ctor">
      <summary>Creates an instance of the  class.</summary>
    </member>
    <member name="M:DriveWorks.GroupConnectionException.#ctor(System.String)">
      <summary>Creates an instance of the  class.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:DriveWorks.GroupConnectionException.#ctor(System.String,System.Exception)">
      <summary>Creates an instance of the  class.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">The inner exception.</param>
    </member>
    <member name="M:DriveWorks.GroupConnectionStringBuilder.#ctor">
      <summary>Creates a new instance of the  class.</summary>
    </member>
    <member name="M:DriveWorks.GroupConnectionStringBuilder.#ctor(System.String)">
      <summary>Creates a new instance of the  class.</summary>
      <param name="connectionString">Group connection string to parse parameters from.</param>
    </member>
    <member name="M:DriveWorks.GroupConnectionStringBuilder.GetConnectionString">
      <summary>Gets a group connection string based on the current property values.</summary>
      <exception caption="" cref="T:System.InvalidOperationException">Throw when there are invalid values in properties.</exception>
    </member>
    <member name="P:DriveWorks.GroupConnectionStringBuilder.Create">
      <summary>Gets and sets whether or not to create the target group, if it doesn't exist.</summary>
    </member>
    <member name="P:DriveWorks.GroupConnectionStringBuilder.GroupName">
      <summary>Gets and sets the target group's name - this is only required for shared groups.</summary>
    </member>
    <member name="P:DriveWorks.GroupConnectionStringBuilder.Path">
      <summary>Gets and sets the path of target individual group.</summary>
    </member>
    <member name="P:DriveWorks.GroupConnectionStringBuilder.Provider">
      <summary>Gets and sets the provider type of the target group.</summary>
    </member>
    <member name="P:DriveWorks.GroupConnectionStringBuilder.Server">
      <summary>Gets and sets the server address of the target group - this is only required for shared groups.</summary>
    </member>
    <member name="P:DriveWorks.GroupConnectionStringBuilder.TakeOwnership">
      <summary>Gets and sets whether or not to take ownership of the group, if it's owned by another machine.</summary>
    </member>
    <member name="M:DriveWorks.GroupConnectorInformation.EnsureDataStored">
      <summary>Called to stores all current information to the  property.</summary>
    </member>
    <member name="M:DriveWorks.GroupConnectorInformation.GetClone">
      <summary>Creates a cloned version of this object.</summary>
    </member>
    <member name="M:DriveWorks.GroupConnectorInformation.OnInitialized">
      <summary>Called when basic information and data has been updated or set.</summary>
    </member>
    <member name="P:DriveWorks.GroupConnectorInformation.Data">
      <summary>Gets/sets Value used by connector containing configuration information.</summary>
    </member>
    <member name="P:DriveWorks.GroupConnectorInformation.EnabledMachineNames">
      <summary>Get/sets A pipe bar delimited list of machine names that have the connector enabled.</summary>
    </member>
    <member name="P:DriveWorks.GroupConnectorInformation.Id">
      <summary>Gets the identifier value for the connector.</summary>
    </member>
    <member name="P:DriveWorks.GroupConnectorInformation.Name">
      <summary>Gets/sets the unique name for the connector.</summary>
    </member>
    <member name="M:DriveWorks.GroupConnectors.AddConnector(System.String,System.Type)">
      <summary>Adds a connector of the specified type to the group.</summary>
      <returns>The created connector.</returns>
      <param name="name">The name to give the new connector.</param>
      <param name="connectorDataType">The type of the connector's data storage class.</param>
    </member>
    <member name="M:DriveWorks.GroupConnectors.GetConnectors">
      <summary>Gets all connectors within the group.</summary>
    </member>
    <member name="M:DriveWorks.GroupConnectors.Remove(DriveWorks.GroupConnectorInformation)">
      <summary>Removes the specified connector from the group.</summary>
      <returns>True if the specified connector was removed.</returns>
      <param name="connector">The connector to remove.</param>
    </member>
    <member name="M:DriveWorks.GroupConnectors.TryGetConnector(System.String,DriveWorks.GroupConnectorInformation@)">
      <summary>Attempts to find a connector with the specified name.</summary>
      <returns>True if the connector was found.</returns>
      <param name="connectorName">The name of the connector to find.</param>
      <param name="connector">Reference to set to the found connector, if it's found.</param>
    </member>
    <member name="M:DriveWorks.GroupConnectors.Store(DriveWorks.GroupConnectorInformation)">
      <summary>Adds or updates the specified details to the group.</summary>
      <param name="connector">The details to update.</param>
    </member>
    <member name="M:DriveWorks.GroupConnectors.Store(DriveWorks.GroupConnectorInformation,System.Boolean)">
      <summary>Adds or updates the specified details to the group, optionally updating an existing connector of the same name as the provided.</summary>
      <param name="connector">The details to update.</param>
      <param name="ignoreIdMismatch">Decides whether or not existing connectors with the same name as the provided are updated.</param>
    </member>
    <member name="M:DriveWorks.GroupDataTable.EnsureTableDataIsLatest">
      <summary>Will fetch the latest version of table data, if version is out of sync.</summary>
    </member>
    <member name="M:DriveWorks.GroupDataTable.GetColumns">
      <summary>Gets all columns present in this table.</summary>
    </member>
    <member name="M:DriveWorks.GroupDataTable.GetTableData">
      <summary>Gets the data for this table.</summary>
    </member>
    <member name="M:DriveWorks.GroupDataTable.OnDeleted">
      <summary>Called before the table is about to be deleted.</summary>
    </member>
    <member name="M:DriveWorks.GroupDataTable.OnMetaDataChanged">
      <summary>Called whenever the data property changes.</summary>
    </member>
    <member name="M:DriveWorks.GroupDataTable.RaiseTableDataChanged">
      <summary>Raises the  event.</summary>
    </member>
    <member name="M:DriveWorks.GroupDataTable.SetRows(System.String[0:,0:],System.String)">
      <summary>Updates rows of this table with the specified data based on control column names.</summary>
      <param name="dataToWrite">The data used to update the table.</param>
      <param name="controlColumnNames">The name of the control columns used to identify which rows to update.</param>
    </member>
    <member name="M:DriveWorks.GroupDataTable.SetTableData(System.Object[0:,0:])">
      <summary>Sets the data of this table to the specified data.</summary>
      <param name="tableData">The data to set this table to.</param>
    </member>
    <member name="M:DriveWorks.GroupDataTable.Delete">
      <summary>Removes the table from the group.</summary>
    </member>
    <member name="M:DriveWorks.GroupDataTable.Initialize">
      <summary>Called after table has been constructed and is ready for initialization.</summary>
    </member>
    <member name="P:DriveWorks.GroupDataTable.Id">
      <summary>Gets the unique identifier for this table.</summary>
    </member>
    <member name="P:DriveWorks.GroupDataTable.IsDirty">
      <summary>Gets if the cache table data is not the latest version.</summary>
    </member>
    <member name="P:DriveWorks.GroupDataTable.MetaData">
      <summary>The stored data for this table.</summary>
    </member>
    <member name="P:DriveWorks.GroupDataTable.Name">
      <summary>Gets the display name for this table.</summary>
    </member>
    <member name="E:DriveWorks.GroupDataTable.Deleted">
      <summary>Raised when this table is deleted.</summary>
    </member>
    <member name="E:DriveWorks.GroupDataTable.NameChanged">
      <summary>Raised when the name of this table changes.</summary>
    </member>
    <member name="E:DriveWorks.GroupDataTable.TableDataChanged">
      <summary>Raised when the data in this table changes.</summary>
    </member>
    <member name="M:DriveWorks.GroupDataTables.TryGetTable(System.String,DriveWorks.GroupDataTable@)">
      <summary>Attempts to find a table with the specified name.</summary>
      <returns>True if the table was found.</returns>
      <param name="tableName">The name of the table to find.</param>
      <param name="table">Reference to set to the found table, if it's found.</param>
    </member>
    <member name="M:DriveWorks.GroupDataTables.AddTable``1(System.String)">
      <summary>Adds a table of the specified type to the group.</summary>
      <returns>The created table.</returns>
      <typeparam name="TTableType">The type of table to create.</typeparam>
      <param name="name">The name to give the new table.</param>
    </member>
    <member name="M:DriveWorks.GroupDataTables.AddTable(System.Type,System.String)">
      <summary>Adds a table of the specified type to the group.</summary>
      <returns>The created table.</returns>
      <param name="tableType">The type of table to create.</param>
      <param name="name">The name to give the new table.</param>
    </member>
    <member name="E:DriveWorks.GroupDataTables.TableAdded">
      <summary>Raised when a new table is added to the group.</summary>
    </member>
    <member name="E:DriveWorks.GroupDataTables.TableDeleted">
      <summary>Raised when a table is removed from the group.</summary>
    </member>
    <member name="M:DriveWorks.GroupEditionException.#ctor">
      <summary>Creates an instance of the  class.</summary>
    </member>
    <member name="M:DriveWorks.GroupEditionException.#ctor(System.String)">
      <summary>Creates an instance of the  class.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:DriveWorks.GroupEditionException.#ctor(System.String,System.Exception)">
      <summary>Creates an instance of the  class.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">The inner exception.</param>
    </member>
    <member name="M:DriveWorks.GroupException.#ctor">
      <summary>Creates an instance of the  class.</summary>
    </member>
    <member name="M:DriveWorks.GroupException.#ctor(System.String)">
      <summary>Creates an instance of the  class.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:DriveWorks.GroupException.#ctor(System.String,System.Exception)">
      <summary>Creates an instance of the  class.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">The inner exception.</param>
    </member>
    <member name="M:DriveWorks.GroupExistsException.#ctor">
      <summary>Creates an instance of the  class.</summary>
    </member>
    <member name="M:DriveWorks.GroupExistsException.#ctor(System.String)">
      <summary>Creates an instance of the  class.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:DriveWorks.GroupExistsException.#ctor(System.String,System.Exception)">
      <summary>Creates an instance of the  class.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">The inner exception.</param>
    </member>
    <member name="M:DriveWorks.GroupNotFoundException.#ctor">
      <summary>Creates an instance of the  class.</summary>
    </member>
    <member name="M:DriveWorks.GroupNotFoundException.#ctor(System.String)">
      <summary>Creates an instance of the  class.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:DriveWorks.GroupNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Creates an instance of the  class.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">The inner exception.</param>
    </member>
    <member name="M:DriveWorks.GroupProjects.DeleteProjectById(System.Guid)">
      <summary>Deletes an existing project using it's Id.</summary>
      <returns>True if the project was found and deleted, otherwise false.</returns>
      <param name="projectId">The identifier which uniquely identifies the project to delete.</param>
    </member>
    <member name="M:DriveWorks.GroupProjects.DeleteProjectByName(System.String)">
      <summary>Deletes an existing project using it's name.</summary>
      <returns>True if successfully deleted.</returns>
      <param name="name">Name of the project to delete.</param>
    </member>
    <member name="M:DriveWorks.GroupProjects.TryUpdateProject(DriveWorks.ProjectDetails)">
      <summary>Updates a project's registration details.</summary>
      <returns>True if the project was successfully found and updated, otherwise false.</returns>
      <param name="projectDetails">The updated registration details for the project.</param>
    </member>
    <member name="M:DriveWorks.GroupProjects.UpdateProject(DriveWorks.ProjectDetails)">
      <summary>Updates a project's registration details.</summary>
      <exception caption="" cref="T:DriveWorks.ItemNotFoundException">Thrown if the specified project could not be found.</exception>
      <param name="projectDetails">The updated registration details for the project.</param>
    </member>
    <member name="M:DriveWorks.GroupProjects.GetProject(System.String)">
      <summary>Gets the specified project's details.</summary>
      <exception caption="" cref="T:DriveWorks.ItemNotFoundException">Thrown if the specified project could not be found.</exception>
      <returns>The project details.</returns>
      <param name="projectName">The name of the project to retrieve.</param>
    </member>
    <member name="M:DriveWorks.GroupProjects.GetProject(System.Guid)">
      <summary>Gets the specified project's details.</summary>
      <exception caption="" cref="T:DriveWorks.ItemNotFoundException">Thrown if the specified project could not be found.</exception>
      <returns>The project details.</returns>
      <param name="projectId">The unique identifier of the project to retrieve.</param>
    </member>
    <member name="M:DriveWorks.GroupProjects.GetProjects">
      <summary>Gets all registered projects whether or not the logged-on user has access.</summary>
    </member>
    <member name="M:DriveWorks.GroupProjects.GetProjects(System.Guid)">
      <summary>Gets all registered projects on which the logged-on user holds the specified permission.</summary>
      <param name="permissionId">The permission to check for, generally one of the values from .</param>
    </member>
    <member name="M:DriveWorks.GroupProjects.RegisterProject(System.String,System.Boolean,System.Boolean)">
      <summary>Registers a new project.</summary>
      <returns>An instance of the  type representing the newly registered project.</returns>
      <param name="projectPath">The path to the project file.</param>
      <param name="hidden">True if the project is hidden, see  for more information.</param>
      <param name="deployed">True if the project is deployed, see  for more information.</param>
    </member>
    <member name="M:DriveWorks.GroupProjects.TryGetProject(System.String,DriveWorks.ProjectDetails@)">
      <summary>Gets the specified project's details.</summary>
      <returns>True if the project was found and returned, otherwise false.</returns>
      <param name="projectName">The name of the project to retrieve.</param>
      <param name="projectDetails">A reference to a variable which will receive the project details.</param>
    </member>
    <member name="M:DriveWorks.GroupProjects.TryGetProject(System.Guid,DriveWorks.ProjectDetails@)">
      <summary>Gets the specified project's details.</summary>
      <returns>True if the project was found and returned, otherwise false.</returns>
      <param name="projectId">The unique identifier of the project to retrieve.</param>
      <param name="projectDetails">A reference to a variable which will receive the project details.</param>
    </member>
    <member name="M:DriveWorks.GroupReleasedComponents.CreateReportWriter(System.Guid,System.String,DriveWorks.Reporting.ReportingLevel)">
      <summary>Creates a new report writer which will write a report for the given component.</summary>
      <returns>A report writer.</returns>
      <param name="componentId">The identifier of the component for which to write the report.</param>
      <param name="title">The title of the report.</param>
      <param name="level">The maximum entry level to write to the report.</param>
    </member>
    <member name="M:DriveWorks.GroupReleasedComponents.DeleteFileReferenceByTargetPath(System.String)">
      <summary>Deletes a released component and references to it from the group.</summary>
      <param name="componentTargetPath">The full path to the released component to delete.</param>
    </member>
    <member name="M:DriveWorks.GroupReleasedComponents.DeleteReleasedComponentReport(System.Guid)">
      <summary>Deletes the specified component report.</summary>
      <returns>True if the report was deleted successfully.</returns>
      <param name="reportId">The component report to delete.</param>
    </member>
    <member name="M:DriveWorks.GroupReleasedComponents.DeleteReleasedComponentReports(System.Guid)">
      <summary>Deletes all component reports for the specified component.</summary>
      <returns>True if all reports were deleted successfully.</returns>
      <param name="componentId">The Id of the component for which all of its reports should be deleted.</param>
    </member>
    <member name="M:DriveWorks.GroupReleasedComponents.GetComponent(System.Guid)">
      <summary>Gets the released component with the specified identifier.</summary>
      <exception caption="" cref="T:System.NotSupportedException">The component type is not supported.</exception>
      <returns>The component with the specified identifier if it is registered, otherwise a null reference.</returns>
      <param name="componentId">The unique identifier of the component.</param>
    </member>
    <member name="M:DriveWorks.GroupReleasedComponents.GetComponentDetailsById(System.Guid,System.Boolean)">
      <summary>Get's the component details for a component with the specified identifier.</summary>
      <exception caption="" cref="T:DriveWorks.ItemNotFoundException">No component could be found with the specified path.</exception>
      <returns>The component's details.</returns>
      <param name="componentId">The unique identifier of the component.</param>
      <param name="throwIfMissing">Throws an exception if a component with the specified identiifer cannot be found, if false, a null reference is returned if the component isn't found.</param>
    </member>
    <member name="M:DriveWorks.GroupReleasedComponents.GetComponentDetailsByName(System.String,System.String,System.Boolean)">
      <summary>Get's the component details for a component with the specified name.</summary>
      <exception caption="" cref="T:DriveWorks.ItemNotFoundException">No component could be found with the specified name and type.</exception>
      <returns>The component's details.</returns>
      <param name="name">The name of the component for which to get the details.</param>
      <param name="type">The type of the component for which to get the details.</param>
      <param name="throwIfMissing">Throws an exception if a component with the specified name and type cannot be found, if false, a null reference is returned if the component isn't found.</param>
    </member>
    <member name="M:DriveWorks.GroupReleasedComponents.GetComponentDetailsByPath(System.String,System.Boolean)">
      <summary>Get's the component details for a component with the specified path.</summary>
      <exception caption="" cref="T:DriveWorks.ItemNotFoundException">No component could be found with the specified path.</exception>
      <returns>The component's details.</returns>
      <param name="path">The full path to the component for which to get the details.</param>
      <param name="throwIfMissing">Throws an exception if a component with the specified path cannot be found, if false, a null reference is returned if the component isn't found.</param>
    </member>
    <member name="M:DriveWorks.GroupReleasedComponents.GetComponentReferences(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>Gets an object which will enumerate the released component references in the group.</summary>
    </member>
    <member name="M:DriveWorks.GroupReleasedComponents.GetComponentReferenceTree(System.Guid[])">
      <summary>Gets hierarchical reference information about the components with the given identifiers.</summary>
      <returns>An instance of an object which implements the  interface.</returns>
      <param name="ids">The identifiers of the released components to traverse and return reference information.</param>
    </member>
    <member name="M:DriveWorks.GroupReleasedComponents.GetComponentsAwaitingPreviewEnumerator(System.Boolean)">
      <summary>Gets an object which will enumerate the released components that are awaiting a preview in the group.</summary>
      <returns>An enumerator for released components awaiting a preview in the group.</returns>
      <param name="topLevelOnly">True to only get top level (root) components.</param>
    </member>
    <member name="M:DriveWorks.GroupReleasedComponents.GetComponentsDetailsById(System.Guid[])">
      <summary>Gets the details of all driven components matching the specified component ids.</summary>
      <returns>An array of driven component details matching the specified component ids.</returns>
      <param name="componentIds">The unique identifiers of the components to retrieve the details of.</param>
    </member>
    <member name="M:DriveWorks.GroupReleasedComponents.GetComponentsForGenerationInSpecificationOrder">
      <summary>Internal Use Only. Gets components which are generatable (i.e. they have no ungenerated children), in the order of the specifications to which they belong.</summary>
    </member>
    <member name="M:DriveWorks.GroupReleasedComponents.GetOrphanComponentsForGeneration">
      <summary>Internal Use Only. Gets components which are generatable (i.e. they have no ungenerated children), and which don't belong to any specifications.</summary>
    </member>
    <member name="M:DriveWorks.GroupReleasedComponents.GetReports(System.Guid)">
      <summary>Gets a specification's reports.</summary>
      <returns>An array of reports for the specified component.</returns>
      <param name="componentId">The identifier of the component for which to write the report.</param>
    </member>
    <member name="M:DriveWorks.GroupReleasedComponents.MarkFailed(System.Guid,System.Int32)">
      <summary>Marks the specified component as having failed the given number of times.</summary>
      <param name="componentId">The unique identifier of the component.</param>
      <param name="failedCount">The total number of times the component has failed to be generated.</param>
    </member>
    <member name="M:DriveWorks.GroupReleasedComponents.MarkGenerated(System.Guid)">
      <summary>Marks the specified component as being generated.</summary>
      <param name="componentId">The unique identifier of the component</param>
    </member>
    <member name="M:DriveWorks.GroupReleasedComponents.MarkGenerating(System.Guid)">
      <summary>Marks the specified component as being in the process of being generated.</summary>
      <param name="componentId">The unique identifier of the component</param>
    </member>
    <member name="M:DriveWorks.GroupReleasedComponents.MarkToGenerate(System.String)">
      <summary>Marks the specified component as requiring generation.</summary>
      <param name="componentTargetPath">The full path to the released component to update.</param>
    </member>
    <member name="M:DriveWorks.GroupReleasedComponents.SaveReleaseResults(DriveWorks.Components.ReleaseComponentsResults)">
      <summary>Saves the results of releasing one or more components.</summary>
      <param name="results">The results to save to the database.</param>
    </member>
    <member name="M:DriveWorks.GroupReleasedComponents.TryUpdateMasterPath(System.String,System.String)">
      <summary>Tries to update the master path of all released components matching the specified master path.</summary>
      <returns>True if the master path was successfully updated. False if we failed to update anything.</returns>
      <param name="originalPath">The original path.</param>
      <param name="newPath">The new path.</param>
    </member>
    <member name="M:DriveWorks.GroupReleasedComponents.TryUpdatePreviewPath(System.Guid,System.String)">
      <summary>Updates the path to the preview file created for the specified component.</summary>
      <returns>True if the path was successfully updated, otherwise false.</returns>
      <param name="componentId">The Id of the released component for which to update the path.</param>
      <param name="newPreviewPath">The full path to the preview file.</param>
    </member>
    <member name="M:DriveWorks.GroupReleasedComponents.TryUpdateTargetPath(System.String,System.String)">
      <summary>Tries to update the target path of a released component.</summary>
      <returns>True if the released component was successfully updated.</returns>
      <param name="originalPath">The original path.</param>
      <param name="newPath">The new path.</param>
    </member>
    <member name="M:DriveWorks.GroupReleasedComponents.UpdateReleasedComponentFlags(System.Guid,DriveWorks.Components.ReleasedComponentFlags)">
      <summary>Updates the specified released component's flags.</summary>
      <returns>True if the flags were successfully updated, otherwise False.</returns>
      <param name="componentId">The Id of the component for which to change the flags.</param>
      <param name="newFlags">The new flags to apply to the component.</param>
    </member>
    <member name="M:DriveWorks.GroupReleasedComponents.UpdateReleasedComponentTags(System.Guid,System.String[])">
      <summary>Updates the specified released component's tags.</summary>
      <returns>True if the tags were successfully updated, otherwise False.</returns>
      <param name="componentId">The Id of the component for which to change the tags.</param>
      <param name="newTags">The new tags to apply to the component.</param>
    </member>
    <member name="M:DriveWorks.GroupReleasedComponents.GetComponents(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>Gets an object which will enumerate the released components in the group.</summary>
      <returns>An enumerator over the released components in the group.</returns>
      <param name="topLevelOnly">True to only get top level (root) components.</param>
      <param name="includeGenerated">True to include generated components, false to exclude them.</param>
      <param name="includeNotGenerated">True to include components which haven't been generated, false to exclude them.</param>
      <param name="includeFailed">True to include failed components, false to exclude them.</param>
    </member>
    <member name="M:DriveWorks.GroupReleasedComponents.GetComponents(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>Gets an object which will enumerate the released components in the group.</summary>
      <returns>An enumerator over the released components in the group.</returns>
      <param name="topLevelOnly">True to only get top level (root) components.</param>
      <param name="includeGenerated">True to include generated components, false to exclude them.</param>
      <param name="includeNotGenerated">True to include components which haven't been generated, false to exclude them.</param>
      <param name="includeFailed">True to include failed components, false to exclude them.</param>
      <param name="includeDeferred">True to include deferred components, false to exclude them.</param>
    </member>
    <member name="M:DriveWorks.GroupReports.ExportReport(System.Guid,System.String)">
      <summary>Exports a report to the given location as a drivereport file.</summary>
      <returns>Success</returns>
      <param name="reportId">The id of the report to export.</param>
    </member>
    <member name="M:DriveWorks.GroupReports.GetReportAsXDocument(System.Guid)">
      <summary>Gets a report as XML stored in an XDocument.</summary>
      <returns>An instance of the  class.</returns>
      <param name="reportId">The unique identifier of the report to get.</param>
    </member>
    <member name="M:DriveWorks.GroupReports.GetReportDetails(System.Guid)">
      <summary>Gets matching report details based on the specified report identifier.</summary>
      <returns>The matching details or null if nothing is found.</returns>
      <param name="reportId">The identifier of the report to get the details of.</param>
    </member>
    <member name="M:DriveWorks.GroupReports.TryUpdateReportPath(System.Guid,System.String)">
      <summary>Attempts to update the reports directory.</summary>
      <returns>True if the report directory is successfully updated.</returns>
      <param name="id">The identification of the report to update.</param>
      <param name="newPath">The new directory of the report.</param>
    </member>
    <member name="M:DriveWorks.GroupSecurity.GetTeamGroupTablePermissionForGroupTable(System.Guid,System.Guid)">
      <summary>Returns the effective permission that a user has for the specified group data table.</summary>
      <param name="groupTableId">The identifier of the group data table to get the permissions of.</param>
      <param name="userId">The identifier of the user to get the permissions of.</param>
    </member>
    <member name="M:DriveWorks.GroupSecurity.GetTeamGroupTablePermissionsForGroupTable(System.Guid)">
      <summary>Returns a collection group data table permissions that the specified group data table has.</summary>
      <param name="groupTableId">The unique identifier of the group data table to get the permissions for.</param>
    </member>
    <member name="M:DriveWorks.GroupSecurity.GetTeamGroupTablePermissionsForTeam(System.Guid)">
      <summary>Returns a collection permissions that the specified team has for group tables.</summary>
      <param name="teamId">The unique identifier of the team to get the permissions for.</param>
    </member>
    <member name="M:DriveWorks.GroupSecurity.GetTeamGroupTablePermissionsForUser(System.Guid)">
      <summary>Returns a collection of group data table permissions that the specified user has.</summary>
      <param name="userId">The unique identifier of the user to fetch the permissions for.</param>
    </member>
    <member name="M:DriveWorks.GroupSecurity.GetTeams">
      <summary>Gets information about all registered teams.</summary>
      <returns>An array containing an instance of the  type for each registered team.</returns>
    </member>
    <member name="M:DriveWorks.GroupSecurity.GetUserById(System.Guid)">
      <summary>Gets a users details from the given ID.</summary>
      <returns>The details for the specified user if it exists, otherwise a null reference.</returns>
      <param name="userId">The unique identifier of the group to get.</param>
    </member>
    <member name="M:DriveWorks.GroupSecurity.GetUsers">
      <summary>Gets information about all registered users.</summary>
      <returns>An array containing an instance of the  type for each registered user.</returns>
    </member>
    <member name="M:DriveWorks.GroupSecurity.SetGroupTablePermissionForTeam(System.Guid,System.Guid,DriveWorks.Security.GroupTablePermission)">
      <summary>Sets the specified permissions for the specified team and group.</summary>
      <param name="teamId">The unique identifier of the team to set the permissions for.</param>
      <param name="groupTableId">The unique identifier of the group table to set the permissions of.</param>
      <param name="permission">The permissions to set for the specified team and group data table.</param>
    </member>
    <member name="M:DriveWorks.GroupSecurity.TryDeleteTeam(System.Guid)">
      <summary>Deletes the named team.</summary>
      <returns>True if the team was successfully found and deleted, otherwise false.</returns>
      <param name="teamId">The unique identifier of the team to delete.</param>
    </member>
    <member name="M:DriveWorks.GroupSecurity.TryDeleteUser(System.String)">
      <summary>Deletes the user with the specified login name.</summary>
      <returns>True if the user was found and deleted, otherwise false.</returns>
      <param name="loginName">The login name of the user to be deleted.</param>
    </member>
    <member name="M:DriveWorks.GroupSecurity.TryGetUser(System.String,DriveWorks.Security.UserDetails@)">
      <summary>Gets information about the user with the specified login name.</summary>
      <returns>True if the user was found and returned, otherwise false.</returns>
      <param name="loginName">The login name of the user to retrieve.</param>
      <param name="userDetails">A variable which will receive a new instance of the  type if successful.</param>
    </member>
    <member name="M:DriveWorks.GroupSecurity.TrySetUserPassword(System.String,System.String)">
      <summary>Updates an existing user with the specified information.</summary>
      <returns>True if the user is found and updated, otherwise false.</returns>
      <param name="loginName">The login name of the user.</param>
      <param name="newPassword">The new password to apply to the user.</param>
    </member>
    <member name="M:DriveWorks.GroupSecurity.TryUpdateTeam(DriveWorks.Security.TeamDetails)">
      <summary>Updates the team with the specified details.</summary>
      <returns>True if the team was successfully found and updated, otherwise false.</returns>
      <param name="teamDetails">The changed team details.</param>
    </member>
    <member name="M:DriveWorks.GroupSecurity.TryUpdateUser(DriveWorks.Security.UserDetails)">
      <summary>Updates an existing user with the specified information.</summary>
      <returns>True if the user is found and updated, otherwise false.</returns>
      <param name="userDetails">The information which describes the user to be updated.</param>
    </member>
    <member name="M:DriveWorks.GroupSecurity.AddUserToTeam(System.String,System.String)">
      <summary>Adds the specified user to the given team.</summary>
      <returns>True if both the user and the team were found, and the user was added to the team.</returns>
      <param name="teamName">The name of the team to which to add the user.</param>
      <param name="loginName">The login name of the user to add to the team.</param>
    </member>
    <member name="M:DriveWorks.GroupSecurity.AddUserToTeam(System.Guid,System.Guid)">
      <summary>Adds the specified user to the given team.</summary>
      <returns>True if both the user and the team were found, and the user was added to the team.</returns>
      <param name="teamId">The unique identifier of the team to which to add the user.</param>
      <param name="userId">The unique identifier of the user to add to the team.</param>
    </member>
    <member name="M:DriveWorks.GroupSecurity.ClearProjectPermissionsForTeam(System.String)">
      <summary>Clears the list of allowed projects for the specified team.</summary>
      <param name="teamName">The name of the team to operate on.</param>
    </member>
    <member name="M:DriveWorks.GroupSecurity.ClearProjectPermissionsForTeam(System.Guid)">
      <summary>Clears the list of allowed projects for the specified team.</summary>
      <param name="teamId">The unique identifier of the team to operate on.</param>
    </member>
    <member name="M:DriveWorks.GroupSecurity.CreateTeam(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
      <summary>Creates a new team with the specified information.</summary>
      <returns>An instance of the  type representing the newly created team.</returns>
      <param name="teamName">The name of the team.</param>
      <param name="displayName">The display name of the team.</param>
      <param name="isAllowedCapture">Whether or not the team can capture components.</param>
      <param name="canEditAllSpecificatons">Whether or not the team can edit all specifications.</param>
      <param name="editGroupSecurity">Whether or not the team can edit group security.</param>
    </member>
    <member name="M:DriveWorks.GroupSecurity.CreateUser(System.String,System.Boolean,System.String,System.String,System.Boolean,System.String)">
      <summary>Creates a new user with the specified information.</summary>
      <returns>An instance of the  structure containing information about the newly created user.</returns>
      <param name="loginName">The login name of the user.</param>
      <param name="emailAddress">The email address of the user.</param>
      <param name="displayName">The display name for the user.</param>
      <param name="isTeamLeader">Specifies if the user is a team leader.</param>
      <param name="password">The password to give to the user.</param>
    </member>
    <member name="M:DriveWorks.GroupSecurity.GetProjectPermissionsForTeam(System.String)">
      <summary>Gets the list of project permissions for the specified team.</summary>
      <returns>An array of instances of the  type for the project permissions.</returns>
      <param name="teamName">The name of the team.</param>
    </member>
    <member name="M:DriveWorks.GroupSecurity.GetProjectPermissionsForTeam(System.Guid)">
      <summary>Gets the list of project permissions for the specified team.</summary>
      <returns>An array of instances of the  type for the project permissions.</returns>
      <param name="teamId">The unique identifier of the team.</param>
    </member>
    <member name="M:DriveWorks.GroupSecurity.GetTeamsForUser(DriveWorks.Security.UserDetails)">
      <summary>Gets all the teams to which the given user belongs.</summary>
      <returns>An array of teams.</returns>
      <param name="user">The user to check.</param>
    </member>
    <member name="M:DriveWorks.GroupSecurity.GetTeamsForUser(System.Guid)">
      <summary>Gets all the teams to which the given user belongs.</summary>
      <returns>An array of teams.</returns>
      <param name="userId">The unique identifier of the user to check.</param>
    </member>
    <member name="M:DriveWorks.GroupSecurity.GetUsersInTeam(DriveWorks.Security.TeamDetails)">
      <summary>Gets all the users that belong to the specified team.</summary>
      <returns>An array of users.</returns>
      <param name="team">The team to check.</param>
    </member>
    <member name="M:DriveWorks.GroupSecurity.GetUsersInTeam(System.Guid)">
      <summary>Gets all the users that belong to the specified team.</summary>
      <returns>An array of users.</returns>
      <param name="teamId">The unique identifier of the team to check.</param>
    </member>
    <member name="M:DriveWorks.GroupSecurity.RemoveUserFromTeam(System.String,System.String)">
      <summary>Removes the specified user from the given team.</summary>
      <returns>True if both the user and the team were found, and the user was removed from the team.</returns>
      <param name="teamName">The name of the team from which to remove the user.</param>
      <param name="loginName">The login name of the user to remove from the team.</param>
    </member>
    <member name="M:DriveWorks.GroupSecurity.RemoveUserFromTeam(System.Guid,System.Guid)">
      <summary>Removes the specified user from the given team.</summary>
      <returns>True if both the user and the team were found, and the user was removed from the team.</returns>
      <param name="teamId">The unique identifier of the team from which to remove the user.</param>
      <param name="userId">The unique identifier of the user to remove from the team.</param>
    </member>
    <member name="M:DriveWorks.GroupSecurity.TryAddProjectPermissionToTeam(System.String,System.String,System.Guid)">
      <summary>Adds the specified project to the list of projects to which users in the given team have access.</summary>
      <returns>True if both the team and the project were found, and the project permission list was updated successfully, otherwise false.</returns>
      <param name="teamName">The name of the team to modify.</param>
      <param name="projectName">The name of the project to which to grant access.</param>
      <param name="permissionId">The unique identifier of the permission.</param>
    </member>
    <member name="M:DriveWorks.GroupSecurity.TryAddProjectPermissionToTeam(System.Guid,System.Guid,System.Guid)">
      <summary>Adds the specified project to the list of projects to which users in the given team have access.</summary>
      <returns>True if both the team and the project were found, and the project permission list was updated successfully, otherwise false.</returns>
      <param name="teamId">The unique identifier of the team to modify.</param>
      <param name="projectId">The unique identifier of the project to which to grant access.</param>
      <param name="permissionId">The unique identifier of the permission.</param>
    </member>
    <member name="M:DriveWorks.GroupSecurity.TryGetTeam(System.Guid,DriveWorks.Security.TeamDetails@)">
      <summary>Gets the specified team.</summary>
      <returns>True if the team was located and returns, otherwise false.</returns>
      <param name="teamId">The unique identifier of the team to retrieve.</param>
      <param name="teamDetails">A reference to the variable which will receive the team details.</param>
    </member>
    <member name="M:DriveWorks.GroupSecurity.TryGetTeam(System.String,DriveWorks.Security.TeamDetails@)">
      <summary>Gets the named team.</summary>
      <returns>True if the team was located and returns, otherwise false.</returns>
      <param name="teamName">The name of the team to retrieve.</param>
      <param name="teamDetails">A reference to the variable which will receive the team details.</param>
    </member>
    <member name="M:DriveWorks.GroupSecurity.TryRemoveProjectPermissionFromTeam(System.Guid,System.Guid,System.Guid)">
      <summary>Removes the specified project from the list of projects to which users in the given team have access.</summary>
      <returns>True if both the team and the project were found, and the project permission list was updated successfully, otherwise false.</returns>
      <param name="teamId">The unique identifier of the team to modify.</param>
      <param name="projectId">The unique identifier of the project from which to remove access.</param>
      <param name="permissionId">The unique identifier of the permission.</param>
    </member>
    <member name="M:DriveWorks.GroupSecurity.TryRemoveProjectPermissionFromTeam(System.String,System.String,System.Guid)">
      <summary>Removes the specified project from the list of projects to which users in the given team have access.</summary>
      <returns>True if both the team and the project were found, and the project permission list was updated successfully, otherwise false.</returns>
      <param name="teamName">The name of the team to modify.</param>
      <param name="projectName">The name of the project from which to remove access.</param>
      <param name="permissionId">The unique identifier of the permission.</param>
    </member>
    <member name="E:DriveWorks.GroupSecurity.TeamCreated">
      <summary>Raised when a team is created.</summary>
    </member>
    <member name="E:DriveWorks.GroupSecurity.TeamDeleted">
      <summary>Raised when a team is successfully deleted.</summary>
    </member>
    <member name="E:DriveWorks.GroupSecurity.TeamUpdated">
      <summary>Raised when a team is successfully updated.</summary>
    </member>
    <member name="E:DriveWorks.GroupSecurity.UserCreated">
      <summary>Raised when a user is created.</summary>
    </member>
    <member name="E:DriveWorks.GroupSecurity.UserDeleted">
      <summary>Raised when a user is successfully deleted.</summary>
    </member>
    <member name="E:DriveWorks.GroupSecurity.UserUpdated">
      <summary>Raised when a user is successfully updated.</summary>
    </member>
    <member name="M:DriveWorks.GroupSharingViolationException.#ctor">
      <summary>Creates an instance of the  class.</summary>
    </member>
    <member name="M:DriveWorks.GroupSharingViolationException.#ctor(System.String)">
      <summary>Creates an instance of the  class.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:DriveWorks.GroupSharingViolationException.#ctor(System.String,System.Exception)">
      <summary>Creates an instance of the  class.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">The inner exception.</param>
    </member>
    <member name="M:DriveWorks.GroupSpecifications.CreateReportWriter(System.Int32,System.String,DriveWorks.Reporting.ReportingLevel)">
      <summary>Creates a new report writer which will write a report for the given specification.</summary>
      <returns>A report writer.</returns>
      <param name="specificationId">The identifier of the specification for which to write the report.</param>
      <param name="title">The title of the report.</param>
      <param name="level">The maximum entry level to write to the report.</param>
    </member>
    <member name="M:DriveWorks.GroupSpecifications.DeleteSpecificationDocument(System.Guid)">
      <summary>Deletes the specification document with the specified identifier.</summary>
      <param name="documentId">The document to delete.</param>
    </member>
    <member name="M:DriveWorks.GroupSpecifications.DeleteSpecificationReport(System.Guid)">
      <summary>Deletes the specification report with the specified identifier.</summary>
      <exception caption="" cref="T:DriveWorks.ItemNotFoundException">The report does not exist.</exception>
      <param name="reportId">The report to delete.</param>
    </member>
    <member name="M:DriveWorks.GroupSpecifications.DeleteSpecificationTask(System.Guid)">
      <summary>Deletes the specification task with the specified unique identifier.</summary>
      <param name="taskId">The unique identifier of the task to delete.</param>
    </member>
    <member name="M:DriveWorks.GroupSpecifications.Exists(System.String)">
      <summary>Determines whether a specification with the specified name already exists.</summary>
      <returns>True if the given specification name is already registered, otherwise false.</returns>
      <param name="specificationName">The name of the specification to seach for.</param>
    </member>
    <member name="M:DriveWorks.GroupSpecifications.GetSpecificationDocuments(System.Int32)">
      <summary>Gets a specification's documents.</summary>
      <param name="specificationId">The numerical identifier of the specification for which to get documents.</param>
    </member>
    <member name="M:DriveWorks.GroupSpecifications.GetSpecificationReports(System.Int32)">
      <summary>Gets a specification's reports.</summary>
      <param name="specificationId">The numerical identifier of the specification for which to get reports.</param>
    </member>
    <member name="M:DriveWorks.GroupSpecifications.GetSpecificationsInStateTypeByModifiedDate(DriveWorks.Specification.StateType,System.Boolean)">
      <summary>Gets an enumerator which can be used to retrieve specifications in a given type of state in chronological order.</summary>
      <param name="stateType">The type of state against which to filter the returned specifications.</param>
      <param name="descending">True to retrieve specifications in reverse chronological order.</param>
    </member>
    <member name="M:DriveWorks.GroupSpecifications.GetSpecificationTask(System.Guid)">
      <summary>Gets the specification task with the specified id.</summary>
      <returns>The specification task for the specified id.</returns>
      <param name="taskId">The id of the specification task to retrieve.</param>
    </member>
    <member name="M:DriveWorks.GroupSpecifications.MarkSpecificationTaskCompleted(System.Guid,System.Boolean)">
      <summary>Attempts to mark the specified specification task as being complete/incomplete.</summary>
      <param name="taskId">The unique identifier of the task to mark.</param>
      <param name="completed">True if the task is completed, otherwise false.</param>
    </member>
    <member name="M:DriveWorks.GroupSpecifications.MarkSpecificationTaskFailed(System.Guid,System.Int32)">
      <summary>Attempts to mark the specified specification task as having failed.</summary>
      <param name="taskId">The unique identifier of the task to mark.</param>
      <param name="failedCount">The number of times the task has failed.</param>
    </member>
    <member name="M:DriveWorks.GroupSpecifications.RegisterSpecificationDocument(System.Int32,System.String,System.Boolean)">
      <summary>Registers a new specification document with an existing specification.</summary>
      <exception caption="" cref="T:System.ArgumentException">The %documentPath% is empty, or too long.</exception>
      <returns>An instance of the  class containing information about the document.</returns>
      <param name="specificationId">The id of the specification against which to register the document.</param>
      <param name="documentPath">The fully qualified path to the document.</param>
      <param name="isHidden">True if the document is filtered from the the normal end-user view.</param>
    </member>
    <member name="M:DriveWorks.GroupSpecifications.ResetSpecificationIdPool">
      <summary>Clears the specification Id pool for this group.</summary>
      <exception caption="" cref="T:System.UnauthorizedAccessException">Thrown when the current user is working in global specification id pool and does not have the edit all specifications permission.Thrown when there are current specifications in the group.</exception>
    </member>
    <member name="M:DriveWorks.GroupSpecifications.TryDeleteEmbeddedSpecificationDependencies(System.Int32)">
      <summary>Removes the component dependencies from the group, for the given embedded specification.</summary>
      <returns>True if the specification had dependencies and they were removed, false if there were no dependencies to remove.</returns>
      <param name="specificationId">The unique numerical identifier of the specification to remove dependencies for.</param>
    </member>
    <member name="M:DriveWorks.GroupSpecifications.TryDeleteSpecificationReport(System.Guid)">
      <summary>Tries to delete a specification report.</summary>
      <returns>True if the report was found and deleted, false if it didn't exist.</returns>
      <param name="reportId">The report to delete.</param>
    </member>
    <member name="M:DriveWorks.GroupSpecifications.TryGetSpecificationProperties(DriveWorks.Specification.SpecificationDetails,System.Collections.Generic.IDictionary{System.String,System.String}@)">
      <summary>Tries to get all of the specification properties for the given specification.</summary>
      <returns>An enum that represents whether the properties were retrieved successfully. If not, the enum will give the reason for the failure.</returns>
      <param name="specificationDetails">The details of the specification to retrieve properties for.</param>
      <param name="specificationProperties">The properties for this specification.</param>
    </member>
    <member name="M:DriveWorks.GroupSpecifications.TryUpdateSpecificationDirectory(System.Int32,System.String)">
      <summary>Attempts to update the specifications location.</summary>
      <returns>True if the specification directory was successfully updated.</returns>
      <param name="specificationId">The identification of the specification to update.</param>
      <param name="newPath">The new specification directory.</param>
    </member>
    <member name="M:DriveWorks.GroupSpecifications.TryUpdateSpecificationDocumentDirectory(System.Int32,System.Guid,System.String)">
      <summary>Attempts to update a specification document location.</summary>
      <returns>True if the specification directory was successfully updated.</returns>
      <param name="specificationId">The identification of the specification containing the document.</param>
      <param name="documentId">The identification of the specification document to update.</param>
      <param name="newPath">The new specification directory.</param>
    </member>
    <member name="M:DriveWorks.GroupSpecifications.UpdateSpecificationTags(System.Int32,System.String[])">
      <summary>Updates the tags for the specified specification.</summary>
      <returns>True if the tags were successfully updated, otherwise False.</returns>
      <param name="specificationId">The Id of the specification to update.</param>
      <param name="newTags">The new tags to associate with the specification.</param>
    </member>
    <member name="M:DriveWorks.GroupSpecifications.UpdateSpecificationTask(DriveWorks.Specification.SpecificationTaskDetails)">
      <summary>Updates the data in the specified specification task.</summary>
      <param name="task">The task to update.</param>
    </member>
    <member name="M:DriveWorks.GroupSpecifications.UpdateSpecificationTaskTags(System.Guid,System.String[])">
      <summary>Updates the tags for the specified specification task.</summary>
      <returns>True if the tags were successfully updated, otherwise False.</returns>
      <param name="taskId">The unique identifier of the task to update.</param>
      <param name="newTags">The new tags to associate with the task.</param>
    </member>
    <member name="M:DriveWorks.GroupSpecifications.DeleteSpecification(System.Int32)">
      <summary>Deletes the specification with the specified identifier.</summary>
      <exception caption="" cref="T:DriveWorks.ItemNotFoundException">The specification does not exist.</exception>
      <param name="specificationId">The specification to delete.</param>
    </member>
    <member name="M:DriveWorks.GroupSpecifications.DeleteSpecification(DriveWorks.Specification.SpecificationDetails)">
      <summary>Deletes the specification with the specified identifier.</summary>
      <exception caption="" cref="T:DriveWorks.ItemNotFoundException">The specification does not exist.</exception>
      <param name="specificationDetails">The specification to delete.</param>
    </member>
    <member name="M:DriveWorks.GroupSpecifications.GetSpecification(System.Int32)">
      <summary>Gets details about a specification with the specified identifier.</summary>
      <exception caption="" cref="T:DriveWorks.ItemNotFoundException">No specification with the given identifier could be found.</exception>
      <returns>The specification details.</returns>
      <param name="id">The unique numerical identifier associated with the specification to retrieve.</param>
    </member>
    <member name="M:DriveWorks.GroupSpecifications.GetSpecification(System.String)">
      <summary>Gets details about a specification with the specified name.</summary>
      <exception caption="" cref="T:DriveWorks.ItemNotFoundException">No specification with the given name could be found.</exception>
      <returns>The specification details.</returns>
      <param name="name">The name associated with the specification to retrieve.</param>
    </member>
    <member name="M:DriveWorks.GroupSpecifications.GetSpecificationComponents(System.Int32)">
      <summary>Gets released components on which the specification has a dependency.</summary>
      <param name="specificationId">The numerical identifier of the specification for which to get reports.</param>
    </member>
    <member name="M:DriveWorks.GroupSpecifications.GetSpecificationComponents(System.Int32,System.Boolean)">
      <summary>Gets released components on which the specification has a dependency.</summary>
      <param name="specificationId">The numerical identifier of the specification for which to get reports.</param>
      <param name="includeChildSpecifications">True to include components generated by child specifications.</param>
    </member>
    <member name="M:DriveWorks.GroupSpecifications.GetSpecificationsByModifiedDate(System.Boolean)">
      <summary>Gets specifications in chronological order.</summary>
      <param name="descending">True to retrieve specifications in reverse chronological order.</param>
    </member>
    <member name="M:DriveWorks.GroupSpecifications.GetSpecificationsByModifiedDate(System.Boolean,System.Boolean)">
      <summary>Gets specifications in chronological order.</summary>
      <param name="descending">True to retrieve specifications in reverse chronological order.</param>
      <param name="includeArchived">True to also retrieve archived specifications.</param>
    </member>
    <member name="M:DriveWorks.GroupSpecifications.GetSpecificationTasks(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>Gets all of the specification tasks of the given type matching the specified criteria.</summary>
      <returns>Returns an enumerable of specification tasks that match the specified criteria.</returns>
      <param name="taskType">The type of task to retrieve.</param>
      <param name="descending">True to retrieve tasks in reverse chronological order of when their parent specifications were created.</param>
      <param name="includeComplete">True to include complete tasks, otherwise false.</param>
      <param name="includeIncomplete">True to include incomplete tasks, otherwise false.</param>
      <param name="includeFailed">True to include failed tasks, otherwise false.</param>
    </member>
    <member name="M:DriveWorks.GroupSpecifications.GetSpecificationTasks(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>Gets all of the specification tasks of the given type matching the specified criteria.</summary>
      <returns>Returns an enumerable of specification tasks that match the specified criteria.</returns>
      <param name="taskType">The type of task to retrieve/</param>
      <param name="descending">True to retrieve tasks in reverse chronological order of when their parent specifications were created.</param>
      <param name="includeComplete">True to include complete tasks, otherwise false.</param>
      <param name="includeInComplete">True to include incomplete tasks, otherwise false.</param>
      <param name="includeFailed">True to include failed tasks, otherwise false.</param>
      <param name="includeMissingSpecifications">True to include tasks that have no registered specification information.</param>
    </member>
    <member name="M:DriveWorks.GroupSpecifications.GetTasksForSpecification(System.Int32)">
      <summary>Gets all types of tasks for a specification.</summary>
      <returns>An array of all tasks, for the specification.</returns>
      <param name="specificationId">The numerical identifier of the specification for which to get reports.</param>
    </member>
    <member name="M:DriveWorks.GroupSpecifications.GetTasksForSpecification(System.Int32,System.String)">
      <summary>Gets all tasks for a specification.</summary>
      <returns>An array of tasks, matching the specified type, for the specification.</returns>
      <param name="specificationId">The numerical identifier of the specification for which to get reports.</param>
      <param name="taskType">The type of task to retrieve.</param>
    </member>
    <member name="M:DriveWorks.GroupSpecifications.ImportSpecifications(DriveWorks.Group)">
      <summary>Imports all the specifications from the source group.</summary>
      <exception caption="" cref="T:System.InvalidOperationException">
 Thrown when the current group contains specifications.
 </exception>
      <param name="sourceGroup">The group to export specifications from.</param>
    </member>
    <member name="M:DriveWorks.GroupSpecifications.RegisterSpecificationTask(System.Int32,System.String,System.Byte[])">
      <summary>Registers a deferred specification task of the specified type.</summary>
      <param name="specificationId">The unique identifier of the specification for which to register the task.</param>
      <param name="type">The name of the provider which understands the task.</param>
      <param name="data">The task's serialized data.</param>
    </member>
    <member name="M:DriveWorks.GroupSpecifications.RegisterSpecificationTask(System.Int32,System.String,System.Byte[],System.String[])">
      <summary>Registers a deferred specification task of the specified type.</summary>
      <param name="specificationId">The unique identifier of the specification for which to register the task.</param>
      <param name="type">The name of the provider which understands the task.</param>
      <param name="data">The task's serialized data.</param>
      <param name="tags">The tags to associate with the task.</param>
    </member>
    <member name="M:DriveWorks.GroupSpecifications.TryDeleteSpecification(DriveWorks.Specification.SpecificationDetails)">
      <summary>Removes the given specification from the group.</summary>
      <returns>True if the specification existed and was removed, false if it doesn't exist.</returns>
      <param name="specificationDetails">The details of the specification to delete.</param>
    </member>
    <member name="M:DriveWorks.GroupSpecifications.TryDeleteSpecification(System.Int32)">
      <summary>Removes the given specification from the group.</summary>
      <returns>True if the specification existed and was removed, false if it doesn't exist.</returns>
      <param name="specificationId">The unique numerical identifier of the specification to delete.</param>
    </member>
    <member name="M:DriveWorks.GroupSpecifications.TryGetSpecification(System.Int32)">
      <summary>Tries to get details about a specification with the specified identifier.</summary>
      <returns>The specification details or a null reference if the specification doesn't exist.</returns>
      <param name="id">The unique numerical identifier associated with the specification to retrieve.</param>
    </member>
    <member name="M:DriveWorks.GroupSpecifications.TryGetSpecification(System.String)">
      <summary>Tries to get details about a specification with the specified name.</summary>
      <returns>The specification details or a null reference if the specification doesn't exist.</returns>
      <param name="name">The name associated with the specification to retrieve.</param>
    </member>
    <member name="M:DriveWorks.GroupSpecifications.UpdateSpecificationArchivedStatus(System.String,System.Boolean)">
      <summary>Archives or unarchives a specification. The specification must exist, and must not be running.</summary>
      <exception caption="" cref="T:System.InvalidOperationException">The specification is running, the %M:DriveWorks.Specification.SpecificationContext.TryUpdateSpecificationArchivedStatus(System.Boolean)% method should be used for running specifications.The given specification identifier is for a specification which doesn't exist.</exception>
      <param name="specificationName">The name of the specification to update.</param>
      <param name="isArchived">The new value of the archived flag.</param>
    </member>
    <member name="M:DriveWorks.GroupSpecifications.UpdateSpecificationArchivedStatus(System.Int32,System.Boolean)">
      <summary>Archives or unarchives a specification. The specification must exist, and must not be running.</summary>
      <exception caption="" cref="T:System.InvalidOperationException">The specification is running, the %M:DriveWorks.Specification.SpecificationContext.TryUpdateSpecificationArchivedStatus(System.Boolean)% method should be used for running specifications.The given specification identifier is for a specification which doesn't exist.</exception>
      <param name="specificationId">The unique identifier of the specification to update.</param>
      <param name="isArchived">The new value of the archived flag.</param>
    </member>
    <member name="M:DriveWorks.GroupTableExport.GetDetails">
      <summary>Gets the details for this document.</summary>
    </member>
    <member name="M:DriveWorks.GroupTableExport.GetExportSummary">
      <summary>Gets a summary of changes that would take place if the document was generated now.</summary>
    </member>
    <member name="P:DriveWorks.GroupTableExport.TableName">
      <summary>Gets/sets the name of the table that this document will drive.</summary>
    </member>
    <member name="M:DriveWorks.GroupUpgradeAbortedException.#ctor(System.Exception)">
      <summary>Creates an instance of the  class.</summary>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:DriveWorks.GroupUpgradeAbortedException.#ctor">
      <summary>Creates an instance of the  class.</summary>
    </member>
    <member name="M:DriveWorks.GroupVersionException.#ctor(System.Exception)">
      <summary>Creates an instance of the  class.</summary>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:DriveWorks.GroupVersionException.#ctor">
      <summary>Creates an instance of the  class.</summary>
    </member>
    <member name="M:DriveWorks.GroupVersionInformation.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>Creates a new instance of the  class.</summary>
      <param name="major">The major version number.</param>
      <param name="minor">The minor version number.</param>
      <param name="revision">The revision version number.</param>
    </member>
    <member name="M:DriveWorks.GroupVersionInformation.CompareTo(DriveWorks.GroupVersionInformation)">
      <summary>Compares the specified  with the current instance.</summary>
      <param name="other">The  to compare against.</param>
    </member>
    <member name="P:DriveWorks.GroupVersionInformation.LatestVersion">
      <summary>Gets the supported version for groups.</summary>
    </member>
    <member name="P:DriveWorks.GroupVersionInformation.Major">
      <summary>Gets the major version number.</summary>
    </member>
    <member name="P:DriveWorks.GroupVersionInformation.Minor">
      <summary>Gets the minor version number.</summary>
    </member>
    <member name="P:DriveWorks.GroupVersionInformation.Revision">
      <summary>Gets the revision version number.</summary>
    </member>
    <member name="M:DriveWorks.ImportedDataTable.GetData">
      <summary>Returns the cached data from the design master. This is much faster than re-loading from file.</summary>
    </member>
    <member name="M:DriveWorks.ImportedDataTable.SetData(System.Object[0:,0:])">
      <summary>Set the data for this table.</summary>
      <param name="data">The new data to place in the table.</param>
    </member>
    <member name="P:DriveWorks.ImportedDataTable.FileLocation">
      <summary>The location of the orginal workbook that created this data table.</summary>
    </member>
    <member name="P:DriveWorks.ImportedDataTable.SheetName">
      <summary>The name of the original sheet that created this data table.</summary>
    </member>
    <member name="M:DriveWorks.IndexesChangedEventArgs.#ctor(System.Collections.Generic.IEnumerable{DriveWorks.ChangedValue{System.Int32}})">
      <summary>Creates a new instance of the  class.</summary>
      <param name="changedIndexes">The original index.</param>
    </member>
    <member name="P:DriveWorks.IndexesChangedEventArgs.ChangedIndexes">
      <summary>The original index, before the change.</summary>
    </member>
    <member name="M:DriveWorks.InvalidAttachmentsException.#ctor(System.String[])">
      <summary>Creates a new instance of the  class.</summary>
      <param name="attachments">The invalid attachments.</param>
    </member>
    <member name="M:DriveWorks.InvalidAttachmentsException.#ctor(System.String[],System.String)">
      <summary>Creates a new instance of the  class.</summary>
      <param name="attachments">The invalid attachments.</param>
      <param name="message">The exception message.</param>
    </member>
    <member name="P:DriveWorks.InvalidAttachmentsException.Attachments">
      <summary>Gets a collection of the invalid attachments</summary>
    </member>
    <member name="M:DriveWorks.InvalidCharactersException.#ctor">
      <summary>Creates a new  object.</summary>
    </member>
    <member name="M:DriveWorks.InvalidCharactersException.#ctor(System.String)">
      <summary>Creates a new  object.</summary>
    </member>
    <member name="M:DriveWorks.InvalidCharactersException.#ctor(System.String,System.Exception)">
      <summary>Creates a new  object.</summary>
    </member>
    <member name="M:DriveWorks.InvalidDocumentGeneratedException.#ctor(System.String)">
      <summary>Creates a new instance of the  class.</summary>
    </member>
    <member name="M:DriveWorks.InvalidDocumentPathException.#ctor(System.String,System.String)">
      <summary>Creates a new instance of the  class.</summary>
      <param name="documentName">The name of the document that threw this exception.</param>
      <param name="invalidPathFragment">The part of the document path that is invalid.</param>
    </member>
    <member name="P:DriveWorks.InvalidDocumentPathException.DocumentName">
      <summary>Gets the name of the document containing an invalid filename or relative path rule.</summary>
    </member>
    <member name="M:DriveWorks.InvalidRuleException.#ctor">
      <summary>Creates a new  object.</summary>
    </member>
    <member name="M:DriveWorks.InvalidRuleException.#ctor(System.String)">
      <summary>Creates a new  object.</summary>
    </member>
    <member name="M:DriveWorks.InvalidRuleException.#ctor(System.String,System.Exception)">
      <summary>Creates a new  object.</summary>
    </member>
    <member name="M:DriveWorks.ItemDeletedException.#ctor">
      <summary>Creates a new instance of the  class.</summary>
    </member>
    <member name="M:DriveWorks.ItemDeletedException.#ctor(System.String)">
      <summary>Creates an instance of the  class.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:DriveWorks.ItemDeletedException.#ctor(System.String,System.Exception)">
      <summary>Creates an instance of the  class.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">The inner exception.</param>
    </member>
    <member name="M:DriveWorks.ItemDeletedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the  class with serialized data.</summary>
      <param name="info">The  that holds the serialized object data about the exception being thrown</param>
      <param name="context">The  that contains contextual information about the source or destination.</param>
    </member>
    <member name="P:DriveWorks.ItemDeletedException.Message">
      <summary>Gets a message that describes the error.</summary>
    </member>
    <member name="M:DriveWorks.ItemExistsException.#ctor">
      <summary>Initializes a new instance of the  class.</summary>
    </member>
    <member name="M:DriveWorks.ItemExistsException.#ctor(System.String)">
      <summary>Initializes a new instance of the  class with a specified error message.</summary>
      <param name="message">The message which describes the error.</param>
    </member>
    <member name="M:DriveWorks.ItemExistsException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the  class with a specified error message.</summary>
      <param name="message">The message which describes the error.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:DriveWorks.ItemNotFoundException.#ctor">
      <summary>Initializes a new instance of the  class.</summary>
    </member>
    <member name="M:DriveWorks.ItemNotFoundException.#ctor(System.String)">
      <summary>Initializes a new instance of the  class with a specified error message.</summary>
      <param name="message">The message which describes the error.</param>
    </member>
    <member name="M:DriveWorks.ItemNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the  class with a specified error message.</summary>
      <param name="message">The message which describes the error.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:DriveWorks.ItemNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the  class with serialized data.</summary>
      <param name="info">The  that holds the serialized object data about the exception being thrown</param>
      <param name="context">The  that contains contextual information about the source or destination.</param>
    </member>
    <member name="P:DriveWorks.Job.FailedTime">
      <summary>Gets the last time we received a failure notification for this job from the client or nothing if no attempts have been made to process the job yet.</summary>
    </member>
    <member name="P:DriveWorks.Job.Job">
      <summary>Gets information about the job.</summary>
    </member>
    <member name="P:DriveWorks.Job.MachineName">
      <summary>Gets the name of the machine currently processing this job.</summary>
    </member>
    <member name="P:DriveWorks.Job.StartedTime">
      <summary>Gets the last time this job was attempted or nothing if no attempts have been made to process it.</summary>
    </member>
    <member name="P:DriveWorks.Job.Tags">
      <summary>Gets the tags associated with this job.</summary>
    </member>
    <member name="P:DriveWorks.Job.Username">
      <summary>Gets the name of the user that is currently processing this job.</summary>
    </member>
    <member name="P:DriveWorks.JobClientDetails.Id">
      <summary>Gets a unique identifier for this client.</summary>
    </member>
    <member name="P:DriveWorks.JobClientDetails.MachineName">
      <summary>Gets the name of the machine for this client.</summary>
    </member>
    <member name="P:DriveWorks.JobClientDetails.User">
      <summary>Gets the currently logged in user information for this client.</summary>
    </member>
    <member name="M:DriveWorks.JobProcessorAttribute.#ctor(System.String,System.String)">
      <summary>Creates a new instance of the  class.</summary>
      <param name="jobType">The type of job to process.</param>
      <param name="displayName">The user friendly name for the processor.</param>
    </member>
    <member name="P:DriveWorks.JobProcessorAttribute.DisplayName">
      <summary>Gets the user friendly name of the processor.</summary>
    </member>
    <member name="P:DriveWorks.JobProcessorAttribute.JobType">
      <summary>Gets the type of job to process.</summary>
    </member>
    <member name="M:DriveWorks.JobQueue.GetNextJob(DriveWorks.JobRequestTagInformation)">
      <summary>Gets the next job in the queue.</summary>
      <returns>The next job to process.</returns>
      <param name="tagInformation">The tag information for this job request.</param>
    </member>
    <member name="M:DriveWorks.JobQueue.SetCompleted(System.String)">
      <summary>Flags the specified job as having been completed by the current client.</summary>
      <param name="jobId">The Id of the job that was completed.</param>
    </member>
    <member name="M:DriveWorks.JobQueue.SetFailed(System.String)">
      <summary>Flags the specified job as having failed to be processed by the current client.</summary>
      <param name="jobId">The Id of the job that couldn't be processed.</param>
    </member>
    <member name="M:DriveWorks.JobRequestTagInformation.#ctor(System.String[],System.String[],System.Boolean)">
      <summary>Creates a new instance of the  class.</summary>
      <param name="priorityTags">The tags that must be processed first. The order of the collection determines the priority.</param>
      <param name="blockedTags">The tags that must be ignored.</param>
      <param name="processPriorityOnly">Optional. Whether only the priority tags will be processed. False by default.</param>
    </member>
    <member name="P:DriveWorks.JobRequestTagInformation.BlockedTags">
      <summary>Gets the tags that must be ignored.</summary>
    </member>
    <member name="P:DriveWorks.JobRequestTagInformation.PriorityTags">
      <summary>Gets the tags that must be processed first. The order of the collection determines the priority.</summary>
    </member>
    <member name="P:DriveWorks.JobRequestTagInformation.ProcessPriorityOnly">
      <summary>Gets whether tags other than the ones in the priority list can be processed but as a lower priority.</summary>
    </member>
    <member name="M:DriveWorks.Jobs.#ctor(DriveWorks.Job[],DriveWorks.Job[])">
      <summary>Creates an instance of the  class.</summary>
      <param name="inProgressJobs">The jobs currently being processed.</param>
      <param name="pendingJobs">The jobs in the pool waiting to be processed.</param>
    </member>
    <member name="P:DriveWorks.Jobs.InProgress">
      <summary>Gets the jobs currently being processed.</summary>
    </member>
    <member name="P:DriveWorks.Jobs.Pending">
      <summary>Gets the jobs waiting to be processed.</summary>
    </member>
    <member name="F:DriveWorks.JobTypeConstants.EMAIL">
      <summary>A string representing an email job.</summary>
    </member>
    <member name="F:DriveWorks.JobTypeConstants.SPECIFICATION">
      <summary>A string representing a specification job.</summary>
    </member>
    <member name="F:DriveWorks.JobTypeConstants.TRIGGERED_ACTION">
      <summary>A string representing a triggered action job.</summary>
    </member>
    <member name="M:DriveWorks.MacroFailedException.#ctor">
      <summary>Creates a new  object.</summary>
    </member>
    <member name="M:DriveWorks.MacroFailedException.#ctor(System.String)">
      <summary>Creates a new  object.</summary>
    </member>
    <member name="M:DriveWorks.MacroFailedException.#ctor(System.String,System.Exception)">
      <summary>Creates a new  object.</summary>
    </member>
    <member name="M:DriveWorks.MeasurementHelper.ConvertDistanceUnits(System.Double,DriveWorks.DistanceMeasurementUnitOptions,DriveWorks.DistanceMeasurementUnitOptions)">
      <summary>Converts the given measurement of distance into an alternative representation.</summary>
      <returns>The converted distance.</returns>
      <param name="sourceValue">The source value expressed in <paramref name="sourceUnits" />.</param>
      <param name="sourceUnits">The units in which the source value is expressed.</param>
      <param name="targetUnits">The units in to which to convert.</param>
    </member>
    <member name="M:DriveWorks.MessageEventArgs.#ctor(DriveWorks.ProjectMessage)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="message">The message that was changed.</param>
    </member>
    <member name="P:DriveWorks.MessageEventArgs.Message">
      <summary>Gets the message that was changed.</summary>
    </member>
    <member name="M:DriveWorks.MissingApplicationException.#ctor(System.String)">
      <summary>Creates a new instance of the  class.</summary>
      <param name="applicationName">The name the of application is that is missing.</param>
    </member>
    <member name="M:DriveWorks.MissingApplicationException.#ctor(System.String,System.Exception)">
      <summary>Creates a new instance of the  class.</summary>
      <param name="applicationName">The name the of application is that is missing.</param>
      <param name="innerException">The source exception.</param>
    </member>
    <member name="P:DriveWorks.MissingApplicationException.ApplicationName">
      <summary>Gets the name of the application that is missing.</summary>
    </member>
    <member name="M:DriveWorks.MissingPrerequisiteException.#ctor">
      <summary>Creates an instance of the  class.</summary>
    </member>
    <member name="M:DriveWorks.MissingPrerequisiteException.#ctor(System.String)">
      <summary>Creates an instance of the  class.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:DriveWorks.MissingPrerequisiteException.#ctor(System.String,System.Exception)">
      <summary>Creates an instance of the  class.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">The inner exception.</param>
    </member>
    <member name="M:DriveWorks.NotInitializedException.#ctor">
      <summary>Creates an instance of the  class.</summary>
    </member>
    <member name="M:DriveWorks.NotInitializedException.#ctor(System.String)">
      <summary>Creates an instance of the  class.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:DriveWorks.NotInitializedException.#ctor(System.String,System.Exception)">
      <summary>Creates an instance of the  class.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">The inner exception.</param>
    </member>
    <member name="M:DriveWorks.NotInitializedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the  class with serialized data.</summary>
      <param name="info">The  that holds the serialized object data about the exception being thrown</param>
      <param name="context">The  that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:DriveWorks.OdbcDataTable.RefreshOnProjectLoad">
      <summary>Allow fresh on load option.</summary>
    </member>
    <member name="P:DriveWorks.OdbcDataTable.AllFields">
      <summary>If all the avialable fields should be read, as apposed to reading the specified ones.</summary>
    </member>
    <member name="P:DriveWorks.OdbcDataTable.DataSourceName">
      <summary>The name of the odbc data source.</summary>
    </member>
    <member name="P:DriveWorks.OdbcDataTable.Fields">
      <summary>The fields that are used from the selected table.</summary>
    </member>
    <member name="P:DriveWorks.OdbcDataTable.Password">
      <summary>The password (if any) used to connect to the odbc data source.</summary>
    </member>
    <member name="P:DriveWorks.OdbcDataTable.RefreshTableOnLoad">
      <summary>If the data from the talbew should be re-loaded each time the project is launched.</summary>
    </member>
    <member name="P:DriveWorks.OdbcDataTable.TableName">
      <summary>The name of the table to read from the odbc data source.</summary>
    </member>
    <member name="P:DriveWorks.OdbcDataTable.Username">
      <summary>The username (if any) used to connect to the odbc data source.</summary>
    </member>
    <member name="M:DriveWorks.OdbcExport.AddColumn(System.String,System.String,DriveWorks.ColumnType)">
      <summary>Adds a column that is present in the target table.</summary>
      <param name="name">The name of the column.</param>
      <param name="type">The data type for this column.</param>
      <param name="columnType">The type of column; Control, Common or NotSpecified.</param>
    </member>
    <member name="M:DriveWorks.OdbcExport.AddCommonColumn(System.String,System.String,System.String,System.String)">
      <summary>Adds a common column to the table</summary>
      <param name="name">The name of this column.</param>
      <param name="type">The data type for this column.</param>
      <param name="commonRule">The common rule to set for this column.</param>
      <param name="commonComment">The common comment to set for the column.</param>
    </member>
    <member name="M:DriveWorks.OdbcExport.AddRow(System.Collections.Generic.IDictionary{System.String,DriveWorks.Abstractions.IHasRule})">
      <summary>Adds a row to the list of export rows.</summary>
      <param name="fields">The dictionary of fields that are specified on this row. Key is the field name and the value is the rule for the cell.</param>
    </member>
    <member name="M:DriveWorks.OdbcExport.ClearColumns">
      <summary>Removes all column specifications.</summary>
    </member>
    <member name="M:DriveWorks.OdbcExport.ClearRows">
      <summary>Removes all rows from the list of export rows.</summary>
    </member>
    <member name="M:DriveWorks.OdbcExport.GetExportSummary">
      <summary>Retrieve the generation summary for the document in a specifications test mode.</summary>
    </member>
    <member name="M:DriveWorks.OdbcExport.RemoveRow(DriveWorks.DataExportRowDefinition)">
      <summary>Remove a row from the list of rows to be exported.</summary>
      <param name="row">The row to be removed.</param>
    </member>
    <member name="P:DriveWorks.OdbcExport.Columns">
      <summary>An array of all the columns that are used from the table.</summary>
    </member>
    <member name="P:DriveWorks.OdbcExport.CommonColumns">
      <summary>Gets A collection of common columns. Common columns are always the same for each row. Used to save calculation time.</summary>
    </member>
    <member name="P:DriveWorks.OdbcExport.ControlColumns">
      <summary>Gets a collection of control columns. Control columns depict where export row data is to match the existing data for updating/appending rows.</summary>
    </member>
    <member name="P:DriveWorks.OdbcExport.DatabaseName">
      <summary>Gets/Sets the name of the ODBC database to connect to.</summary>
    </member>
    <member name="P:DriveWorks.OdbcExport.ExportWhen">
      <summary>Gets/Sets when the data will be exported during the specification.</summary>
    </member>
    <member name="P:DriveWorks.OdbcExport.Password">
      <summary>Password that is used to connect to the database.</summary>
    </member>
    <member name="P:DriveWorks.OdbcExport.Rows">
      <summary>All of the new rows that will be update or append the table.</summary>
    </member>
    <member name="P:DriveWorks.OdbcExport.TableName">
      <summary>Gets/Sets the name of the table to connect to.</summary>
    </member>
    <member name="P:DriveWorks.OdbcExport.UserName">
      <summary>Username that is used to connect to the database.</summary>
    </member>
    <member name="M:DriveWorks.PreviewControlException.#ctor(System.String)">
      <summary>Creates a new instance of the .</summary>
      <param name="message">The message for this exception.</param>
    </member>
    <member name="M:DriveWorks.PreviewControlException.#ctor(System.String,System.Exception)">
      <summary>Creates a new instance of the .</summary>
      <param name="message">The message for this exception.</param>
      <param name="innerException">The inner error.</param>
    </member>
    <member name="M:DriveWorks.PreviewControlException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Creates new instance of the  via deserialization.</summary>
    </member>
    <member name="M:DriveWorks.PreviewExceptionEventArgs.#ctor(System.Exception)">
      <summary>Initializes a new instance of the  class.</summary>
      <param name="exception">The exception.</param>
    </member>
    <member name="P:DriveWorks.PreviewExceptionEventArgs.Exception">
      <summary>Gets the exception to which the event refers.</summary>
    </member>
    <member name="M:DriveWorks.PreviewResourceChangedEventArgs.#ctor(System.String)">
      <summary>Event args for when a 3D Preview's resource has been changed.</summary>
      <param name="resourceName">The name of 3D Preview's resource which has changed.</param>
    </member>
    <member name="P:DriveWorks.PreviewResourceChangedEventArgs.ResourceName">
      <summary>The name of the changed 3D Preview resource.</summary>
    </member>
    <member name="P:DriveWorks.PreviewServerResult.IsError">
      <summary>Gets/sets whether the problem is an error.</summary>
    </member>
    <member name="P:DriveWorks.PreviewServerResult.ProblemDetail">
      <summary>Gets/sets further information about a problem that has occurred during the preview.</summary>
    </member>
    <member name="P:DriveWorks.PreviewServerResult.ProblemMessage">
      <summary>Gets/sets a message to display to the user that describes a problem that has occurred during the preview.</summary>
    </member>
    <member name="P:DriveWorks.PreviewServerResult.Result">
      <summary>Gets/sets the result from the preview, containing path information to the previewed file.</summary>
    </member>
    <member name="M:DriveWorks.ProfilerSpecificationMonitor.#ctor(DriveWorks.Specification.SpecificationContext)">
      <summary>Creates a new instance of the  class.</summary>
      <param name="specification">The specification to monitor for the profiler.</param>
    </member>
    <member name="M:DriveWorks.ProfilerSpecificationMonitor.Initialize">
      <summary>Performs any initialization needed for monitoring this specification in the profiler.</summary>
    </member>
    <member name="P:DriveWorks.ProfilerSpecificationMonitor.Context">
      <summary>Gets the underlying specification being monitored by the profiler.</summary>
    </member>
    <member name="P:DriveWorks.ProfilerSpecificationMonitor.Profiler">
      <summary>Gets the profiler for the specification being monitored.</summary>
    </member>
    <member name="P:DriveWorks.ProfilerSpecificationMonitor.Project">
      <summary>Gets the project for the specification being monitored.</summary>
    </member>
    <member name="E:DriveWorks.ProfilerSpecificationMonitor.ChildSpecificationMonitoringStarted">
      <summary>Raised when the profiler should start monitoring a child specification of this specification.</summary>
    </member>
    <member name="E:DriveWorks.ProfilerSpecificationMonitor.HostedSpecificationMonitoringFinished">
      <summary>Raised when the profiler should stop monitoring a specification that is being hosted in this specification.</summary>
    </member>
    <member name="E:DriveWorks.ProfilerSpecificationMonitor.HostedSpecificationMonitoringStarted">
      <summary>Raised when the profiler should start monitoring a specification that is being hosted in this specification.</summary>
    </member>
    <member name="E:DriveWorks.ProfilerSpecificationMonitor.MonitoringFinished">
      <summary>Raised when the profiler should stop monitoring this specification.</summary>
    </member>
    <member name="E:DriveWorks.ProfilerSpecificationMonitor.ProfilingFinished">
      <summary>Raised when the monitored specification should no longer be profiled.</summary>
    </member>
    <member name="E:DriveWorks.ProfilerSpecificationMonitor.ProfilingStarted">
      <summary>Raised when the monitored specification should start being profiled.</summary>
    </member>
    <member name="E:DriveWorks.ProfilerSpecificationMonitor.ProjectChanged">
      <summary>Raised when the instance of the project for this specification has changed.</summary>
    </member>
    <member name="M:DriveWorks.Project.CreateLiveRule(System.String)">
      <summary>Gets a new LiveRule.</summary>
      <returns>The newly created LiveRule</returns>
    </member>
    <member name="M:DriveWorks.Project.CreateRenameProcess(System.String[],System.String[])">
      <summary>Creates a new process capable of swapping out one set of names in all the rules in the project, for another set of names.</summary>
      <returns>An instance of the  class which will perform the renaming.</returns>
      <param name="oldNames">The names which are being replaced.</param>
      <param name="newNames">The names which replace the old names.</param>
    </member>
    <member name="M:DriveWorks.Project.CreateSnapshot(System.String)">
      <summary>Creates a snapshot of the project.</summary>
      <param name="snapshotPath">The path to create the snapshot at.</param>
    </member>
    <member name="M:DriveWorks.Project.CreateTransactionFactory">
      <summary>Creates a transaction factory which can be used to create transactions for common project modification operations.</summary>
      <returns>An instance of the  class.</returns>
    </member>
    <member name="M:DriveWorks.Project.EvaluateRuleForNamedItem(System.String,System.String)">
      <summary>Evaluates the result of the specified rule formula as if it had been applied to a particular named item, if the  property
is <see cref="F:DriveWorks.ProjectRuleTechnology.Excel" /> then this is the same as <see cref="M:DriveWorks.Project.EvaluateRule(System.String)" />, else if it is
<see cref="F:DriveWorks.ProjectRuleTechnology.Titan" /> then the MyName function is affected.</summary>
      <returns>The result of executing the rule.</returns>
      <param name="qualifiedName">The fully qualified name of the item for which to evaluate the rule, e.g. "DWVariable1".</param>
      <param name="ruleFormula">The formula which defines the rule.</param>
    </member>
    <member name="M:DriveWorks.Project.EvaluateRules(System.String[])">
      <summary>Evaluates the result of the specified rule formulae.</summary>
      <returns>The result of executing the rules.</returns>
      <param name="ruleFormulae">The formulae the rules.</param>
    </member>
    <member name="M:DriveWorks.Project.EvaluateRulesForNamedItem(System.String,System.String[])">
      <summary>Evaluates the result of the specified rule formulae as if they had been applied to a particular named item, if the 
property is <see cref="F:DriveWorks.ProjectRuleTechnology.Excel" /> then this is the same as <see cref="M:DriveWorks.Project.EvaluateRule(System.String)" />, else if it is
<see cref="F:DriveWorks.ProjectRuleTechnology.Titan" /> then the MyName function is affected.</summary>
      <returns>The result of executing the rules.</returns>
      <param name="qualifiedName">The fully qualified name of the item for which to evaluate the rules, e.g. "DWVariable1".</param>
      <param name="ruleFormulae">The formulae which define the rules.</param>
    </member>
    <member name="M:DriveWorks.Project.GetNamedItem(System.String)">
      <summary>Attempts to find a matching named item in within DriveWorks, for example a calculation cell or variable.</summary>
      <returns>The associated named item or null if nothing is found.</returns>
      <param name="qualifiedName">The fully qualified name of the item to get, e.g. "DWCalcTableOne.ColumnOne2".</param>
    </member>
    <member name="M:DriveWorks.Project.GetRuleFromNamedItem(System.String)">
      <summary>Gets the rule for a named item within DriveWorks, for example a variable or constant.</summary>
      <returns>The rule associated with the named item.</returns>
      <param name="qualifiedName">The fully qualified name of the item to get, e.g. "DWVariable1".</param>
    </member>
    <member name="M:DriveWorks.Project.GetSuppressionContext">
      <summary>Suppresses calculation and returns a disposable suppression context which can be used to resume calculation.</summary>
    </member>
    <member name="M:DriveWorks.Project.NamesExist(System.String[])">
      <summary>Checks the names to ensure they don't already exist in the design master.</summary>
      <returns>True if one or more of the names exist in the design master, false if names do not exist in the design master.</returns>
      <param name="names">The names to check.</param>
    </member>
    <member name="M:DriveWorks.Project.Save">
      <summary>Saves the project.</summary>
    </member>
    <member name="M:DriveWorks.Project.SetNamedItemValues(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
      <summary>Sets the values of the specified named items.</summary>
      <returns>The names of any items that could not be driven.</returns>
      <param name="namesAndValues">The named items and values to set.</param>
    </member>
    <member name="M:DriveWorks.Project.SetService``1(``0)">
      <summary>Sets a service on the Project.</summary>
    </member>
    <member name="M:DriveWorks.Project.TryExecuteMacro(System.String,System.Object[])">
      <summary>Executes the named macro and updates any dependencies.</summary>
      <returns>True if the macro is found and executed, otherwise false.</returns>
      <param name="macroName">The name of the macro to execute.</param>
      <param name="arguments">The arguments to the macro to execute.</param>
    </member>
    <member name="M:DriveWorks.Project.TryExecuteMacroWithCaller(System.String,System.String,System.Object[])">
      <summary>Executes the named macro and updates any dependencies.</summary>
      <returns>True if the macro is found and executed, otherwise false.</returns>
      <param name="caller">The caller of the macro.</param>
      <param name="macroName">The name of the macro to execute.</param>
      <param name="arguments">The arguments to the macro to execute.</param>
    </member>
    <member name="M:DriveWorks.Project.TryExecuteMacroWithCallerAndPosition(System.String,System.String,System.Drawing.Point,System.Object[])">
      <summary>Executes the named macro and updates any dependencies.</summary>
      <returns>True if the macro is found and executed, otherwise false.</returns>
      <param name="caller">The caller of the macro.</param>
      <param name="macroName">The name of the macro to execute.</param>
      <param name="clickPosition">The position that the macro button was clicked at.</param>
      <param name="arguments">The arguments to the macro to execute.</param>
    </member>
    <member name="M:DriveWorks.Project.EvaluateRule(System.String)">
      <summary>Evaluates the result of the specified rule formula.</summary>
      <returns>The result of executing the rule.</returns>
      <param name="ruleFormula">The formula which defines the rule.</param>
    </member>
    <member name="M:DriveWorks.Project.EvaluateRule(System.String,System.String,System.Object)">
      <summary>Evaluates the result of the specified rule formula as if it had been applied to a particular named item.</summary>
      <returns>The result of executing the rule.</returns>
      <param name="ruleFormula">The formula which defines the rule.</param>
      <param name="qualifiedName">The fully qualified name of the item for which to evaluate the rule, e.g. "DWVariable1".</param>
      <param name="context">The context to use when evaluating the rule.</param>
    </member>
    <member name="M:DriveWorks.Project.EvaluateRule(System.String[],System.String,System.Object)">
      <summary>Evaluates the result of the specified rule formulae as if they had been applied to a particular named item.</summary>
      <returns>The result of executing the rules.</returns>
      <param name="ruleFormulae">The formulae which define the rules.</param>
      <param name="qualifiedName">The fully qualified name of the item for which to evaluate the rules, e.g. "DWVariable1".</param>
      <param name="context">The context to use when evaluating the rules.</param>
    </member>
    <member name="M:DriveWorks.Project.GetService``1">
      <summary>Gets a service from the project.</summary>
      <returns>A service of the requested type, or a null reference if not found.</returns>
      <typeparam name="TService">The type of service to request.</typeparam>
    </member>
    <member name="M:DriveWorks.Project.GetService(System.Type)">
      <summary>Gets a service from the project.</summary>
      <returns>A service of the requested type, or a null reference if not found.</returns>
      <param name="serviceType">The type of service to request.</param>
    </member>
    <member name="P:DriveWorks.Project.BaseDirectory">
      <summary>Gets the base directory which is the project directory for a project, and the specification metadata directory for a specification.</summary>
    </member>
    <member name="P:DriveWorks.Project.CalculationTables">
      <summary>Gets the object responsible for managing the project's calculation tables.</summary>
    </member>
    <member name="P:DriveWorks.Project.ComponentSets">
      <summary>Gets the object responsible for managing the project's component sets.</summary>
    </member>
    <member name="P:DriveWorks.Project.ComponentTasks">
      <summary>Gets the manager for s that are not specific to a single component.</summary>
    </member>
    <member name="P:DriveWorks.Project.ConnectionManager">
      <summary>Gets the connection manager for the project (and all other projects created by the same engine host).</summary>
    </member>
    <member name="P:DriveWorks.Project.Constants">
      <summary>Gets the object responsible for managing the project's constants.</summary>
    </member>
    <member name="P:DriveWorks.Project.DataTables">
      <summary>Gets the object responsible for managing the project's data tables.</summary>
    </member>
    <member name="P:DriveWorks.Project.Documents">
      <summary>Gets the object responsible for managing the project's documents.</summary>
    </member>
    <member name="P:DriveWorks.Project.Group">
      <summary>Gets the group from which the project was opened.</summary>
    </member>
    <member name="P:DriveWorks.Project.Id">
      <summary>Gets a GUID which uniquely identifies the project.</summary>
    </member>
    <member name="P:DriveWorks.Project.IsClosed">
      <summary>Determines whether the project is closed.</summary>
      <returns>True if the project is closed, otherwise false.</returns>
    </member>
    <member name="P:DriveWorks.Project.IsOpen">
      <summary>Gets whether the project is open or not.</summary>
      <returns>True if the project is open, otherwise false.</returns>
    </member>
    <member name="P:DriveWorks.Project.LocalizationHelper">
      <summary>Gets a rule localization helper which is valid for the open project.</summary>
    </member>
    <member name="P:DriveWorks.Project.Messages">
      <summary>Gets the object responsible for managing the project's messages which are used in form controls to give interactive feedback to users.</summary>
    </member>
    <member name="P:DriveWorks.Project.Metadata">
      <summary>Gets access to the sections in the project metadata file.</summary>
    </member>
    <member name="P:DriveWorks.Project.Name">
      <summary>Gets the name of the project.</summary>
    </member>
    <member name="P:DriveWorks.Project.Navigation">
      <summary>Gets the object responsible for managing the project's form navigation information.</summary>
    </member>
    <member name="P:DriveWorks.Project.OriginalVersion">
      <summary>Gets the version of the project when it was loaded from file. This is not the current version, as it could have been upgraded since it was loaded.</summary>
    </member>
    <member name="P:DriveWorks.Project.Profiler">
      <summary>Gets the profiler for the project.</summary>
    </member>
    <member name="P:DriveWorks.Project.ProjectFilePath">
      <summary>Gets the full path to the project file.</summary>
    </member>
    <member name="P:DriveWorks.Project.Properties">
      <summary>Gets access to specification properties for the project.</summary>
    </member>
    <member name="P:DriveWorks.Project.RuleTechnology">
      <summary>Gets the rule technology used in this Project.</summary>
    </member>
    <member name="P:DriveWorks.Project.SpecialVariables">
      <summary>Gets the object responsible for managing the project's special variables.</summary>
    </member>
    <member name="P:DriveWorks.Project.SpecificationContext">
      <summary>Gets the active specification context if the project has been opened as part of a specification.</summary>
      <returns>The active specification context, or a null reference (Nothing in Visual Basic) if the project has not been opened as part of a specification.</returns>
    </member>
    <member name="P:DriveWorks.Project.SpecificationFlow">
      <summary>Gets the specification-flow which defines the process which is followed for a specification created from this project.</summary>
    </member>
    <member name="P:DriveWorks.Project.SpecificationMacroCategories">
      <summary>Gets the specification macro categories defined in the project.</summary>
    </member>
    <member name="P:DriveWorks.Project.SpecificationMacros">
      <summary>Gets the specification macros defined in the project.</summary>
    </member>
    <member name="P:DriveWorks.Project.SpecificationSettings">
      <summary>Gets access to settings which affect specifications based on the project.</summary>
    </member>
    <member name="P:DriveWorks.Project.Utility">
      <summary>Gets access to utility methods for the project.</summary>
    </member>
    <member name="P:DriveWorks.Project.VariableCategories">
      <summary>Gets the project's variable categories.</summary>
    </member>
    <member name="P:DriveWorks.Project.Variables">
      <summary>Gets the project's variables.</summary>
    </member>
    <member name="P:DriveWorks.Project.Version">
      <summary>Gets the current version of the project.</summary>
    </member>
    <member name="E:DriveWorks.Project.Saved">
      <summary>Raised when the project saves successfully.</summary>
    </member>
    <member name="E:DriveWorks.Project.SnapshotCreated">
      <summary>Raised when a snapshot of the project is created successfully.</summary>
    </member>
    <member name="M:DriveWorks.ProjectCalculationTable.GetName(System.String)">
      <summary>Gets the invariant name of the table from a display name.</summary>
      <returns>The converted name.</returns>
      <param name="displayName">The display name to convert.</param>
    </member>
    <member name="M:DriveWorks.ProjectCalculationTable.GetTableReferenceName(System.String)">
      <summary>Converts a table display name to a reference name (how it would be used in rules).</summary>
      <returns>The converted name.</returns>
      <param name="displayName">The name to convert.</param>
    </member>
    <member name="M:DriveWorks.ProjectCalculationTable.RemoveRow(System.Int32)">
      <summary>Removes the specified row from the calculation table.</summary>
      <param name="rowIndex">The index of the row to remove (index does not include the header row I.e 0 is the first data row).</param>
    </member>
    <member name="P:DriveWorks.ProjectCalculationTable.Columns">
      <summary>Gets the columns used in the table.</summary>
    </member>
    <member name="P:DriveWorks.ProjectCalculationTable.DisplayName">
      <summary>Gets the display name of the table.</summary>
    </member>
    <member name="P:DriveWorks.ProjectCalculationTable.Name">
      <summary>Gets the name of the table.</summary>
    </member>
    <member name="P:DriveWorks.ProjectCalculationTable.RowCount">
      <summary>Gets and sets the number of rows in the table</summary>
    </member>
    <member name="P:DriveWorks.ProjectCalculationTable.Value(System.Int32,System.Int32)">
      <summary>Gets a cell's value.</summary>
      <param name="columnIndex">Zero based column index of the cell to get the value of.</param>
      <param name="rowIndex">Zero based row index of the cell to get the value of.</param>
    </member>
    <member name="E:DriveWorks.ProjectCalculationTable.CellValueChanged">
      <summary>Raised when a cell's value is changed.</summary>
    </member>
    <member name="E:DriveWorks.ProjectCalculationTable.Changed">
      <summary>Raised when the table changes.</summary>
    </member>
    <member name="E:DriveWorks.ProjectCalculationTable.Deleted">
      <summary>Raised when this table is deleted.</summary>
    </member>
    <member name="E:DriveWorks.ProjectCalculationTable.PropertyChanged">
      <summary>Raised when a property is changed, such as name or row count.</summary>
    </member>
    <member name="M:DriveWorks.ProjectCalculationTableColumn.GetCellReferenceName(System.String,System.Int32)">
      <summary>Converts a column display name to a rule reference name that can be used within a table only.</summary>
      <returns>The generated name.</returns>
      <param name="columnName">The name of the column.</param>
      <param name="rowIndex">The row index of the cell - zero based.</param>
    </member>
    <member name="M:DriveWorks.ProjectCalculationTableColumn.GetContext(System.Int32)">
      <summary>Gets a rule context for a particular cell. This is useful when evaluating common with the context of a specific cell.</summary>
      <returns>The cell's context provider, whether it had a specific or rule or not.</returns>
      <param name="rowIndex">The index of the row to get the context of (0 is the first row).</param>
    </member>
    <member name="M:DriveWorks.ProjectCalculationTableColumn.GetEnumerator">
      <summary>Gets an IEnumerator that will yield all explicitly set cell rules.</summary>
    </member>
    <member name="M:DriveWorks.ProjectCalculationTableColumn.GetFullCellReferenceName(System.String,System.String,System.Int32)">
      <summary>Gets a full rule reference name (including the table name) to the specified cell.</summary>
      <returns>The generated name.</returns>
      <param name="tableName">The name of the table to use.</param>
      <param name="columnName">The column name to use.</param>
      <param name="rowIndex">The cell row index.</param>
    </member>
    <member name="M:DriveWorks.ProjectCalculationTableColumn.GetFullRuleId(System.Int32)">
      <summary>Gets a rule reference for the specified cell.</summary>
      <returns>The fully qualified rule reference name.</returns>
      <param name="rowIndex">The row index of the cell to get the reference of.</param>
    </member>
    <member name="M:DriveWorks.ProjectCalculationTableColumn.GetName(System.String)">
      <summary>Converts a column display name to a column name.</summary>
      <returns>The converted name.</returns>
      <param name="displayName">The display name to convert.</param>
    </member>
    <member name="M:DriveWorks.ProjectCalculationTableColumn.GetRule(System.Int32,System.Boolean)">
      <summary>Gets an explicit rule from this column for the specified row.</summary>
      <returns>The matching cell item if it exists, or null when create is false.</returns>
      <param name="rowIndex">The index of the row to get, where 0 is the first data row.</param>
      <param name="create">Whether or not to create the cell, if it doesn't exist.</param>
    </member>
    <member name="M:DriveWorks.ProjectCalculationTableColumn.GetRules">
      <summary>Get's all cell rules that re explicitly set in the column.</summary>
    </member>
    <member name="M:DriveWorks.ProjectCalculationTableColumn.RemoveRule(System.Int32)">
      <summary>Clears a cell rule at the specified index, causing it to use the column's common rule.</summary>
      <returns>True if a rule was cleared.</returns>
      <param name="rowIndex">The row index of the cell to clear the rule of (0 being the first data row).</param>
    </member>
    <member name="P:DriveWorks.ProjectCalculationTableColumn.CommonRule">
      <summary>The common rule that will be used for all cells that don't have an explicit rule set on them.</summary>
    </member>
    <member name="P:DriveWorks.ProjectCalculationTableColumn.DisplayName">
      <summary>The display name of the column.</summary>
    </member>
    <member name="P:DriveWorks.ProjectCalculationTableColumn.Index">
      <summary>The zero based index of the this column.</summary>
    </member>
    <member name="P:DriveWorks.ProjectCalculationTableColumn.Name">
      <summary>The name of the column.</summary>
    </member>
    <member name="P:DriveWorks.ProjectCalculationTableColumn.Type">
      <summary>The type of the column.</summary>
    </member>
    <member name="E:DriveWorks.ProjectCalculationTableColumn.CollectionChanged">
      <summary>Raised when the collection of explicit cell rules in this column changes.</summary>
    </member>
    <member name="E:DriveWorks.ProjectCalculationTableColumn.PropertyChanged">
      <summary>Raised when a property is changed, such as name or type.</summary>
    </member>
    <member name="M:DriveWorks.ProjectCalculationTableColumns.Add(System.String,DriveWorks.ProjectCalculationTableColumnType)">
      <summary>Adds a new column to this collection of columns.</summary>
      <returns>The created column.</returns>
      <param name="displayName">The display name of this column (can contain spaces).</param>
      <param name="type">The type of column to create.</param>
    </member>
    <member name="M:DriveWorks.ProjectCalculationTableColumns.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
    </member>
    <member name="M:DriveWorks.ProjectCalculationTableColumns.Move(System.Int32,System.Int32)">
      <summary>Moves a column from an index to the specified new index.</summary>
      <param name="columnIndex">The index of the column to move.</param>
      <param name="newIndex">The new index to give the column.</param>
    </member>
    <member name="M:DriveWorks.ProjectCalculationTableColumns.Remove(DriveWorks.ProjectCalculationTableColumn)">
      <summary>Removes a column the collection of columns.</summary>
      <returns>True if the column is removed.</returns>
      <param name="column">The column to remove.</param>
    </member>
    <member name="M:DriveWorks.ProjectCalculationTableColumns.RenameColumn(System.String,System.String)">
      <summary>Renames a column.</summary>
      <param name="columnName">The name of the column to rename.</param>
      <param name="newName">The new name to give the column.</param>
    </member>
    <member name="M:DriveWorks.ProjectCalculationTableColumns.TryGet(System.String,DriveWorks.ProjectCalculationTableColumn@)">
      <summary>Attempts to find a matching column based on the name specified.</summary>
      <returns>True if the column is found.</returns>
      <param name="columnName">Name of the column to find.</param>
      <param name="column">The resulting column or null.</param>
    </member>
    <member name="P:DriveWorks.ProjectCalculationTableColumns.Column(System.Int32)">
      <summary>Gets a column at the specified index.</summary>
      <param name="index">The index of the column to fetch.</param>
    </member>
    <member name="P:DriveWorks.ProjectCalculationTableColumns.Count">
      <summary>Gets the number of columns in this collection.</summary>
    </member>
    <member name="P:DriveWorks.ProjectCalculationTableColumns.Column(System.Int32)">
      <summary>Gets a column at the specified index.</summary>
      <param name="index">The index of the column to fetch.</param>
    </member>
    <member name="P:DriveWorks.ProjectCalculationTableColumns.Column(System.String)">
      <summary>Gets a column with the specified column name.</summary>
      <param name="name">The name of the column to get.</param>
    </member>
    <member name="E:DriveWorks.ProjectCalculationTableColumns.CollectionChanged">
      <summary>Raise whenever a column is created, deleted or moved (this collection changes).</summary>
    </member>
    <member name="E:DriveWorks.ProjectCalculationTableColumns.PropertyChanged">
      <summary>Raised whenever a simple property is changed.</summary>
    </member>
    <member name="M:DriveWorks.ProjectCalculationTableRule.GetVersionHistory">
      <summary>Gets all revisions for this rule.</summary>
    </member>
    <member name="M:DriveWorks.ProjectCalculationTableRule.SetRuleAndComment(System.String,System.String)">
      <summary>Sets both and rule and comment in one rule revision.</summary>
      <param name="newRule">The formula to give this rule.</param>
      <param name="newComment">The comment to give this rule.</param>
    </member>
    <member name="P:DriveWorks.ProjectCalculationTableRule.Column">
      <summary>Gets the column for this rule.</summary>
    </member>
    <member name="P:DriveWorks.ProjectCalculationTableRule.Comment">
      <summary>Gets the comment of this rule.</summary>
    </member>
    <member name="P:DriveWorks.ProjectCalculationTableRule.Formula">
      <summary>Gets the formula of this rule</summary>
    </member>
    <member name="P:DriveWorks.ProjectCalculationTableRule.Name">
      <summary>Gets the name of this rule.</summary>
    </member>
    <member name="P:DriveWorks.ProjectCalculationTableRule.RowIndex">
      <summary>Gets the row index of this rule.</summary>
    </member>
    <member name="E:DriveWorks.ProjectCalculationTableRule.PropertyChanged">
      <summary>Raised whenever a simple property on this object changes.</summary>
    </member>
    <member name="M:DriveWorks.ProjectCalculationTables.Add(System.String)">
      <summary>Creates a new table in this collection.</summary>
      <returns>The created table.</returns>
      <param name="displayName">The name of the table to create.</param>
    </member>
    <member name="M:DriveWorks.ProjectCalculationTables.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
    </member>
    <member name="M:DriveWorks.ProjectCalculationTables.Remove(System.String)">
      <summary>Removes a matching table from this collection.</summary>
      <returns>True if the table was removed.</returns>
      <param name="name">The name of the table to remove.</param>
    </member>
    <member name="M:DriveWorks.ProjectCalculationTables.Rename(System.String,System.String)">
      <summary>Renames a table.</summary>
      <param name="tableName">The name of the table to change the name of.</param>
      <param name="newTableName">The new name to give the table.</param>
    </member>
    <member name="M:DriveWorks.ProjectCalculationTables.TryGetTable(System.String,DriveWorks.ProjectCalculationTable@)">
      <summary>Attempts to get a table with the specified name.</summary>
      <returns>True if an instance is found.</returns>
      <param name="name">The name (or display name) of the table to get.</param>
      <param name="table">The instance of the found table, or null if nothing is found.</param>
    </member>
    <member name="P:DriveWorks.ProjectCalculationTables.Count">
      <summary>Gets the number of tables in this collection.</summary>
    </member>
    <member name="P:DriveWorks.ProjectCalculationTables.Table(System.Int32)">
      <summary>Gets a table at the specified index.</summary>
      <param name="index">The index of the table to get.</param>
    </member>
    <member name="P:DriveWorks.ProjectCalculationTables.Table(System.Int32)">
      <summary>Gets a table at the specified index.</summary>
      <param name="index">The index of the table to get.</param>
    </member>
    <member name="P:DriveWorks.ProjectCalculationTables.Table(System.String)">
      <summary>Gets a table with the specified name.</summary>
      <param name="name">The name of the table to get.</param>
    </member>
    <member name="E:DriveWorks.ProjectCalculationTables.CollectionChanged">
      <summary>Raised when the collection of tables changes.</summary>
    </member>
    <member name="E:DriveWorks.ProjectCalculationTables.PropertyChanged">
      <summary>Raised when a simple property changes on the collection.</summary>
    </member>
    <member name="M:DriveWorks.ProjectChildSpecificationDef.AddProjectDefinition(System.String)">
      <summary>Creates a new  instance and adds it to this <see cref="T:DriveWorks.ProjectChildSpecificationDef" />.</summary>
      <param name="projectName">The name of the project that this definition will represent.</param>
    </member>
    <member name="M:DriveWorks.ProjectChildSpecificationDef.DeleteItem(System.Int32)">
      <summary>Removes a item from the item list.</summary>
      <param name="itemIndex">Index of the row to remove.</param>
    </member>
    <member name="M:DriveWorks.ProjectChildSpecificationDef.EditItem(System.Int32,System.String,System.Object[])">
      <summary>Edits an existing item in this item list.</summary>
      <param name="itemIndex">The row index of the item to edit.</param>
      <param name="specificationName">The new name of the specification that was edited.</param>
      <param name="values">New values for the item.</param>
    </member>
    <member name="M:DriveWorks.ProjectChildSpecificationDef.GetChildSpecificationDetails(System.String)">
      <summary>Gets the specification details for the specification name provided.</summary>
      <returns>The found specification Details or a null if not found.</returns>
      <param name="specificationName">The name of the specification to get the details of.</param>
    </member>
    <member name="M:DriveWorks.ProjectChildSpecificationDef.GetData">
      <summary>Gets information about the child specifications that have been added to the current project or specification.</summary>
      <returns>An instance of the  type which has been populated with information about the child specifications. The data table consists of one row
for each specification, and is populated with the data for each column in the <see cref="P:DriveWorks.ProjectChildSpecificationDef.VariableColumns" /> property, as well as
two additional columns called Name and Type which identify the child specification name, and the project from which the specification was created.</returns>
    </member>
    <member name="M:DriveWorks.ProjectChildSpecificationDef.GetItem(System.Int32)">
      <summary>Gets the item at the specified index.</summary>
      <param name="itemIndex">The index of the item to retrieve.</param>
    </member>
    <member name="M:DriveWorks.ProjectChildSpecificationDef.GetItemCount">
      <summary>Gets the number of items that have been added to the child specification list.</summary>
    </member>
    <member name="M:DriveWorks.ProjectChildSpecificationDef.GetItems">
      <summary>Gets an collection of all items in this child specification list.</summary>
    </member>
    <member name="M:DriveWorks.ProjectChildSpecificationDef.MoveItemDown(System.Int32)">
      <summary>Moves an item down in the list of items.</summary>
      <param name="itemIndex">The index of the item to move.</param>
    </member>
    <member name="M:DriveWorks.ProjectChildSpecificationDef.MoveItemUp(System.Int32)">
      <summary>Moves an item up in the list of items.</summary>
      <param name="itemIndex">The Index of the item to move.</param>
    </member>
    <member name="M:DriveWorks.ProjectChildSpecificationDef.OpenProjectForQuery(DriveWorks.ProjectDetails)">
      <summary>Opens the specified project so that it's constants and variable information can be queried, and returns it as an  object.</summary>
      <returns>An instance of the  class.</returns>
      <param name="projectDetails">The details which indicate the project to open.</param>
    </member>
    <member name="M:DriveWorks.ProjectChildSpecificationDef.RemoveProjectDefinition(DriveWorks.ProjectChildSpecificationProjectDef)">
      <summary>Removes a project definition from the item list.</summary>
      <param name="ChildSpecProjectDefinition">The project definition to remove from the child specification list.</param>
    </member>
    <member name="M:DriveWorks.ProjectChildSpecificationDef.TryGetProjectDefinition(System.String,DriveWorks.ProjectChildSpecificationProjectDef@)">
      <summary>Gets the project definition for a specific child specification project.</summary>
    </member>
    <member name="M:DriveWorks.ProjectChildSpecificationDef.AddItem(System.String,DriveWorks.ProjectChildSpecificationProjectDef,System.Object[])">
      <summary>Adds a new item to this item list.</summary>
      <param name="specificationName">The name of the specification to add.</param>
      <param name="projectDef">The type of item to create.</param>
      <param name="values">The values to set for this item.</param>
    </member>
    <member name="P:DriveWorks.ProjectChildSpecificationDef.Name">
      <summary>Gets the name of the child specification definition.</summary>
    </member>
    <member name="P:DriveWorks.ProjectChildSpecificationDef.ProjectDefinitions">
      <summary>Gets the definition of each project which can provide the basis of a child specification for the child specification definition.</summary>
    </member>
    <member name="P:DriveWorks.ProjectChildSpecificationDef.SynchronizeEmbeddedSpecifications">
      <summary>Returns whether or not embedded specifications will be continuously updated as values change in both the child and parent specification.</summary>
    </member>
    <member name="P:DriveWorks.ProjectChildSpecificationDef.VariableColumns">
      <summary>Gets the variable columns for the child specification definition.</summary>
      <returns>An instance of the  type which can be used to query, add, remove, and re-order columns.</returns>
    </member>
    <member name="E:DriveWorks.ProjectChildSpecificationDef.ItemIndexChanged">
      <summary>Raised when any item is moved up or down.</summary>
    </member>
    <member name="E:DriveWorks.ProjectChildSpecificationDef.ItemsChanged">
      <summary>Raised when any items have been added/deleted/edited/moved.</summary>
    </member>
    <member name="E:DriveWorks.ProjectChildSpecificationDef.Renamed">
      <summary>Raised when  has changed.</summary>
    </member>
    <member name="P:DriveWorks.ProjectChildSpecificationInputDef.Comment">
      <summary>Gets/sets the rule comment.</summary>
    </member>
    <member name="P:DriveWorks.ProjectChildSpecificationInputDef.Rule">
      <summary>Gets/sets the rule which defines the value which will be driven in to the target constant.</summary>
    </member>
    <member name="P:DriveWorks.ProjectChildSpecificationInputDef.TargetConstantName">
      <summary>Gets the name of the constant which will be driven in the child specification.</summary>
    </member>
    <member name="P:DriveWorks.ProjectChildSpecificationOutputDef.IsAutoMapped">
      <summary>Gets/sets whether we should auto map this output to a specification property.</summary>
    </member>
    <member name="P:DriveWorks.ProjectChildSpecificationOutputDef.LocalColumnName">
      <summary>Gets the name of the column in the subproject control which will receive the value from the child specification.</summary>
    </member>
    <member name="P:DriveWorks.ProjectChildSpecificationOutputDef.OutputDisplayName">
      <summary>Gets the display name of the output to retrieve from the child specification.</summary>
    </member>
    <member name="P:DriveWorks.ProjectChildSpecificationOutputDef.OutputName">
      <summary>Gets/sets the name of the output to retrieve from the child specification.</summary>
    </member>
    <member name="P:DriveWorks.ProjectChildSpecificationOutputDef.OutputType">
      <summary>Gets the type of output to retrieve from the child specification.</summary>
    </member>
    <member name="M:DriveWorks.ProjectChildSpecificationProjectDef.AddAutoMappedOutput(System.String)">
      <summary>Adds a new output binding to this project definition. The binding will attempt to auto map to a specification property with the same name as the column to
bind.</summary>
      <returns>The child specification output.</returns>
      <param name="columnName">The name of the column to bind.</param>
    </member>
    <member name="M:DriveWorks.ProjectChildSpecificationProjectDef.AddInput(System.String)">
      <summary>Adds a new input binging to this project definition.</summary>
      <param name="constantName">The constant name to bind.</param>
    </member>
    <member name="M:DriveWorks.ProjectChildSpecificationProjectDef.RemoveInput(DriveWorks.ProjectChildSpecificationInputDef)">
      <summary>Removes an input from this collection of inputs.</summary>
      <param name="input">The input to remove.</param>
    </member>
    <member name="M:DriveWorks.ProjectChildSpecificationProjectDef.RemoveOutput(DriveWorks.ProjectChildSpecificationOutputDef)">
      <summary>Removes an output from this list of outputs.</summary>
      <param name="output">The output binding to remove.</param>
    </member>
    <member name="M:DriveWorks.ProjectChildSpecificationProjectDef.TryGetInput(System.String,DriveWorks.ProjectChildSpecificationInputDef@)">
      <summary>Attempts to get a specified input from the given constant name.</summary>
      <returns>True if the input was found.</returns>
      <param name="constantName">Name of the constant to get the input for.</param>
      <param name="input">The input to be set.</param>
    </member>
    <member name="M:DriveWorks.ProjectChildSpecificationProjectDef.TryGetOutput(System.String,DriveWorks.ProjectChildSpecificationOutputDef@)">
      <summary>Attempts to get a specified output from the given column name.</summary>
      <returns>True if the output was found.</returns>
      <param name="columnName">Name of the item column to get the output for.</param>
      <param name="output">The output to be set.</param>
    </member>
    <member name="M:DriveWorks.ProjectChildSpecificationProjectDef.AddOutput(System.String,System.String)">
      <summary>Adds a new output binging to this project definition.</summary>
      <param name="localColumnName">The local column name to bind.</param>
      <param name="remoteVariableName">The Name of the variable to bind the column to.</param>
    </member>
    <member name="M:DriveWorks.ProjectChildSpecificationProjectDef.AddOutput(System.String,System.String,DriveWorks.ProjectChildSpecificationOutputType)">
      <summary>Adds a new output binding to this project definition.</summary>
      <returns>The child specification output.</returns>
      <param name="localColumnName">The local column name to bind.</param>
      <param name="outputDisplayName">The display name of the output to which the column will be bound.</param>
      <param name="outputType">The type of output.</param>
    </member>
    <member name="M:DriveWorks.ProjectChildSpecificationProjectDef.AddOutput(System.String,System.String,DriveWorks.ProjectChildSpecificationOutputType,System.Boolean)">
      <summary>Adds a new output binding to this project definition.</summary>
      <returns>The child specification output.</returns>
      <param name="localColumnName">The local column name to bind.</param>
      <param name="outputDisplayName">The display name of the output to which the column will be bound. This could be an empty string if it is to be auto mapped based on the column name.</param>
      <param name="outputType">The type of output.</param>
      <param name="autoMap">Whether this column should be mapped automatically to a specification property with the same name.</param>
    </member>
    <member name="P:DriveWorks.ProjectChildSpecificationProjectDef.Inputs">
      <summary>Gets the input mappings that have been defined for the project represented by the project definitione.</summary>
    </member>
    <member name="P:DriveWorks.ProjectChildSpecificationProjectDef.Outputs">
      <summary>Gets the output mappings that have been defined for the project represented by the project definition.</summary>
    </member>
    <member name="P:DriveWorks.ProjectChildSpecificationProjectDef.ProjectName">
      <summary>Gets the name of the project represented by the project definition.</summary>
    </member>
    <member name="M:DriveWorks.ProjectClosingEventArgs.#ctor(System.Boolean)">
      <summary>Creates a new instance of the  class.</summary>
      <param name="isSaving">The value to determine if the project is being saved or not.</param>
    </member>
    <member name="P:DriveWorks.ProjectClosingEventArgs.IsSaving">
      <summary>Gets whether the project is to be saved or not.</summary>
    </member>
    <member name="M:DriveWorks.ProjectComponentManager.#ctor(System.String)">
      <summary>Creates a new instance of the  class.</summary>
      <param name="projectLocation">Location of the project file to manage.</param>
    </member>
    <member name="M:DriveWorks.ProjectComponentManager.Dispose">
      <summary>Cleans up the resources used by the project component manager.</summary>
    </member>
    <member name="M:DriveWorks.ProjectComponentManager.GetProjectCapturedComponentIds">
      <summary>Gets a collection of captured component Ids, as specified in the project file.</summary>
    </member>
    <member name="M:DriveWorks.ProjectComponentManager.UpdateProjectComponentIds(System.Collections.Generic.IDictionary{System.Guid,System.Guid})">
      <summary>Will update the project file with the given component identifiers.</summary>
      <param name="remappedComponentIds">Collection of original component identifiers to new identifiers.</param>
    </member>
    <member name="P:DriveWorks.ProjectComponentManager.ProjectLocation">
      <summary>Gets the location of the project file that is being used by this manager.</summary>
    </member>
    <member name="M:DriveWorks.ProjectComponentSet.LoadComponent">
      <summary>Loads the component from the component file.</summary>
      <exception caption="" cref="T:System.NotSupportedException">No implementation of the component type was registered.</exception>
      <returns>False if the component could not be loaded because the underlying capture data has been removed, i.e. the component has been uncaptured.</returns>
    </member>
    <member name="M:DriveWorks.ProjectComponentSet.Save">
      <summary>Saves the component set.</summary>
    </member>
    <member name="M:DriveWorks.ProjectComponentSet.UnloadComponent">
      <summary>Unloads the component if one is loaded, any unsaved changes are lost.</summary>
    </member>
    <member name="P:DriveWorks.ProjectComponentSet.Component">
      <summary>Gets the root component in the component set.</summary>
    </member>
    <member name="P:DriveWorks.ProjectComponentSet.Index">
      <summary>Gets the index of the component set.</summary>
    </member>
    <member name="P:DriveWorks.ProjectComponentSet.IsLoaded">
      <summary>Determines whether the component has been loaded.</summary>
    </member>
    <member name="P:DriveWorks.ProjectComponentSet.Name">
      <summary>Gets/sets the name of the component set.</summary>
    </member>
    <member name="P:DriveWorks.ProjectComponentSet.Rule">
      <summary>Gets the component rule.</summary>
    </member>
    <member name="P:DriveWorks.ProjectComponentSet.Tags">
      <summary>Provides access to the component tags rule information.</summary>
    </member>
    <member name="P:DriveWorks.ProjectComponentSet.Type">
      <summary>Gets the type of component which is contained by the component set.</summary>
    </member>
    <member name="E:DriveWorks.ProjectComponentSet.IsLoadedChanged">
      <summary>Raised when the value of the  property changes.</summary>
    </member>
    <member name="E:DriveWorks.ProjectComponentSet.NameChanged">
      <summary>Raised when the component set's name changes.</summary>
    </member>
    <member name="E:DriveWorks.ProjectComponentSet.Removed">
      <summary>Raised when the component set is removed.</summary>
    </member>
    <member name="M:DriveWorks.ProjectComponentSetEventArgs.#ctor(DriveWorks.ProjectComponentSet)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="componentSet">The component set that was changed.</param>
    </member>
    <member name="P:DriveWorks.ProjectComponentSetEventArgs.ComponentSet">
      <summary>Gets the component set that was changed.</summary>
    </member>
    <member name="P:DriveWorks.ProjectComponentSetNameChangedEventArgs.ComponentSet">
      <summary>Gets the component set that was changed.</summary>
    </member>
    <member name="P:DriveWorks.ProjectComponentSetNameChangedEventArgs.NewName">
      <summary>Gets the new name of the component set.</summary>
    </member>
    <member name="P:DriveWorks.ProjectComponentSetNameChangedEventArgs.OldName">
      <summary>Gets the old name of the component set.</summary>
    </member>
    <member name="M:DriveWorks.ProjectComponentSets.Add(System.String,System.Guid)">
      <summary>Adds a new project component set.</summary>
      <returns>The new project component set.</returns>
      <param name="name">The name to give to the component set, if a null reference is specified, the file name of the base component (with an optional numeric suffix if required) will
be used.</param>
      <param name="capturedComponentId">The identifier of the captured component on which to base the component set.</param>
    </member>
    <member name="M:DriveWorks.ProjectComponentSets.Find(System.String)">
      <summary>Finds a component set with the given name.</summary>
      <returns>A component set, or a null reference if no match is found.</returns>
      <param name="componentSetName">The name of the component set to find.</param>
    </member>
    <member name="M:DriveWorks.ProjectComponentSets.GetEnumerator">
      <summary>Gets an enumerator which can enumerate over the collection.</summary>
    </member>
    <member name="M:DriveWorks.ProjectComponentSets.Insert(System.String,System.Guid,System.Int32)">
      <summary>Inserts a new project component set at the specified index.</summary>
      <returns>The new project component set.</returns>
      <param name="name">The name to give to the component set, if a null reference is specified, the file name of the base component (with an optional numeric suffix if required) will
be used.</param>
      <param name="capturedComponentId">The identifier of the captured component on which to base the component set.</param>
      <param name="index">The index at which to insert the new component set.</param>
    </member>
    <member name="M:DriveWorks.ProjectComponentSets.Move(System.Int32,System.Int32)">
      <summary>Moves the component set at the given index to the specified new index.</summary>
      <param name="oldIndex">The index of the component set to move.</param>
      <param name="newIndex">The new index of the component set.</param>
    </member>
    <member name="M:DriveWorks.ProjectComponentSets.Remove(DriveWorks.ProjectComponentSet)">
      <summary>Removes the given component set.</summary>
      <returns>True if the component set was found and removed.</returns>
      <param name="componentSet">The component set to remove.</param>
    </member>
    <member name="M:DriveWorks.ProjectComponentSets.RemoveAt(System.Int32)">
      <summary>Removes the component set at the given index.</summary>
      <param name="index">The index of component set to remove.</param>
    </member>
    <member name="P:DriveWorks.ProjectComponentSets.Count">
      <summary>Gets the number of component sets in the project.</summary>
    </member>
    <member name="P:DriveWorks.ProjectComponentSets.Item(System.Int32)">
      <summary>Gets the item at the specified index.</summary>
      <returns>The specified item.</returns>
      <param name="index">The index of the item to retrieve.</param>
    </member>
    <member name="E:DriveWorks.ProjectComponentSets.ComponentSetAdded">
      <summary>Raised when a new component set is added.</summary>
    </member>
    <member name="E:DriveWorks.ProjectComponentSets.ComponentSetIsLoadedChanged">
      <summary>Raised when a component set is loaded or unloaded.</summary>
    </member>
    <member name="E:DriveWorks.ProjectComponentSets.ComponentSetMoved">
      <summary>Raised when a component set is moved.</summary>
    </member>
    <member name="E:DriveWorks.ProjectComponentSets.ComponentSetNameChanged">
      <summary>Raised when a component set's name changes.</summary>
    </member>
    <member name="E:DriveWorks.ProjectComponentSets.ComponentSetRemoved">
      <summary>Raised when a component set is removed.</summary>
    </member>
    <member name="M:DriveWorks.ProjectComponentTasks.TryGetAccessor(System.String,DriveWorks.Components.Tasks.ComponentTaskAccessor@)">
      <summary>Attempt to get the accessor associated with the specified key.</summary>
      <returns>True if the accessor was successfully retrieved.</returns>
      <param name="key">The unique identifier of the accessor to retrieve.</param>
      <param name="accessor">The accessor if it was found.</param>
    </member>
    <member name="P:DriveWorks.ProjectComponentTasks.Item(System.String)">
      <summary>Gets the collection with the given key.</summary>
      <returns>The accessor that provides access to the collection associated with the specified key, or a null reference (Nothing in VB) if the accessor does not exist.</returns>
      <param name="key">The unique identifier of the collection to retrieve.</param>
    </member>
    <member name="M:DriveWorks.ProjectConstant.Delete">
      <summary>Deletes the constant.</summary>
    </member>
    <member name="M:DriveWorks.ProjectConstant.DeleteCore">
      <summary>Performs the work of deleting the constant.</summary>
    </member>
    <member name="P:DriveWorks.ProjectConstant.Category">
      <summary>Gets/sets the name of the constant category.</summary>
    </member>
    <member name="P:DriveWorks.ProjectConstant.Constants">
      <summary>Gets the constants collection.</summary>
    </member>
    <member name="P:DriveWorks.ProjectConstant.DisplayName">
      <summary>Gets/sets the name of the constant.</summary>
    </member>
    <member name="P:DriveWorks.ProjectConstant.IsDeleted">
      <summary>Gets whether the constant has been deleted.</summary>
    </member>
    <member name="P:DriveWorks.ProjectConstant.Name">
      <summary>Gets the name of the constant in a form which can be used in rules.</summary>
    </member>
    <member name="P:DriveWorks.ProjectConstant.Project">
      <summary>Gets the project to which the constant belongs.</summary>
    </member>
    <member name="P:DriveWorks.ProjectConstant.Text">
      <summary>Gets a textual representation of the current value of the constant.</summary>
    </member>
    <member name="P:DriveWorks.ProjectConstant.Value">
      <summary>Gets/sets the current value of the constant.</summary>
    </member>
    <member name="E:DriveWorks.ProjectConstant.CategoryNameChanged">
      <summary>Raised when the category name is changed.</summary>
    </member>
    <member name="E:DriveWorks.ProjectConstant.Deleted">
      <summary>Raised when the constant is deleted.</summary>
    </member>
    <member name="E:DriveWorks.ProjectConstant.NameChanged">
      <summary>Raised when the name is changed.</summary>
    </member>
    <member name="E:DriveWorks.ProjectConstant.ValueChanged">
      <summary>Raised when the value is changed.</summary>
    </member>
    <member name="M:DriveWorks.ProjectConstants.CreateConstant(System.String)">
      <summary>Creates a new constant with the specified name.</summary>
      <returns>The newly created constant.</returns>
      <param name="displayName">The display name to assign to the constant.</param>
    </member>
    <member name="M:DriveWorks.ProjectConstants.GetConstant(System.String)">
      <summary>Gets the constant with the specified display name.</summary>
      <exception caption="" cref="T:DriveWorks.ItemNotFoundException">Thrown when no constant with the specified display name exists.</exception>
      <param name="displayName">The display name of the constant to retrieve.</param>
    </member>
    <member name="M:DriveWorks.ProjectConstants.GetConstants">
      <summary>Gets all the constants which exist in the project.</summary>
    </member>
    <member name="M:DriveWorks.ProjectConstants.TryGetConstant(System.String,DriveWorks.ProjectConstant@)">
      <summary>Gets the constant with the specified display name.</summary>
      <returns>True if the constant is found and returned, otherwise false.</returns>
      <param name="displayName">The display name of the constant to retrieve.</param>
      <param name="constant">A reference to a constant which will receive the constant.</param>
    </member>
    <member name="P:DriveWorks.ProjectConstants.Project">
      <summary>Gets the project to which the constant manager belongs.</summary>
    </member>
    <member name="E:DriveWorks.ProjectConstants.ConstantCategoryChanged">
      <summary>Raised when a constant's category changes.</summary>
    </member>
    <member name="E:DriveWorks.ProjectConstants.ConstantCreated">
      <summary>Raised when a constant is created.</summary>
    </member>
    <member name="E:DriveWorks.ProjectConstants.ConstantDeleted">
      <summary>Raised when a constant is deleted.</summary>
    </member>
    <member name="E:DriveWorks.ProjectConstants.ConstantNameChanged">
      <summary>Raised when a constant's name changes.</summary>
    </member>
    <member name="E:DriveWorks.ProjectConstants.ConstantValueChanged">
      <summary>Raised when a constant's value changes.</summary>
    </member>
    <member name="M:DriveWorks.ProjectDataTable.AssertInitialized">
      <summary>Throws an exception if the document hasn't been initialized.</summary>
    </member>
    <member name="M:DriveWorks.ProjectDataTable.AssertNotDeleted">
      <summary>Throws an exception if the document has been deleted.</summary>
    </member>
    <member name="M:DriveWorks.ProjectDataTable.Delete">
      <summary>Deletes the table from the project.</summary>
    </member>
    <member name="M:DriveWorks.ProjectDataTable.DeleteCore">
      <summary>When overridden in a derived class, performs any clean-up necessary to delete the document from the project.</summary>
    </member>
    <member name="M:DriveWorks.ProjectDataTable.GetCachedTableData">
      <summary>Gets the cached table data from the design master.</summary>
      <returns>A zero-based two dimensional array of values.</returns>
    </member>
    <member name="M:DriveWorks.ProjectDataTable.GetName(System.String)">
      <summary>Gets the invariant name of the table from a display name.</summary>
      <returns>The converted name.</returns>
      <param name="displayName">The display name to convert.</param>
    </member>
    <member name="M:DriveWorks.ProjectDataTable.GetTableReferenceName(System.String)">
      <summary>Converts a table display name to a reference name (how it would be used in rules).</summary>
      <returns>The converted name.</returns>
      <param name="displayName">The name to convert.</param>
    </member>
    <member name="M:DriveWorks.ProjectDataTable.InitializeExistingCore">
      <summary>When overridden in a derived class, performs initialization tasks relevant to an existing document, i.e. during project load.</summary>
    </member>
    <member name="M:DriveWorks.ProjectDataTable.InitializeNewCore">
      <summary>When overridden in a derived class, performs initialization tasks relevant to a newly created document.</summary>
    </member>
    <member name="M:DriveWorks.ProjectDataTable.IsNameValidCore(System.String)">
      <summary>When overridden in a derived class, checks to see if the specified new name is a valid name for the given type of document.</summary>
      <returns>True if the name is valid, otherwise false.</returns>
      <param name="newName">The proposed name of the document.</param>
    </member>
    <member name="M:DriveWorks.ProjectDataTable.NotifyStoreRead">
      <summary>When overridden in a derived class, handles the store being read for the first time.</summary>
    </member>
    <member name="M:DriveWorks.ProjectDataTable.Refresh">
      <summary>Refreshes the data table by asking the provider to re-retrieve the data.</summary>
      <returns>True if the data was successfully retrieved, otherwise false.</returns>
    </member>
    <member name="M:DriveWorks.ProjectDataTable.RefreshOnProjectLoad">
      <summary>Determines if the data table is to be refreshed each time the project is loaded.</summary>
      <returns>True if the data table is to be refreshed on project load.</returns>
    </member>
    <member name="P:DriveWorks.ProjectDataTable.Data">
      <summary>Gets/sets the custom data for the document.</summary>
    </member>
    <member name="P:DriveWorks.ProjectDataTable.DisplayName">
      <summary>Gets/sets the name of the data source.</summary>
    </member>
    <member name="P:DriveWorks.ProjectDataTable.InvariantName">
      <summary>Gets the invariant name of the table.</summary>
    </member>
    <member name="P:DriveWorks.ProjectDataTable.IsDeleted">
      <summary>Gets whether the table has been deleted.</summary>
    </member>
    <member name="P:DriveWorks.ProjectDataTable.IsInitialized">
      <summary>Gets whether the table has been initialized.</summary>
    </member>
    <member name="P:DriveWorks.ProjectDataTable.RefreshOnLoad">
      <summary>Gets whether the data table should be refreshed from it's source when the project is loaded.</summary>
    </member>
    <member name="P:DriveWorks.ProjectDataTable.StoreIsSerialized">
      <summary>Gets whether the table's backing store should be serialized or not.</summary>
    </member>
    <member name="E:DriveWorks.ProjectDataTable.Deleted">
      <summary>Raised when the document is deleted.</summary>
    </member>
    <member name="E:DriveWorks.ProjectDataTable.NameChanged">
      <summary>Raised when the document's name changes.</summary>
    </member>
    <member name="M:DriveWorks.ProjectDataTables.GetEnumerator">
      <summary>Gets an enumerator which enumerates the data tables in the collection.</summary>
    </member>
    <member name="M:DriveWorks.ProjectDataTables.GetTable(System.String)">
      <summary>Gets the table with the specified name.</summary>
      <exception caption="" cref="T:DriveWorks.ItemNotFoundException">Thrown if a data table with the specified name does not exist.Thrown if the %name% argument is a null reference.</exception>
      <returns>The data table with the specified name.</returns>
      <param name="name">The name of the table to get.</param>
    </member>
    <member name="M:DriveWorks.ProjectDataTables.ToArray">
      <summary>Copies the data tables to a new array and returns it.</summary>
      <returns>An array of data tables.</returns>
    </member>
    <member name="M:DriveWorks.ProjectDataTables.TryGetTable(System.String,DriveWorks.ProjectDataTable@)">
      <summary>Tries to get a table with the specified name.</summary>
      <exception caption="" cref="T:System.ArgumentNullException">Thrown if the %name% argument is a null reference.</exception>
      <returns>True if the table was found and returned, otherwise false.</returns>
      <param name="name">The name of the table to retrieve.</param>
      <param name="table">A reference to a variable which will receive the table.</param>
    </member>
    <member name="M:DriveWorks.ProjectDataTables.CreateDataTable``1(System.String)">
      <summary>Creates and adds a new document to the project.</summary>
      <exception caption="" cref="T:DriveWorks.ItemExistsException">A table with the given name already exists.The specified type does not inherit from %T:DriveWorks.ProjectDataTable%.</exception>
      <returns>The newly created table.</returns>
      <typeparam name="TTable">The type of the table to add.</typeparam>
      <param name="name">The name of the table to add.</param>
    </member>
    <member name="M:DriveWorks.ProjectDataTables.CreateDataTable(System.Type,System.String)">
      <summary>Creates and adds a new table to the project.</summary>
      <exception caption="" cref="T:DriveWorks.ItemExistsException">A table with the given name already exists.The type specified in %tableType% does not inherit from %T:DriveWorks.ProjectDataTable% or isn't defined in a extension library.</exception>
      <returns>The newly created table.</returns>
      <param name="tableType">The type of the table to add.</param>
      <param name="name">The name of the table to add.</param>
    </member>
    <member name="M:DriveWorks.ProjectDataTables.RefreshAll">
      <summary>Refreshes all data sources in the project.</summary>
    </member>
    <member name="E:DriveWorks.ProjectDataTables.DataTableCreated">
      <summary>Raised when a data table is created.</summary>
    </member>
    <member name="E:DriveWorks.ProjectDataTables.DataTableDeleted">
      <summary>Raised when a data table is deleted.</summary>
    </member>
    <member name="E:DriveWorks.ProjectDataTables.DataTableNameChanged">
      <summary>Raised when the name of a data table is changed.</summary>
    </member>
    <member name="M:DriveWorks.ProjectDetails.GetProjectFilePath">
      <summary>Gets the fully-qualified path to the project file.</summary>
    </member>
    <member name="P:DriveWorks.ProjectDetails.Deployed">
      <summary>Gets/sets whether the project is deployed so that it can be used by ordinary users.</summary>
    </member>
    <member name="P:DriveWorks.ProjectDetails.Directory">
      <summary>Gets/sets the path to the project directory.</summary>
    </member>
    <member name="P:DriveWorks.ProjectDetails.Extension">
      <summary>Gets/sets the file extension of the project.</summary>
    </member>
    <member name="P:DriveWorks.ProjectDetails.Hidden">
      <summary>Gets/sets whether the project is hidden from the list of projects that can be specified.</summary>
    </member>
    <member name="P:DriveWorks.ProjectDetails.Id">
      <summary>Gets the unique identifier of the project.</summary>
    </member>
    <member name="P:DriveWorks.ProjectDetails.Name">
      <summary>Gets/sets the name of of the project.</summary>
    </member>
    <member name="M:DriveWorks.ProjectDisplayFile.Disconnect">
      <summary>Ensures that event handlers are unbound.</summary>
    </member>
    <member name="M:DriveWorks.ProjectDisplayFile.RaiseValueChanged">
      <summary>Raises the  event.</summary>
    </member>
    <member name="P:DriveWorks.ProjectDisplayFile.Value">
      <summary>Gets the value of the display file rule.</summary>
    </member>
    <member name="E:DriveWorks.ProjectDisplayFile.ValueChanged">
      <summary>Determines when the  property changes.</summary>
    </member>
    <member name="M:DriveWorks.ProjectDocument.AssertInitialized">
      <summary>Throws an exception if the document hasn't been initialized.</summary>
    </member>
    <member name="M:DriveWorks.ProjectDocument.AssertNotDeleted">
      <summary>Throws an exception if the document has been deleted.</summary>
    </member>
    <member name="M:DriveWorks.ProjectDocument.CalculateRulesCore">
      <summary>Calculates the results of the rules that have been defined for the document.</summary>
      <returns>An instance of the  type which has been populated with the rule results.</returns>
    </member>
    <member name="M:DriveWorks.ProjectDocument.Delete">
      <summary>Deletes the document from the project.</summary>
    </member>
    <member name="M:DriveWorks.ProjectDocument.DeleteCore">
      <summary>When overridden in a derived class, performs any clean-up necessary to delete the document from the project.</summary>
    </member>
    <member name="M:DriveWorks.ProjectDocument.Generate(System.String)">
      <summary>Generates the document within the context of the active specification.</summary>
      <exception caption="" cref="T:System.InvalidOperationException">Thrown if the project is not part of a running specification.</exception>
      <param name="generateDirectory">The full path to the directory which generated files' paths should be created relative to.</param>
    </member>
    <member name="M:DriveWorks.ProjectDocument.GenerateCore(System.String,DriveWorks.Specification.RuleResults)">
      <summary>When overridden in a derived class, generates the document.</summary>
      <param name="generateDirectory">The full path to the directory which generated files' paths should be created relative to.</param>
      <param name="results">The calculated rule results for the document.</param>
    </member>
    <member name="M:DriveWorks.ProjectDocument.GeneratePreviewCore(System.String,DriveWorks.Specification.RuleResults)">
      <summary>When overridden in a derived class, generates a preview of the document in the specified directory using the given calculated rule results.</summary>
      <returns>The full path to the preview file.</returns>
      <param name="previewDirectory">A fully-qualified path to a directory in which the preview file should be created.</param>
      <param name="results">The calculated rule results for the document.</param>
    </member>
    <member name="M:DriveWorks.ProjectDocument.GetResultForRuleAsDisplayString(DriveWorks.Specification.RuleResults,DriveWorks.ProjectDocumentRule)">
      <summary>Gets the specified rule as a string from the calculated results.</summary>
      <returns>The result of the rule, converted to a string suitable for display.</returns>
      <param name="results">The results from which to retrieve the rule.</param>
      <param name="rule">The rule for which to retrieve the calculated result.</param>
    </member>
    <member name="M:DriveWorks.ProjectDocument.InitializeExistingCore">
      <summary>When overridden in a derived class, performs initialization tasks relevant to an existing document, i.e. during project load.</summary>
    </member>
    <member name="M:DriveWorks.ProjectDocument.InitializeNewCore">
      <summary>When overridden in a derived class, performs initialization tasks relevant to a newly created document.</summary>
    </member>
    <member name="M:DriveWorks.ProjectDocument.RegisterSpecificationDocument(System.String,System.Boolean)">
      <summary>Registers a new specification document with the active specification.</summary>
      <exception caption="" cref="T:System.InvalidOperationException">Thrown if the project is not part of a running specification.</exception>
      <param name="documentPath">The fully qualified path to the document.</param>
      <param name="isHidden">True if the document is filtered from the the normal end-user view.</param>
    </member>
    <member name="M:DriveWorks.ProjectDocument.SetRuleContext(DriveWorks.ProjectDocumentRule,System.Object)">
      <summary>Sets a rule context that will be use by the Titan rule engine when evaluating the rule.</summary>
      <param name="rule">The rule to set the context of.</param>
      <param name="context">The context to give the rule.</param>
    </member>
    <member name="M:DriveWorks.ProjectDocument.ThrowCorruptDocumentDataException">
      <summary>Throws the  exception.</summary>
    </member>
    <member name="M:DriveWorks.ProjectDocument.CalculateRules">
      <summary>Calculates the results of the rules that have been defined for the document.</summary>
      <returns>An instance of the  type which has been populated with the rule results.</returns>
    </member>
    <member name="M:DriveWorks.ProjectDocument.CalculateRules(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>Calculates the results of the rules that have been defined for the document.</summary>
      <returns>An instance of the  type which has been populated with the rule results.</returns>
      <param name="overriddenRules">A dictionary containing overridden rules, where the key is the unique identifier of the rule being overridden, and the value is the new formula.</param>
    </member>
    <member name="M:DriveWorks.ProjectDocument.GeneratePreview(System.String)">
      <summary>Creates a preview of the document in the specified directory.</summary>
      <exception caption="" cref="T:System.NotSupportedException">Thrown if the document does not support previewing, as indicated by the %P:DriveWorks.ProjectDocument.SupportsPreview% property.Thrown if the document has specified support for previewing, but has not overridden the %M:DriveWorks.ProjectDocument.GeneratePreviewCore(System.String,DriveWorks.Specification.RuleResults)% method.</exception>
      <returns>The full path to the preview file.</returns>
      <param name="previewDirectory">A fully-qualified path to a directory in which the preview file should be created.</param>
    </member>
    <member name="M:DriveWorks.ProjectDocument.GeneratePreview(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>Creates a preview of the document in the specified directory.</summary>
      <exception caption="" cref="T:System.NotSupportedException">Thrown if the document does not support previewing, as indicated by the %P:DriveWorks.ProjectDocument.SupportsPreview% property.Thrown if the document has specified support for previewing, but has not overridden the %M:DriveWorks.ProjectDocument.GeneratePreviewCore(System.String,DriveWorks.Specification.RuleResults)% method.</exception>
      <returns>The full path to the preview file.</returns>
      <param name="previewDirectory">A fully-qualified path to a directory in which the preview file should be created.</param>
      <param name="overriddenRules">A dictionary containing overriden rules, where the key is the unique identifier of the rule being overridden, and the value is the new formula.</param>
    </member>
    <member name="M:DriveWorks.ProjectDocument.ShouldGenerate">
      <summary>Determines whether the document should be generated.</summary>
      <returns>Returns True if the document should be generated during preview.</returns>
    </member>
    <member name="M:DriveWorks.ProjectDocument.ShouldGenerate(DriveWorks.Specification.RuleResults)">
      <summary>Determines whether the document should be generated.</summary>
      <returns>Returns True if the document should be generated.</returns>
      <param name="results">The calculated rule results for the document.</param>
    </member>
    <member name="M:DriveWorks.ProjectDocument.ShouldGeneratePreview">
      <summary>Determines whether the document should be generated during preview.</summary>
      <returns>Returns True if the document should be generated during preview.</returns>
    </member>
    <member name="M:DriveWorks.ProjectDocument.ShouldGeneratePreview(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>Determines whether the document should be generated during preview.</summary>
      <returns>Returns True if the document should be generated during preview.</returns>
      <param name="overriddenRules">A dictionary containing overridden rules, where the key is the unique identifier of the rule being overridden, and the value is the new formula.</param>
    </member>
    <member name="P:DriveWorks.ProjectDocument.Data">
      <summary>Gets/sets the custom data for the document.</summary>
    </member>
    <member name="P:DriveWorks.ProjectDocument.HasDisplayFileRule">
      <summary>Gets whether the document has a display file rule.</summary>
    </member>
    <member name="P:DriveWorks.ProjectDocument.IsDeleted">
      <summary>Gets whether the document has been deleted.</summary>
    </member>
    <member name="P:DriveWorks.ProjectDocument.IsInitialized">
      <summary>Gets whether the document has been initialized.</summary>
    </member>
    <member name="P:DriveWorks.ProjectDocument.Name">
      <summary>Gets/sets the name of the document.</summary>
    </member>
    <member name="P:DriveWorks.ProjectDocument.Project">
      <summary>Gets the project to which the document belongs.</summary>
    </member>
    <member name="P:DriveWorks.ProjectDocument.SupportsPreview">
      <summary>Gets whether the document supports generating a preview.</summary>
    </member>
    <member name="E:DriveWorks.ProjectDocument.Deleted">
      <summary>Raised when the document is deleted.</summary>
    </member>
    <member name="E:DriveWorks.ProjectDocument.NameChanged">
      <summary>Raised when the document's name changes.</summary>
    </member>
    <member name="M:DriveWorks.ProjectDocumentRule.GetVersionHistory">
      <summary>Gets the version history for the document rule.</summary>
    </member>
    <member name="M:DriveWorks.ProjectDocumentRule.SetDisplayName(System.String)">
      <summary>Sets the display name, see remarks for details.</summary>
      <param name="newDisplayName">The new display name to apply.</param>
    </member>
    <member name="M:DriveWorks.ProjectDocumentRule.SetRuleAndComment(System.String,System.String)">
      <summary>Sets the rule and comment in a single operation.</summary>
      <param name="newRule">The new rule.</param>
      <param name="newComment">The new comment.</param>
    </member>
    <member name="P:DriveWorks.ProjectDocumentRule.Comment">
      <summary>Gets/sets a comment which describes the rule.</summary>
    </member>
    <member name="P:DriveWorks.ProjectDocumentRule.DisplayName">
      <summary>Gets the rules display name.</summary>
    </member>
    <member name="P:DriveWorks.ProjectDocumentRule.Formula">
      <summary>Gets/sets the formula which defines the rule.</summary>
    </member>
    <member name="P:DriveWorks.ProjectDocumentRule.Id">
      <summary>Gets the rule's unique identifier.</summary>
    </member>
    <member name="P:DriveWorks.ProjectDocumentRule.IsDisplayFileRule">
      <summary>Gets/sets whether the rule is used as the rule for a display file associated with the document.</summary>
    </member>
    <member name="M:DriveWorks.ProjectDocumentRules.Clear">
      <summary>Removes all rules from the document.</summary>
    </member>
    <member name="M:DriveWorks.ProjectDocumentRules.GetEnumerator">
      <summary>Returns an enumerator that iterates through the document rules.</summary>
    </member>
    <member name="M:DriveWorks.ProjectDocumentRules.GetRule(System.String)">
      <summary>Gets the rule with the specified identifier.</summary>
      <exception caption="" cref="T:DriveWorks.ItemNotFoundException">Thrown if the specified rule does not exist.</exception>
      <returns>The rule with the specified unique identifier.</returns>
      <param name="ruleId">The identifier which uniquely identifies the rule to retrieve.</param>
    </member>
    <member name="M:DriveWorks.ProjectDocumentRules.Remove(System.String)">
      <summary>Removes the rule with the specified identifier.</summary>
      <returns>True if a rule with the specified identifier was found and removed, otherwise false.</returns>
      <param name="ruleId">The unique identifier of the rule to remove.</param>
    </member>
    <member name="M:DriveWorks.ProjectDocumentRules.ToArray">
      <summary>Creates an array containing each rule created for the document.</summary>
    </member>
    <member name="M:DriveWorks.ProjectDocumentRules.ToDictionary">
      <summary>Creates a dictionary containing each rule created for the document.</summary>
    </member>
    <member name="M:DriveWorks.ProjectDocumentRules.TryGetRule(System.String,DriveWorks.ProjectDocumentRule@)">
      <summary>Gets the rule with the specified identifier.</summary>
      <returns>True if the rule is found and returned, otherwise false.</returns>
      <param name="ruleId">The identifier which uniquely identifies the rule to retrieve.</param>
      <param name="rule">A reference to a variable which will receive the rule.</param>
    </member>
    <member name="M:DriveWorks.ProjectDocumentRules.Add">
      <summary>Creates and returns a new rule.</summary>
      <returns>An instance of the  type which provides access to the newly created rule.</returns>
    </member>
    <member name="M:DriveWorks.ProjectDocumentRules.Add(System.String)">
      <summary>Creates and returns a new rule with a given name.</summary>
      <returns>An instance of the  type which provides access to the newly created rule.</returns>
      <param name="ruleId">The identifier to give to the rule.</param>
    </member>
    <member name="P:DriveWorks.ProjectDocumentRules.Count">
      <summary>Gets a count of the number of document rules in the collection.</summary>
    </member>
    <member name="P:DriveWorks.ProjectDocumentRules.DisplayFile">
      <summary>Gets the display file created when a display file rule is assigned, may be a null reference if the project doesn't support display file update notifications.</summary>
    </member>
    <member name="P:DriveWorks.ProjectDocumentRules.DisplayFileRule">
      <summary>Gets the rule which is being used as the rule for a display file associated with the document, or a null reference if no associated display file exists.</summary>
    </member>
    <member name="P:DriveWorks.ProjectDocumentRules.Document">
      <summary>Gets the document to which the rules belong.</summary>
    </member>
    <member name="P:DriveWorks.ProjectDocumentRules.Item(System.Int32)">
      <summary>Gets the document rule at the specified index.</summary>
      <returns>The document rule at the specified index.</returns>
      <param name="index">The index of the document rule to retrieve.</param>
    </member>
    <member name="M:DriveWorks.ProjectDocuments.GetDocument(System.String)">
      <summary>Gets the document with the specified name.</summary>
      <exception caption="" cref="T:DriveWorks.ItemNotFoundException">Thrown if a document with the specified name does not exist.</exception>
      <returns>The document with the specified name.</returns>
      <param name="name">The name of the document to get.</param>
    </member>
    <member name="M:DriveWorks.ProjectDocuments.GetEnumerator">
      <summary>Gets an enumerator which enumerates the documents in the collection.</summary>
    </member>
    <member name="M:DriveWorks.ProjectDocuments.ToArray">
      <summary>Copies the documents to a new array and returns it.</summary>
      <returns>An array of documents.</returns>
    </member>
    <member name="M:DriveWorks.ProjectDocuments.TryGetDocument(System.String,DriveWorks.ProjectDocument@)">
      <summary>Tries to get a document with the specified name.</summary>
      <returns>True if the document was found and returned, otherwise false.</returns>
      <param name="name">The name of the document to retrieve.</param>
      <param name="document">A reference to a variable which will receive the document.</param>
    </member>
    <member name="M:DriveWorks.ProjectDocuments.CreateDocument``1(System.String)">
      <summary>Creates and adds a new document to the project.</summary>
      <exception caption="" cref="T:DriveWorks.ItemExistsException">A document with the given name already exists.The specified type does not inherit from %T:DriveWorks.ProjectDocument%.</exception>
      <returns>The newly created document.</returns>
      <typeparam name="TDocument">The type of the document to add.</typeparam>
      <param name="name">The name of the document to add.</param>
    </member>
    <member name="M:DriveWorks.ProjectDocuments.CreateDocument(System.Type,System.String)">
      <summary>Creates and adds a new document to the project.</summary>
      <exception caption="" cref="T:DriveWorks.ItemExistsException">A document with the given name already exists.The type specified in %documentType% does not inherit from %T:DriveWorks.ProjectDocument% or isn't defined in a extension library.</exception>
      <returns>The newly created document.</returns>
      <param name="documentType">The type of the document to add.</param>
      <param name="name">The name of the document to add.</param>
    </member>
    <member name="E:DriveWorks.ProjectDocuments.DocumentCreated">
      <summary>Raised when a document is created.</summary>
    </member>
    <member name="E:DriveWorks.ProjectDocuments.DocumentDeleted">
      <summary>Raised when a document is deleted.</summary>
    </member>
    <member name="E:DriveWorks.ProjectDocuments.DocumentNameChanged">
      <summary>Raised when a document's name changes.</summary>
    </member>
    <member name="P:DriveWorks.ProjectExtenderLoadException.ExtenderAssemblyPath">
      <summary>Gets the path to the extender that failed to load.</summary>
    </member>
    <member name="M:DriveWorks.ProjectFilterList.#ctor(DriveWorks.Project,System.String)">
      <summary>Creates a new instance of the ProjectFilterList class.</summary>
      <param name="project">The project to attach to.</param>
      <param name="UISection">The unique section to attach to.</param>
    </member>
    <member name="P:DriveWorks.ProjectFilterList.Filters">
      <summary>Gets the collection of filters for this project filter list.</summary>
    </member>
    <member name="P:DriveWorks.ProjectFunctionEvent.Arguments">
      <summary>The argument values that were passed to the function.</summary>
    </member>
    <member name="P:DriveWorks.ProjectFunctionEvent.Duration">
      <summary>The total run time of the function's execution.</summary>
    </member>
    <member name="P:DriveWorks.ProjectFunctionEvent.Name">
      <summary>The name of the function for this event.</summary>
    </member>
    <member name="P:DriveWorks.ProjectFunctionEvent.OwnerName">
      <summary>The name of the item that executed this function.</summary>
    </member>
    <member name="P:DriveWorks.ProjectFunctionEvent.OwnerRule">
      <summary>The formula for the owning item of this function.</summary>
    </member>
    <member name="P:DriveWorks.ProjectFunctionEvent.Result">
      <summary>The returning value from the function's execution.</summary>
    </member>
    <member name="P:DriveWorks.ProjectFunctionEvent.Time">
      <summary>The start time of the function execution.</summary>
    </member>
    <member name="P:DriveWorks.ProjectFunctionProfile.Events">
      <summary>Information on all instances of times when the function has been executed.</summary>
    </member>
    <member name="P:DriveWorks.ProjectFunctionProfile.Name">
      <summary>The name of the function that this profile information is for.</summary>
    </member>
    <member name="P:DriveWorks.ProjectFunctionProfile.TotalElapsed">
      <summary>The total time that as been spent in executing all instances of the represented function.</summary>
    </member>
    <member name="M:DriveWorks.ProjectItemListDef.AddItem(DriveWorks.ProjectItemListTypeDef,System.Object[])">
      <summary>Adds a new item to this item list.</summary>
      <param name="typeDef">The type of item to create.</param>
      <param name="values">The values to set for this item.</param>
    </member>
    <member name="M:DriveWorks.ProjectItemListDef.AddTypeDefinition(System.String)">
      <summary>Creates a new  instance and adds it to this <see cref="T:DriveWorks.ProjectItemListDef" />.</summary>
      <param name="dialogName">The name of the dialog that this definition will represent.</param>
    </member>
    <member name="M:DriveWorks.ProjectItemListDef.DeleteItem(System.Int32)">
      <summary>Removes a item from the item list.</summary>
      <param name="itemIndex">Index of the row to remove.</param>
    </member>
    <member name="M:DriveWorks.ProjectItemListDef.EditItem(System.Int32,DriveWorks.ProjectItemListTypeDef,System.Object[])">
      <summary>Edits an existing item in this item list.</summary>
      <param name="itemIndex">The row index of the item to edit.</param>
      <param name="values">New values for the item.</param>
    </member>
    <member name="M:DriveWorks.ProjectItemListDef.GetData">
      <summary>Gets information about the item that have been added to the current project or specification.</summary>
      <returns>An instance of the  type which has been populated with information about the item. The data table consists of one row for each item,
and is populated with the data for each column in the <see cref="P:DriveWorks.ProjectItemListDef.Columns" /> property, as well as two additional columns called Name and
Type which identify the item name, and the dialog from which the item was created.</returns>
    </member>
    <member name="M:DriveWorks.ProjectItemListDef.GetItems">
      <summary>Gets an collection of all items in this item list.</summary>
    </member>
    <member name="M:DriveWorks.ProjectItemListDef.MoveItemDown(System.Int32)">
      <summary>Moves an item down in the list of items.</summary>
      <param name="itemIndex">The index of the item to move.</param>
    </member>
    <member name="M:DriveWorks.ProjectItemListDef.MoveItemUp(System.Int32)">
      <summary>Moves an item up in the list of items.</summary>
      <param name="itemIndex">The Index of the item to move.</param>
    </member>
    <member name="M:DriveWorks.ProjectItemListDef.RemoveTypeDefinition(DriveWorks.ProjectItemListTypeDef)">
      <summary>Removes a type definition from the item list.</summary>
      <param name="typeDefinition">The type definition to remove from the item list.</param>
    </member>
    <member name="M:DriveWorks.ProjectItemListDef.TryGetTypeDefinition(System.String,DriveWorks.ProjectItemListTypeDef@)">
      <summary>Gets the type definition for a specific dialog.</summary>
    </member>
    <member name="P:DriveWorks.ProjectItemListDef.Columns">
      <summary>Gets the columns for the item list definition.</summary>
      <returns>An instance of the  type which can be used to query, add, remove, and re-order columns.</returns>
    </member>
    <member name="P:DriveWorks.ProjectItemListDef.Name">
      <summary>Gets the name of the item list definition.</summary>
    </member>
    <member name="P:DriveWorks.ProjectItemListDef.TypeDefinitions">
      <summary>Gets the definition of each item type which can provide the basis of an item in the item list.</summary>
    </member>
    <member name="E:DriveWorks.ProjectItemListDef.ItemsChanged">
      <summary>Raised when any items have been added/deleted/edited/moved.</summary>
    </member>
    <member name="E:DriveWorks.ProjectItemListDef.Renamed">
      <summary>Raised when  has changed.</summary>
    </member>
    <member name="M:DriveWorks.ProjectItemListTypeDef.AddOutput(System.String,System.String)">
      <summary>Adds a new output binging to this type definition.</summary>
      <param name="localColumnName">The local column name to bind.</param>
      <param name="remoteControlName">The Name of the control to bind the column to.</param>
    </member>
    <member name="M:DriveWorks.ProjectItemListTypeDef.RemoveOutput(DriveWorks.ProjectItemListTypeOutputDef)">
      <summary>Removes an output from this list of outputs.</summary>
      <param name="output">The output binding to remove.</param>
    </member>
    <member name="M:DriveWorks.ProjectItemListTypeDef.TryGetOutput(System.String,DriveWorks.ProjectItemListTypeOutputDef@)">
      <summary>Attempts to get a specified output from the given item type column name.</summary>
      <returns>True if the output was found.</returns>
      <param name="columnName">Name of the item column to get the output for.</param>
      <param name="output">The output to be set.</param>
    </member>
    <member name="P:DriveWorks.ProjectItemListTypeDef.DialogName">
      <summary>Gets the name of the dialog form used by the type definition.</summary>
    </member>
    <member name="P:DriveWorks.ProjectItemListTypeDef.Id">
      <summary>Gets the invariant identifier of the rule.</summary>
    </member>
    <member name="P:DriveWorks.ProjectItemListTypeDef.ItemNameRule">
      <summary>Gets/sets the rule which defines the name assigned to an item derived from the item type.</summary>
    </member>
    <member name="P:DriveWorks.ProjectItemListTypeDef.ItemNameRuleComment">
      <summary>Gets/sets a comment for the rule which defines the name assigned to an item derived from the item type.</summary>
    </member>
    <member name="P:DriveWorks.ProjectItemListTypeDef.Outputs">
      <summary>Gets the mappings from dialog controls to item list columns that have been defined for the item list type.</summary>
    </member>
    <member name="P:DriveWorks.ProjectItemListTypeOutputDef.LocalColumnName">
      <summary>Gets the name of the column in the item list control which will receive the value from the dialog form control.</summary>
    </member>
    <member name="P:DriveWorks.ProjectItemListTypeOutputDef.RemoteControlName">
      <summary>Gets/sets the name of the control to retrieve from the item type dialog form.</summary>
    </member>
    <member name="M:DriveWorks.ProjectListItemData.Equals(System.Object)">
      <summary>Determines whether two ProjectListItemData objects are equal.</summary>
      <returns>True if the two objects are equal.</returns>
      <param name="obj">The ProjectListItemData object to compare to.</param>
    </member>
    <member name="M:DriveWorks.ProjectListItemData.GetItemValueNative(System.String)">
      <summary>Retrieves the item value for the specified column name.</summary>
      <returns>Nothing if a column matching that name doesn't exist, otherwise the value for the column.</returns>
      <param name="columnName">The name of the column for which to retrieve the value.</param>
    </member>
    <member name="M:DriveWorks.ProjectListItemData.GetItemValuesNative">
      <summary>The values from the item. Key is column name and value is the current value.</summary>
    </member>
    <member name="P:DriveWorks.ProjectListItemData.Index">
      <summary>Gets the index of this item in the list.</summary>
    </member>
    <member name="P:DriveWorks.ProjectListItemData.ItemType">
      <summary>The type of item.</summary>
    </member>
    <member name="P:DriveWorks.ProjectListItemData.ItemValues">
      <summary>The values from the item. Key is column name and value is the current value.</summary>
    </member>
    <member name="P:DriveWorks.ProjectListItemData.Name">
      <summary>The name of the item.</summary>
    </member>
    <member name="M:DriveWorks.ProjectMaintenance.ForceRemoveComponentTaskConditionsOfType(System.String,System.String)">
      <summary>
        <para>Forcefully removes all component task conditions of the specified type in the given project.</para>
        <para></para>
        <para>Note: If you are able to open the project, consider using the  API instead.</para>
      </summary>
      <param name="projectPath">The full path to the project file to delete the Component Tasks Conditions from.</param>
      <param name="conditionTypeName">The full name of the type to remove.</param>
    </member>
    <member name="M:DriveWorks.ProjectMaintenance.ForceRemoveComponentTasksOfType(System.String,System.String)">
      <summary>
        <para>Forcefully removes all component tasks of the specified type in the given project.</para>
        <para></para>
        <para>Note: If you are able to open the project, consider using
(ComponentTask) instead.</para>
      </summary>
      <param name="projectPath">The full path to the project file to delete the Component Tasks from.</param>
      <param name="taskTypeName">The full name of the type to remove.</param>
    </member>
    <member name="M:DriveWorks.ProjectMaintenance.ForceRemoveDataTablesOfType(System.String,System.String)">
      <summary>
        <para>Forcefully removes all Data Tables of the specified type in the given project.</para>
        <para></para>
        <para>Note: If you are able to open the project, consider using () instead.</para>
      </summary>
      <param name="projectPath">The full path to the project file to delete the Data Tables from.</param>
      <param name="typeFullname">The full name of the type to remove.</param>
    </member>
    <member name="M:DriveWorks.ProjectMaintenance.ForceRemoveDocumentsOfType(System.String,System.String)">
      <summary>
        <para>Forcefully removes all documents of the specified type in the given project.</para>
        <para></para>
        <para>Note: If you are able to open the project, consider using () instead.</para>
      </summary>
      <param name="projectPath">The full path to the project file to delete the Documents from.</param>
      <param name="typeFullname">The full name of the type to remove.</param>
    </member>
    <member name="M:DriveWorks.ProjectMaintenance.ForceRemoveSpecificationFlowConditionsOfType(System.String,System.String)">
      <summary>
        <para>Forcefully removes all Specification Flow Conditions of the specified type in the given project.</para>
        <para></para>
        <para>Note: If you are able to open the project, consider using () instead.</para>
      </summary>
      <param name="projectPath">The full path to the project file to delete the conditions from.</param>
      <param name="typeFullname">The full name of the type to remove.</param>
    </member>
    <member name="M:DriveWorks.ProjectMaintenance.ForceRemoveSpecificationFlowTasksOfType(System.String,System.String)">
      <summary>
        <para>Forcefully removes all specification flow tasks of the specified type in the given project.</para>
        <para></para>
        <para>Note: If you are able to open the project, consider using () instead.</para>
      </summary>
      <param name="projectPath">The full path to the project file to delete the Specification Flow Tasks from.</param>
      <param name="typeFullname">The full name of the type to remove.</param>
    </member>
    <member name="M:DriveWorks.ProjectMaintenance.ForceRemoveSpecificationMacroConditionsOfType(System.String,System.String)">
      <summary>
        <para>Forcefully removes all Specification Macro Conditions of the specified type in the given project.</para>
        <para></para>
        <para>Note: If you are able to open the project, consider using () instead.</para>
      </summary>
      <param name="projectPath">The full path to the project file to delete the conditions from.</param>
      <param name="typeFullname">The full name of the type to remove.</param>
    </member>
    <member name="M:DriveWorks.ProjectMaintenance.ForceRemoveSpecificationMacroTasksOfType(System.String,System.String)">
      <summary>
        <para>Forcefully removes all specification macro tasks of the specified type in the given project.</para>
        <para></para>
        <para>Note: If you are able to open the project, consider using () instead.</para>
      </summary>
      <param name="projectPath">The full path to the project file to delete the Specification Macro Tasks from.</param>
      <param name="typeFullname">The full name of the type to remove.</param>
    </member>
    <member name="M:DriveWorks.ProjectMaintenance.GetAllComponentTaskConditionTypes(System.String)">
      <summary>Retrieves a list of all types of component task conditions in the given project.</summary>
      <param name="projectPath">The full path to the project to load the types from.</param>
    </member>
    <member name="M:DriveWorks.ProjectMaintenance.GetAllComponentTaskTypes(System.String)">
      <summary>Retrieves a list of all types of component tasks in the given project.</summary>
      <param name="projectPath">The full path to the project to load the types from.</param>
    </member>
    <member name="M:DriveWorks.ProjectMaintenance.GetAllDataTableTypes(System.String)">
      <summary>Retrieves a list of all types of DataTables types in the given project.</summary>
      <param name="projectPath">The full path to the project to load the types from.</param>
    </member>
    <member name="M:DriveWorks.ProjectMaintenance.GetAllDocumentTypes(System.String)">
      <summary>Retrieves a list of all types of  types in the given project.</summary>
      <param name="projectPath">The full path to the project to load the types from.</param>
    </member>
    <member name="M:DriveWorks.ProjectMaintenance.GetAllSpecificationFlowConditionTypes(System.String)">
      <summary>Retrieves a list of all types of s in the given project.</summary>
      <param name="projectPath">The full path to the project to load the types from.</param>
    </member>
    <member name="M:DriveWorks.ProjectMaintenance.GetAllSpecificationFlowTaskTypes(System.String)">
      <summary>Retrieves a list of all types of specification flow tasks in the given project.</summary>
      <param name="projectPath">The full path to the project to load the types from.</param>
    </member>
    <member name="M:DriveWorks.ProjectMaintenance.GetAllSpecificationMacroConditionTypes(System.String)">
      <summary>Retrieves a list of all types of s in the given project.</summary>
      <param name="projectPath">The full path to the project to load the types from.</param>
    </member>
    <member name="M:DriveWorks.ProjectMaintenance.GetAllSpecificationMacroTaskTypes(System.String)">
      <summary>Retrieves a list of all types of specification macro tasks in the given project.</summary>
      <param name="projectPath">The full path to the project to load the types from.</param>
    </member>
    <member name="M:DriveWorks.ProjectMessage.Delete">
      <summary>Deletes the message.</summary>
    </member>
    <member name="M:DriveWorks.ProjectMessage.DeleteCore">
      <summary>Performs the work of deleting the message.</summary>
    </member>
    <member name="M:DriveWorks.ProjectMessage.SetRuleAndComment(System.String,System.String)">
      <summary>Sets the rule and comment in a single operation.</summary>
      <param name="newRule">The new rule.</param>
      <param name="newComment">The new comment.</param>
    </member>
    <member name="P:DriveWorks.ProjectMessage.Code">
      <summary>Gets the message code</summary>
    </member>
    <member name="P:DriveWorks.ProjectMessage.Comment">
      <summary>Gets/sets the comment which defines the message.</summary>
    </member>
    <member name="P:DriveWorks.ProjectMessage.Id">
      <summary>Gets the invariant identifier of the rule.</summary>
    </member>
    <member name="P:DriveWorks.ProjectMessage.IsDeleted">
      <summary>Gets whether the message has been deleted.</summary>
    </member>
    <member name="P:DriveWorks.ProjectMessage.Message">
      <summary>Gets the current message.</summary>
    </member>
    <member name="P:DriveWorks.ProjectMessage.Project">
      <summary>Gets the project</summary>
    </member>
    <member name="P:DriveWorks.ProjectMessage.Rule">
      <summary>Gets/sets the rule which defines the message.</summary>
    </member>
    <member name="E:DriveWorks.ProjectMessage.CommentChanged">
      <summary>Raised when the message's comment is changed.</summary>
    </member>
    <member name="E:DriveWorks.ProjectMessage.Deleted">
      <summary>Raised when the message is deleted.</summary>
    </member>
    <member name="E:DriveWorks.ProjectMessage.MessageChanged">
      <summary>Raised when the message changes.</summary>
    </member>
    <member name="E:DriveWorks.ProjectMessage.RuleChanged">
      <summary>Raised when the message rule changes.</summary>
    </member>
    <member name="M:DriveWorks.ProjectMessages.CreateMessage(System.Int32)">
      <summary>Creates and returns a new message.</summary>
      <returns>The newly created message.</returns>
    </member>
    <member name="M:DriveWorks.ProjectMessages.GetMessage(System.Int32)">
      <summary>Gets the message with the specified display name.</summary>
      <exception caption="" cref="T:DriveWorks.ItemNotFoundException">Thrown when no messages with the specified display name exists.</exception>
      <param name="code">The code of the message to retrieve.</param>
    </member>
    <member name="M:DriveWorks.ProjectMessages.GetMessages">
      <summary>Gets all the messages which exist in the project.</summary>
    </member>
    <member name="M:DriveWorks.ProjectMessages.TryGetMessage(System.Int32,DriveWorks.ProjectMessage@)">
      <summary>Gets the message with the specified display name.</summary>
      <returns>True if the message is found and returned, otherwise false.</returns>
      <param name="code">The code of the message to retrieve.</param>
      <param name="message">A reference to a variable which will receive the message.</param>
    </member>
    <member name="E:DriveWorks.ProjectMessages.MessageCommentChanged">
      <summary>Raised when the message's comment is changed.</summary>
    </member>
    <member name="E:DriveWorks.ProjectMessages.MessageCreated">
      <summary>Raised when message is created</summary>
    </member>
    <member name="E:DriveWorks.ProjectMessages.MessageDeleted">
      <summary>Raised when the message is deleted.</summary>
    </member>
    <member name="E:DriveWorks.ProjectMessages.MessageMessageChanged">
      <summary>Raised when the message's message changes.</summary>
    </member>
    <member name="E:DriveWorks.ProjectMessages.MessageRuleChanged">
      <summary>Raised when the message's rule changes.</summary>
    </member>
    <member name="M:DriveWorks.ProjectMetadata.GetSection(System.String,System.Boolean)">
      <summary>Gets the specified section from the project metadata file.</summary>
      <param name="sectionName">The name of the section to get from the project metadata file.</param>
      <param name="create">Creates the metadata file if it doesn't already exist.</param>
    </member>
    <member name="P:DriveWorks.ProjectMetadataSection.DataElement">
      <summary>Gets/sets the data element contained by the section.</summary>
    </member>
    <member name="P:DriveWorks.ProjectMetadataSection.Name">
      <summary>Gets the name of the section.</summary>
    </member>
    <member name="E:DriveWorks.ProjectMetadataSection.DataElementUpdated">
      <summary>Raised when  has been set to a new <see cref="T:System.Xml.Linq.XElement" />.</summary>
    </member>
    <member name="M:DriveWorks.ProjectNotFoundException.#ctor">
      <summary>Initializes a new instance of the  class.</summary>
    </member>
    <member name="M:DriveWorks.ProjectNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the  class with serialized data.</summary>
      <param name="info">The  that holds the serialized object data about the exception being thrown</param>
      <param name="context">The  that contains contextual information about the source or destination.</param>
    </member>
    <member name="P:DriveWorks.ProjectProfileEvent.Duration">
      <summary>The length of time this event took to complete (or current run time if it hasn't completed yet).</summary>
    </member>
    <member name="P:DriveWorks.ProjectProfileEvent.Events">
      <summary>All child events of this event.</summary>
    </member>
    <member name="P:DriveWorks.ProjectProfileEvent.IsComplete">
      <summary>Whether or not this event is finished.</summary>
    </member>
    <member name="P:DriveWorks.ProjectProfileEvent.StartTime">
      <summary>The time that this event began.</summary>
    </member>
    <member name="E:DriveWorks.ProjectProfileEvent.Completed">
      <summary>Raised when this event ends.</summary>
    </member>
    <member name="P:DriveWorks.ProjectProfileEventArgs.ProfileEvent">
      <summary>Gets the project profile event.</summary>
    </member>
    <member name="P:DriveWorks.ProjectProfileEventBase.Duration">
      <summary>The length that it took to execute this event.</summary>
    </member>
    <member name="P:DriveWorks.ProjectProfileEventBase.Name">
      <summary>The name of the event.</summary>
    </member>
    <member name="P:DriveWorks.ProjectProfileEventBase.Parent">
      <summary>The owning logical event of this event.</summary>
    </member>
    <member name="P:DriveWorks.ProjectProfileEventBase.StartTime">
      <summary>The start time of this event.</summary>
    </member>
    <member name="M:DriveWorks.ProjectProfiler.Clear">
      <summary>Removes all recorded information.</summary>
    </member>
    <member name="M:DriveWorks.ProjectProfiler.GetRuleEvents">
      <summary>Gets all rule events in a flat chronological order.</summary>
    </member>
    <member name="M:DriveWorks.ProjectProfiler.StartProfileEvent(System.String)">
      <summary>Begins a new logical event scope in the profiler.</summary>
      <returns>An object that when disposed will close (end) the event.</returns>
    </member>
    <member name="M:DriveWorks.ProjectProfiler.GetEvents">
      <summary>Gets all logical events in a flat chronological order.</summary>
    </member>
    <member name="P:DriveWorks.ProjectProfiler.FunctionProfiles">
      <summary>Gets a collection of all seen function profiles that have been recorded while the profiler is enabled.</summary>
    </member>
    <member name="P:DriveWorks.ProjectProfiler.IsEnabled">
      <summary>Gets or sets whether events are being tracked and recorded.</summary>
    </member>
    <member name="P:DriveWorks.ProjectProfiler.RootProfileEvents">
      <summary>Gets the root events that have been recorded while the profiler is enabled.</summary>
    </member>
    <member name="E:DriveWorks.ProjectProfiler.ProfileEventAdded">
      <summary>Raised when a logical event is started.</summary>
    </member>
    <member name="E:DriveWorks.ProjectProfiler.RuleEventAdded">
      <summary>Raised when a rule based event occurs.</summary>
    </member>
    <member name="P:DriveWorks.ProjectProfileRuleEventArgs.RuleEvent">
      <summary>Gets the project rule event.</summary>
    </member>
    <member name="P:DriveWorks.ProjectRuleEvent.Duration">
      <summary>The time taken to complete this event.</summary>
    </member>
    <member name="P:DriveWorks.ProjectRuleEvent.IsFromCalculation">
      <summary>Whether the event was based on a rule (true) or just a value set (false).</summary>
    </member>
    <member name="P:DriveWorks.ProjectRuleEvent.Newvalue">
      <summary>The new value for this item (the result of this event).</summary>
    </member>
    <member name="P:DriveWorks.ProjectRuleEvent.OldValue">
      <summary>The value of the item before this event.</summary>
    </member>
    <member name="P:DriveWorks.ProjectRuleEvent.Rule">
      <summary>The formula for this event.</summary>
    </member>
    <member name="P:DriveWorks.ProjectRuleEvent.StartTime">
      <summary>The time that the event started to happen.</summary>
    </member>
    <member name="M:DriveWorks.ProjectSpecialVariable.SetRuleAndComment(System.String,System.String)">
      <summary>Sets the rule and comment in a single operation.</summary>
      <param name="newRule">The new rule.</param>
      <param name="newComment">The new comment.</param>
    </member>
    <member name="P:DriveWorks.ProjectSpecialVariable.Comment">
      <summary>Gets/sets the comment of the special variable.</summary>
    </member>
    <member name="P:DriveWorks.ProjectSpecialVariable.DisplayName">
      <summary>Gets the display name of the special variable as it appears in the design master.</summary>
    </member>
    <member name="P:DriveWorks.ProjectSpecialVariable.Id">
      <summary>Gets the invariant identifier of the rule.</summary>
    </member>
    <member name="P:DriveWorks.ProjectSpecialVariable.Rule">
      <summary>Gets/sets the rule which defines the value of the special variable.</summary>
    </member>
    <member name="P:DriveWorks.ProjectSpecialVariable.Value">
      <summary>Gets/sets the value of the special variable.</summary>
    </member>
    <member name="E:DriveWorks.ProjectSpecialVariable.CommentChanged">
      <summary>Raised whenever the comment for the Special Variable's rule changes.</summary>
    </member>
    <member name="E:DriveWorks.ProjectSpecialVariable.RuleChanged">
      <summary>Raised whenever the rule for the Special Variable changes.</summary>
    </member>
    <member name="E:DriveWorks.ProjectSpecialVariable.ValueChanged">
      <summary>Raised whenever the value of the Special Variable changes.</summary>
    </member>
    <member name="P:DriveWorks.ProjectSpecialVariables.AdditionalFolders">
      <summary>Gets the calculated list of additional folders to create.</summary>
    </member>
    <member name="P:DriveWorks.ProjectSpecialVariables.AdditionalFoldersRule">
      <summary>Gets/sets the rule used to determine the list of additional folders.</summary>
    </member>
    <member name="P:DriveWorks.ProjectSpecialVariables.AdditionalFoldersSpecialVariable">
      <summary>Gets the special variable used to determine the list of additional folders.</summary>
    </member>
    <member name="P:DriveWorks.ProjectSpecialVariables.CurrentMacroArgument">
      <summary>Gets the argument to the currently executing macro.</summary>
    </member>
    <member name="P:DriveWorks.ProjectSpecialVariables.CurrentMacroCaller">
      <summary>Gets the name of the caller of the current macro.</summary>
    </member>
    <member name="P:DriveWorks.ProjectSpecialVariables.CurrentMacroClickPosition">
      <summary>Gets the position that the current macro was clicked.</summary>
    </member>
    <member name="P:DriveWorks.ProjectSpecialVariables.CurrentReleaseLoopIndex">
      <summary>Gets the current loop index.</summary>
    </member>
    <member name="P:DriveWorks.ProjectSpecialVariables.CurrentStateId">
      <summary>Gets the unique identifier of the current state.</summary>
    </member>
    <member name="P:DriveWorks.ProjectSpecialVariables.CurrentStateName">
      <summary>Gets the name of the current state.</summary>
    </member>
    <member name="P:DriveWorks.ProjectSpecialVariables.CurrentUserDisplayName">
      <summary>Gets the display name of the user performing the specification.</summary>
    </member>
    <member name="P:DriveWorks.ProjectSpecialVariables.CurrentUserEmailAddress">
      <summary>Gets the e-mail address of the user performing the specification.</summary>
    </member>
    <member name="P:DriveWorks.ProjectSpecialVariables.CurrentUserName">
      <summary>Gets the name of the user performing the specification.</summary>
    </member>
    <member name="P:DriveWorks.ProjectSpecialVariables.CurrentUserPassword">
      <summary>Gets the password the current user used to log on to DriveWorks.</summary>
    </member>
    <member name="P:DriveWorks.ProjectSpecialVariables.FormContainerHeight">
      <summary>Gets the height of the form's container.</summary>
    </member>
    <member name="P:DriveWorks.ProjectSpecialVariables.FormContainerWidth">
      <summary>Gets the width of the form's container.</summary>
    </member>
    <member name="P:DriveWorks.ProjectSpecialVariables.InitialSpecificationId">
      <summary>Gets the unique identifier of the initial specification.</summary>
    </member>
    <member name="P:DriveWorks.ProjectSpecialVariables.ProjectName">
      <summary>Gets the name of the project.</summary>
    </member>
    <member name="P:DriveWorks.ProjectSpecialVariables.RevisionNumber">
      <summary>Gets the revision number of the specification.</summary>
    </member>
    <member name="P:DriveWorks.ProjectSpecialVariables.SpecificationChildIndex">
      <summary>Gets the index of the specification in the parent specification.</summary>
    </member>
    <member name="P:DriveWorks.ProjectSpecialVariables.SpecificationDefaultFolder">
      <summary>Gets the path to the default specification folder.</summary>
    </member>
    <member name="P:DriveWorks.ProjectSpecialVariables.SpecificationFullPath">
      <summary>Gets the calculated full path to the specification.</summary>
    </member>
    <member name="P:DriveWorks.ProjectSpecialVariables.SpecificationId">
      <summary>Gets the unique identifier of the active specification.</summary>
    </member>
    <member name="P:DriveWorks.ProjectSpecialVariables.SpecificationName">
      <summary>Gets the calculated name of the specification.</summary>
    </member>
    <member name="P:DriveWorks.ProjectSpecialVariables.SpecificationNameRule">
      <summary>Gets/sets the rule used to determine the specification name.</summary>
    </member>
    <member name="P:DriveWorks.ProjectSpecialVariables.SpecificationNameSpecialVariable">
      <summary>Gets the special varaible used to determine the specification name.</summary>
    </member>
    <member name="P:DriveWorks.ProjectSpecialVariables.SpecificationPath">
      <summary>Gets the calculated path of the specification.</summary>
    </member>
    <member name="P:DriveWorks.ProjectSpecialVariables.SpecificationPathRule">
      <summary>Gets/sets the rule used to determine the specification path.</summary>
    </member>
    <member name="P:DriveWorks.ProjectSpecialVariables.SpecificationPathSpecialVariable">
      <summary>Gets the special varaible used to determine the specification Path.</summary>
    </member>
    <member name="P:DriveWorks.ProjectSpecialVariables.SpecificationTags">
      <summary>Gets the list of tags to associate with this specification.</summary>
    </member>
    <member name="P:DriveWorks.ProjectSpecialVariables.SpecificationTagsRule">
      <summary>Gets/sets the rule used to determine the tags associated with a specification.</summary>
    </member>
    <member name="P:DriveWorks.ProjectSpecialVariables.SpecificationTagsSpecialVariable">
      <summary>Gets the special variable used to determine the tags associated with the current specification.</summary>
    </member>
    <member name="P:DriveWorks.ProjectSpecialVariables.TouchPointHitPosition">
      <summary>Gets the position that the TouchPoint ray hit.</summary>
    </member>
    <member name="M:DriveWorks.ProjectSpecificationProperties.Create(System.String)">
      <summary>Creates a new specification property with the given name.</summary>
      <returns>The newly created specification property.</returns>
      <param name="propertyName">The name of the specification property.</param>
    </member>
    <member name="M:DriveWorks.ProjectSpecificationProperties.Move(System.Int32,System.Int32)">
      <summary>Moves the property at the given index to the specified new index.</summary>
      <param name="oldIndex">The index of the property to move.</param>
      <param name="newIndex">The new index of the property.</param>
    </member>
    <member name="M:DriveWorks.ProjectSpecificationProperties.TryGetProperty(System.String,DriveWorks.ProjectSpecificationProperty@)">
      <summary>Tries to get a specification property with the specified name.</summary>
      <returns>True if the property is found and returned, otherwise false.</returns>
      <param name="propertyName">The name of the property to get.</param>
      <param name="result">Receives the property with the given name.</param>
    </member>
    <member name="P:DriveWorks.ProjectSpecificationProperties.Count">
      <summary>Gets the number of items in the collection.</summary>
    </member>
    <member name="P:DriveWorks.ProjectSpecificationProperties.Item(System.Int32)">
      <summary>Gets the item at the given index.</summary>
      <param name="index">The index of the item to get.</param>
    </member>
    <member name="P:DriveWorks.ProjectSpecificationProperties.Item(System.Int32)">
      <summary>Gets the item at the given index.</summary>
      <param name="index">The index of the item to get.</param>
    </member>
    <member name="P:DriveWorks.ProjectSpecificationProperties.Item(System.String)">
      <summary>Gets the item with the given name.</summary>
      <exception caption="" cref="T:DriveWorks.ItemNotFoundException">An item with the given name does not exist.</exception>
      <param name="propertyName">The name of the item to get.</param>
    </member>
    <member name="E:DriveWorks.ProjectSpecificationProperties.PropertyCommentChanged">
      <summary>Raised when a specification property's comment is changed.</summary>
    </member>
    <member name="E:DriveWorks.ProjectSpecificationProperties.PropertyCreated">
      <summary>Raised when a new specification property is created.</summary>
    </member>
    <member name="E:DriveWorks.ProjectSpecificationProperties.PropertyDeleted">
      <summary>Raised when a specification property is deleted.</summary>
    </member>
    <member name="E:DriveWorks.ProjectSpecificationProperties.PropertyMoved">
      <summary>Raised when the index of a specification property is changed.</summary>
    </member>
    <member name="E:DriveWorks.ProjectSpecificationProperties.PropertyNameChanged">
      <summary>Raised when the name of a specification property is changed.</summary>
    </member>
    <member name="E:DriveWorks.ProjectSpecificationProperties.PropertyRuleChanged">
      <summary>Raised when a specification property's rule is changed.</summary>
    </member>
    <member name="E:DriveWorks.ProjectSpecificationProperties.PropertyValueChanged">
      <summary>Raised when a specification property's value changes.</summary>
    </member>
    <member name="M:DriveWorks.ProjectSpecificationProperty.Delete">
      <summary>Deletes the specification property.</summary>
    </member>
    <member name="M:DriveWorks.ProjectSpecificationProperty.SetRuleAndComment(System.String,System.String)">
      <summary>Sets the rule and comment in a single operation.</summary>
    </member>
    <member name="P:DriveWorks.ProjectSpecificationProperty.Comment">
      <summary>Gets/sets the comment.</summary>
    </member>
    <member name="P:DriveWorks.ProjectSpecificationProperty.Index">
      <summary>Gets the index of the property.</summary>
    </member>
    <member name="P:DriveWorks.ProjectSpecificationProperty.IsDeleted">
      <summary>Determines whether the property has been deleted.</summary>
    </member>
    <member name="P:DriveWorks.ProjectSpecificationProperty.Name">
      <summary>Gets/sets the name of the property.</summary>
    </member>
    <member name="P:DriveWorks.ProjectSpecificationProperty.Rule">
      <summary>Gets/sets the rule.</summary>
    </member>
    <member name="P:DriveWorks.ProjectSpecificationProperty.Value">
      <summary>Gets the calculated value of the rule.</summary>
    </member>
    <member name="E:DriveWorks.ProjectSpecificationProperty.CommentChanged">
      <summary>The comment changed.</summary>
    </member>
    <member name="E:DriveWorks.ProjectSpecificationProperty.Deleted">
      <summary>The property has been deleted.</summary>
    </member>
    <member name="E:DriveWorks.ProjectSpecificationProperty.IndexChanged">
      <summary>Raised when the index property changes.</summary>
    </member>
    <member name="E:DriveWorks.ProjectSpecificationProperty.NameChanged">
      <summary>Raised when the name of the property changes.</summary>
    </member>
    <member name="E:DriveWorks.ProjectSpecificationProperty.RuleChanged">
      <summary>The rule changed.</summary>
    </member>
    <member name="E:DriveWorks.ProjectSpecificationProperty.ValueChanged">
      <summary>Raised when the value of the property changes.</summary>
    </member>
    <member name="M:DriveWorks.ProjectSpecificationPropertyEventArgs.#ctor(DriveWorks.ProjectSpecificationProperty)">
      <summary>Initializes an instance of the  class.</summary>
      <param name="prop">The property affected by the event.</param>
    </member>
    <member name="P:DriveWorks.ProjectSpecificationPropertyEventArgs.SpecificationProperty">
      <summary>Gets the property that was affected by the event.</summary>
    </member>
    <member name="P:DriveWorks.ProjectSpecificationSettings.AdditionalFoldersRelativeToSpecificationFolder">
      <summary>Gets/sets whether additional folders' paths are calculated relative to the specification's folder, if false, they are calculated relative to the default
specification folder instead.</summary>
    </member>
    <member name="P:DriveWorks.ProjectSpecificationSettings.DescriptionFilePath">
      <summary>Gets/sets the path to a file to be shown in the new specification UI when the project is selected.</summary>
    </member>
    <member name="P:DriveWorks.ProjectSpecificationSettings.DocumentsRelativeToSpecificationFolder">
      <summary>Gets/sets whether documents' paths are calculated relative to the specification's folder, if false, they are calculated relative to the default specification
folder instead.</summary>
    </member>
    <member name="P:DriveWorks.ProjectSpecificationSettings.EmbedChildSpecifications">
      <summary>Gets/sets whether child specifications should be saved within this project, rather than being saved to their own directory and being registered as it's own
specification.</summary>
    </member>
    <member name="P:DriveWorks.ProjectSpecificationSettings.HideMetadataDirectory">
      <summary>Gets/sets whether the metadata directory is hidden if used.</summary>
    </member>
    <member name="P:DriveWorks.ProjectSpecificationSettings.MetadataDirectoryName">
      <summary>Gets/sets the name of a directory which will act as a container for artifacts used to manage a specification, or a null reference to put them in the
specification folder.</summary>
    </member>
    <member name="P:DriveWorks.ProjectSpecificationSettings.ReportingLevel">
      <summary>Gets/sets the reporting level for specifications created from the project.</summary>
    </member>
    <member name="P:DriveWorks.ProjectSpecificationSettings.SupportsEmbedChildSpecifications">
      <summary>Gets whether this project supports embedded child specifications or not.</summary>
    </member>
    <member name="M:DriveWorks.ProjectUtility.CreateNameSearchProcess(System.String)">
      <summary>Creates a new process capable of searching for named items in all rules in the project.</summary>
      <param name="referenceName">The name to search for.</param>
    </member>
    <member name="M:DriveWorks.ProjectUtility.EnsureValidRuleSnippet(System.String,System.Int32@,System.Int32@)">
      <summary>Ensures the given indices marks a valid subsection in the given formula.</summary>
      <returns>Whether or not the given indices have been changed.</returns>
      <param name="formula">The formula to sample from.</param>
      <param name="startIndex">The start index of the subsection.</param>
      <param name="endIndex">The end index of the subsection.</param>
    </member>
    <member name="M:DriveWorks.ProjectUtility.EvaluateDistanceMeasurement(System.String,DriveWorks.DistanceMeasurementUnitOptions)">
      <summary>Evaluates the given measurement string and returns the result in the specified units.</summary>
      <returns>The value of the measurement in the specified units.</returns>
      <param name="measurement">A measurement string, for example "(4 + 5)ft 3' 7mm"</param>
      <param name="desiredUnits">The units to convert the result into.</param>
    </member>
    <member name="M:DriveWorks.ProjectUtility.GenerateRuleStringFromValue(System.Object)">
      <summary>Converts the value of a static property into a dynamic rule string.</summary>
      <param name="value">The value of the static property to be converted.</param>
    </member>
    <member name="M:DriveWorks.ProjectUtility.GenericRuleResultToDisplayString(System.Object,System.Globalization.CultureInfo)">
      <summary>Converts the result of a rule calcuation to a human readable string.</summary>
      <param name="value">The value to convert.</param>
      <param name="ci">The culture to use when converting.</param>
    </member>
    <member name="M:DriveWorks.ProjectUtility.GetAllFunctions">
      <summary>Returns a collection of all functions loaded in this design master.</summary>
    </member>
    <member name="M:DriveWorks.ProjectUtility.GetFunctionNames">
      <summary>Returns a list of supported callable functions for this project</summary>
    </member>
    <member name="M:DriveWorks.ProjectUtility.GetTokens(System.String)">
      <summary>Gets all tokens in the given formula.</summary>
      <returns>A list of the tokens that make up the given formula.</returns>
      <param name="ruleText">The formula to retrieve the tokens from.</param>
    </member>
    <member name="M:DriveWorks.ProjectUtility.MatchTokens(System.Collections.Generic.IEnumerable{DriveWorks.Utility.RuleToken},System.Collections.Generic.IEnumerable{DriveWorks.Utility.RuleToken})">
      <summary>Finds a sequence of RuleTokens within another sequence.</summary>
      <returns>A list of all start and end indices of the given sequence.</returns>
      <param name="collection">The collection to search in.</param>
      <param name="sequence">The sequence to find.</param>
    </member>
    <member name="M:DriveWorks.ProjectUtility.ParseRule(System.String)">
      <summary>Parses the specified rule into an instance of .</summary>
      <returns>The parse result.</returns>
      <param name="ruleText">The rule to be parsed.</param>
    </member>
    <member name="M:DriveWorks.ProjectUtility.ReplaceSequenceInRule(System.String,System.String,System.String)">
      <summary>Replaces all occurrences of a sequence within the given formula.</summary>
      <returns>The new formula.</returns>
      <param name="formula">The formula to replace all occurrences in.</param>
      <param name="oldSequence">The sequence to locate and replace.</param>
      <param name="newSequence">The replacement text.</param>
    </member>
    <member name="M:DriveWorks.ProjectUtility.ResolvePath(System.String,DriveWorks.RelativeToDirectory)">
      <summary>Resolves a prefixed file path. See remarks for details.</summary>
      <returns>The resolved file path.</returns>
      <param name="filePath">The file path to resolve, e.g. "&lt;Project&gt;\SomeFile.txt"</param>
      <param name="relativePathBehavior">The behavior of the resolution if the file path specified is relative rather than qualified with a standard prefix.</param>
    </member>
    <member name="M:DriveWorks.ProjectUtility.RuleResultToDisplayString(System.Object,System.Globalization.CultureInfo)">
      <summary>Converts the specified rule result to a string suitable for display.</summary>
      <param name="value">The value to convert.</param>
      <param name="ci">The culture info to use, if null is specified, the current UI culture is used.</param>
    </member>
    <member name="M:DriveWorks.ProjectUtility.SerialStringToRuleResult(System.String)">
      <summary>Converts the specified serialized string to a value.</summary>
      <returns>The converted value.</returns>
      <param name="value">The value to convert.</param>
    </member>
    <member name="M:DriveWorks.ProjectUtility.TableCellValueToDisplayString(System.Object,System.Globalization.CultureInfo)">
      <summary>Converts the specified table cell's value to a string suitable for display.</summary>
      <returns>The display string for the table cell's value.</returns>
      <param name="value">The table cell's value to convert.</param>
      <param name="culture">The culture info to use, if null is specified the current UI culture is used.</param>
    </member>
    <member name="M:DriveWorks.ProjectUtility.UpdateNamesInRule(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>Updates the names in the given rule.</summary>
      <returns>The updated rule.</returns>
      <param name="ruleText">The rule in which to update names.</param>
      <param name="nameMappings">An dictionary of mappings from old name to new name.</param>
    </member>
    <member name="M:DriveWorks.ProjectUtility.ValidateFormula(System.String)">
      <summary>Determines if the given formula is valid or not.</summary>
      <returns>True if the formula is valid.</returns>
      <param name="formula">The formula to validate</param>
    </member>
    <member name="M:DriveWorks.ProjectUtility.CreateRuleSearchProcess(System.String[])">
      <summary>Creates a new process capable of searching for parts of a rule in all rules in the project.</summary>
      <param name="searchStrings">The parts of a rule to locate.</param>
    </member>
    <member name="M:DriveWorks.ProjectUtility.CreateRuleSearchProcess(System.String)">
      <summary>Creates a new process capable of searching for parts of a rule in all rules in the project.</summary>
      <param name="searchString">The part of a rule to locate.</param>
    </member>
    <member name="M:DriveWorks.ProjectVariable.Delete">
      <summary>Deletes the variable</summary>
    </member>
    <member name="M:DriveWorks.ProjectVariable.DeleteCore">
      <summary>Performs the work of deleting the variable from the backing store.</summary>
    </member>
    <member name="M:DriveWorks.ProjectVariable.EnumerateVersionHistory">
      <summary>Gets the version history for the variable.</summary>
    </member>
    <member name="M:DriveWorks.ProjectVariable.GetVersionHistory">
      <summary>Gets the version history for the variable.</summary>
    </member>
    <member name="M:DriveWorks.ProjectVariable.SaveVersion">
      <summary>Adds an entry to the variable's history.</summary>
    </member>
    <member name="M:DriveWorks.ProjectVariable.SetRuleAndComment(System.String,System.String)">
      <summary>Sets the rule and comment in a single operation.</summary>
      <param name="newRule">The new rule.</param>
      <param name="newComment">The new comment.</param>
    </member>
    <member name="P:DriveWorks.ProjectVariable.Category">
      <summary>Gets/sets the category to which the variable belongs.</summary>
    </member>
    <member name="P:DriveWorks.ProjectVariable.Comment">
      <summary>Gets/sets the comment for the variable.</summary>
    </member>
    <member name="P:DriveWorks.ProjectVariable.DisplayName">
      <summary>Gets/sets the display name of the variable.</summary>
    </member>
    <member name="P:DriveWorks.ProjectVariable.Id">
      <summary>Gets the invariant identifier of the rule.</summary>
    </member>
    <member name="P:DriveWorks.ProjectVariable.IsDeleted">
      <summary>Gets whether the variable has been deleted.</summary>
    </member>
    <member name="P:DriveWorks.ProjectVariable.Name">
      <summary>Gets the name of the variable in a form which can be used in rules.</summary>
    </member>
    <member name="P:DriveWorks.ProjectVariable.Project">
      <summary>Gets the project.</summary>
    </member>
    <member name="P:DriveWorks.ProjectVariable.Rule">
      <summary>Gets/sets the rule which governs the variable's value.</summary>
    </member>
    <member name="P:DriveWorks.ProjectVariable.Text">
      <summary>Gets a textual representation of the variable's current value.</summary>
    </member>
    <member name="P:DriveWorks.ProjectVariable.Value">
      <summary>Gets the current value of the variable.</summary>
    </member>
    <member name="E:DriveWorks.ProjectVariable.CategoryChanged">
      <summary>Raised when the variable's category is changed.</summary>
    </member>
    <member name="E:DriveWorks.ProjectVariable.CommentChanged">
      <summary>Raised when the variable's comment is changed.</summary>
    </member>
    <member name="E:DriveWorks.ProjectVariable.Deleted">
      <summary>Raised when the variable is deleted.</summary>
    </member>
    <member name="E:DriveWorks.ProjectVariable.NameChanged">
      <summary>Raised when the name of the variable is changed.</summary>
    </member>
    <member name="E:DriveWorks.ProjectVariable.RuleChanged">
      <summary>Raised when the rule which defines the variable value changes.</summary>
    </member>
    <member name="E:DriveWorks.ProjectVariable.ValueChanged">
      <summary>Raised when the value of the variable changes.</summary>
    </member>
    <member name="M:DriveWorks.ProjectVariableCategories.CreateCategory(System.String)">
      <summary>Creates a new variable category with the specified name.</summary>
      <exception caption="" cref="T:DriveWorks.ItemExistsException">Thrown if a category with the specified name already exists in the current scope.</exception>
      <returns>The newly created variable category.</returns>
      <param name="name">The name of the new category which must be unique in the current scope.</param>
    </member>
    <member name="M:DriveWorks.ProjectVariableCategories.GetCategories">
      <summary>Gets an array of the root-level variable categories.</summary>
    </member>
    <member name="M:DriveWorks.ProjectVariableCategories.GetCategory(System.String)">
      <summary>Gets the named variable category.</summary>
      <exception caption="" cref="T:DriveWorks.ItemNotFoundException">Thrown if the specified category is not found.</exception>
      <param name="name">The name of the variable category to retrieve.</param>
    </member>
    <member name="M:DriveWorks.ProjectVariableCategories.GetCategoryByPath(System.String)">
      <summary>Gets the variable category with the specified path.</summary>
      <returns>The found variable category or nothing if it could not be found.</returns>
      <param name="path">The full path to the variable category, delimited with the backslash character.</param>
    </member>
    <member name="M:DriveWorks.ProjectVariableCategories.GetVariables">
      <summary>Gets all the variables which haven't been registered with a specific category.</summary>
    </member>
    <member name="M:DriveWorks.ProjectVariableCategories.TryGetCategory(System.String,DriveWorks.ProjectVariableCategory@)">
      <summary>Gets the named variable category.</summary>
      <returns>True if the specified variable category was found, otherwise false.</returns>
      <param name="name">The name of the variable category to retrieve.</param>
      <param name="variableCategory">A reference to a variable which will received the variable category.</param>
    </member>
    <member name="P:DriveWorks.ProjectVariableCategories.Project">
      <summary>Gets the project to which the variable category manager belongs.</summary>
    </member>
    <member name="E:DriveWorks.ProjectVariableCategories.CategoryCreated">
      <summary>Raised when a new variable category is created.</summary>
    </member>
    <member name="E:DriveWorks.ProjectVariableCategories.CategoryDeleted">
      <summary>Raised when a variable category is deleted.</summary>
    </member>
    <member name="E:DriveWorks.ProjectVariableCategories.CategoryNameChanged">
      <summary>Raised when a variable category's name changes.</summary>
    </member>
    <member name="E:DriveWorks.ProjectVariableCategories.CategoryParentChanged">
      <summary>Raised when a variable category's parent changes.</summary>
    </member>
    <member name="M:DriveWorks.ProjectVariableCategory.CreateCategory(System.String)">
      <summary>Creates a new variable category with the specified name.</summary>
      <exception caption="" cref="T:DriveWorks.ItemExistsException">Thrown if a category with the specified name already exists in the current scope.</exception>
      <returns>The newly created variable category.</returns>
      <param name="name">The name of the new category which must be unique in the current scope.</param>
    </member>
    <member name="M:DriveWorks.ProjectVariableCategory.Delete">
      <summary>Deletes an empty variable category.</summary>
      <exception caption="" cref="T:System.InvalidOperationException">Thrown if the variable category contains any child categories or variables.</exception>
    </member>
    <member name="M:DriveWorks.ProjectVariableCategory.GetCategories">
      <summary>Gets all the category's child categories.</summary>
    </member>
    <member name="M:DriveWorks.ProjectVariableCategory.GetCategory(System.String)">
      <summary>Gets the child variable category with the specified name.</summary>
      <exception caption="" cref="T:DriveWorks.ItemNotFoundException">Thrown when the specified category is not found.</exception>
      <returns>The named category.</returns>
      <param name="name">The name of the category to get.</param>
    </member>
    <member name="M:DriveWorks.ProjectVariableCategory.GetFullPath">
      <summary>Gets the fully qualified path to the variable category.</summary>
      <returns>A string of the form "RootCategoryName\ChildCategory0\ChildCategory1\ChildCategory...\ThisCategory".</returns>
    </member>
    <member name="M:DriveWorks.ProjectVariableCategory.GetVariables">
      <summary>Gets all the variables in the category.</summary>
    </member>
    <member name="M:DriveWorks.ProjectVariableCategory.TryGetCategory(System.String,DriveWorks.ProjectVariableCategory@)">
      <summary>Tries to get a category with the specified name.</summary>
      <returns>True if the named catgory was found, otherwise false.</returns>
      <param name="name">The name of the category to get.</param>
      <param name="variableCategory">Receives the named category if it was found, otherwise receives a null reference (Nothing in Visual Basic).</param>
    </member>
    <member name="P:DriveWorks.ProjectVariableCategory.Id">
      <summary>Gets the unique string which identifies the variable category.</summary>
    </member>
    <member name="P:DriveWorks.ProjectVariableCategory.ImagePath">
      <summary>Gets/sets the image path for the variable category image</summary>
    </member>
    <member name="P:DriveWorks.ProjectVariableCategory.IsDeleted">
      <summary>Determines whether the variable category has been deleted.</summary>
    </member>
    <member name="P:DriveWorks.ProjectVariableCategory.Name">
      <summary>Gets/sets the name of the variable category.</summary>
    </member>
    <member name="P:DriveWorks.ProjectVariableCategory.Parent">
      <summary>Gets/sets the parent of the category.</summary>
    </member>
    <member name="P:DriveWorks.ProjectVariableCategory.Project">
      <summary>Gets the project to which the variable category belongs.</summary>
    </member>
    <member name="E:DriveWorks.ProjectVariableCategory.Deleted">
      <summary>Raised when the variable category is deleted.</summary>
    </member>
    <member name="E:DriveWorks.ProjectVariableCategory.ImagePathChanged">
      <summary>Raised when the variable image path is changed.</summary>
    </member>
    <member name="E:DriveWorks.ProjectVariableCategory.NameChanged">
      <summary>Raised when the name of the variable category changes.</summary>
    </member>
    <member name="E:DriveWorks.ProjectVariableCategory.ParentChanged">
      <summary>Raised when the parent is changed.</summary>
    </member>
    <member name="M:DriveWorks.ProjectVariables.GetVariable(System.String)">
      <summary>Gets the variable with the specified display name.</summary>
      <exception caption="" cref="T:DriveWorks.ItemNotFoundException">Thrown when no variable with the specified display name exists.</exception>
      <param name="displayName">The display name of the variable to retrieve.</param>
    </member>
    <member name="M:DriveWorks.ProjectVariables.GetVariables">
      <summary>Gets all the variables which exist in the project.</summary>
    </member>
    <member name="M:DriveWorks.ProjectVariables.TryGetVariable(System.String,DriveWorks.ProjectVariable@)">
      <summary>Gets the variable with the specified display name.</summary>
      <returns>True if the variable is found and returned, otherwise false.</returns>
      <param name="displayName">The display name of the variable to retrieve.</param>
      <param name="variable">A reference to a variable which will receive the variable.</param>
    </member>
    <member name="M:DriveWorks.ProjectVariables.CreateVariable(System.String,DriveWorks.ProjectVariableCategory,System.String,System.String)">
      <summary>Creates a new variable with the specified name in the given category.</summary>
      <returns>The newly created variable.</returns>
      <param name="displayName">The name of the new variable.</param>
      <param name="category">The parent category, or a null reference (Nothing in Visual Basic) to leave the variable without a parent category.</param>
      <param name="rule">The initial rule to assign to the variable.</param>
      <param name="comment">The initial comment to assign to the variable.</param>
    </member>
    <member name="M:DriveWorks.ProjectVariables.CreateVariable(System.String,DriveWorks.ProjectVariableCategory,System.String)">
      <summary>Creates a new variable with the specified name in the given category.</summary>
      <returns>The newly created variable.</returns>
      <param name="displayName">The name of the new variable.</param>
      <param name="category">The parent category, or a null reference (Nothing in Visual Basic) to leave the variable without a parent category.</param>
      <param name="rule">The initial rule to assign to the variable.</param>
    </member>
    <member name="P:DriveWorks.ProjectVariables.Project">
      <summary>Gets the project.</summary>
    </member>
    <member name="E:DriveWorks.ProjectVariables.VariableCategoryChanged">
      <summary>Raised when a variable's category changes.</summary>
    </member>
    <member name="E:DriveWorks.ProjectVariables.VariableCommentChanged">
      <summary>Raised when a variable's comment changes.</summary>
    </member>
    <member name="E:DriveWorks.ProjectVariables.VariableCreated">
      <summary>Raised when a variable is created.</summary>
    </member>
    <member name="E:DriveWorks.ProjectVariables.VariableDeleted">
      <summary>Raised when a variable is deleted.</summary>
    </member>
    <member name="E:DriveWorks.ProjectVariables.VariableNameChanged">
      <summary>Raised when a variable's name changes.</summary>
    </member>
    <member name="E:DriveWorks.ProjectVariables.VariableRuleChanged">
      <summary>Raised when a variable's rule changes.</summary>
    </member>
    <member name="E:DriveWorks.ProjectVariables.VariableValueChanged">
      <summary>Raised when a variable's value changes.</summary>
    </member>
    <member name="M:DriveWorks.ReferencedFile.GenerateCore(System.String,DriveWorks.Specification.RuleResults)">
      <summary>When overridden in a derived class, generates the document.</summary>
      <param name="generateDirectory">The full path to the directory which generated files' paths should be created relative to.</param>
      <param name="results">The calculated rule results for the document.</param>
    </member>
    <member name="M:DriveWorks.ReferencedFile.InitializeExistingCore">
      <summary>When overridden in a derived class, performs initialization tasks relevant to an existing document, i.e. during project load.</summary>
    </member>
    <member name="M:DriveWorks.ReferencedFile.InitializeNewCore">
      <summary>When overridden in a derived class, performs initialization tasks relevant to a newly created document.</summary>
    </member>
    <member name="P:DriveWorks.ReferencedFile.IsDisplay">
      <summary>Gets/sets whether the document has a display file rule.</summary>
    </member>
    <member name="P:DriveWorks.ReferencedFile.IsHidden">
      <summary>Gets/sets whether the document is hidden.</summary>
    </member>
    <member name="P:DriveWorks.ReferencedFile.ReferencedFilePath">
      <summary>Gets the rule which controls the path to the referenced file for the document.</summary>
    </member>
    <member name="P:DriveWorks.ReferencedFile.ReferencedFilePathValue">
      <summary>Returns the evaluated path of the referenced file.</summary>
    </member>
    <member name="M:DriveWorks.ReleasedComponentTask.TryGetParameterAsArrayValue(System.String,Titan.Rules.Execution.IArrayValue@)">
      <summary>Attempts to retrieve the value of the parameter with the given name as a .</summary>
      <returns>True if the parameter was found and its value could successfully be converted to a </returns>
      <param name="name">The name of the parameter whose calculated value to retrieve.</param>
      <param name="value">The calculated value of the parameter if the parameter was found.</param>
    </member>
    <member name="M:DriveWorks.ReleasedComponentTask.TryGetParameterValueAsBoolean(System.String,System.Boolean@)">
      <summary>Attempts to retrieve the value of the parameter with the given name as a Boolean.</summary>
      <returns>True if the parameter was found and its value could successfully be converted to a Boolean.</returns>
      <param name="name">The name of the parameter whose calculated value to retrieve.</param>
      <param name="value">The calculated value of the parameter if the parameter was found.</param>
    </member>
    <member name="M:DriveWorks.ReleasedComponentTask.TryGetParameterValueAsDateTime(System.String,System.DateTime@)">
      <summary>Attempts to retrieve the value of the parameter with the given name as a DateTime.</summary>
      <returns>True if the parameter was found and its value could successfully be converted to a DateTime.</returns>
      <param name="name">The name of the parameter whose calculated value to retrieve.</param>
      <param name="value">The calculated value of the parameter if the parameter was found.</param>
    </member>
    <member name="M:DriveWorks.ReleasedComponentTask.TryGetParameterValueAsDouble(System.String,System.Double@)">
      <summary>Attempts to retrieve the value of the parameter with the given name as a Double.</summary>
      <returns>True if the parameter was found and its value could successfully be converted to a Double.</returns>
      <param name="name">The name of the parameter whose calculated value to retrieve.</param>
      <param name="value">The calculated value of the parameter if the parameter was found.</param>
    </member>
    <member name="M:DriveWorks.ReleasedComponentTask.TryGetParameterValueAsEnum``1(System.String,``0@)">
      <summary>Attempts to retrieve the value of the given parameter as an Enum.</summary>
      <returns>True if the parameter was found and its value could successfully be converted to an Enum.</returns>
      <typeparam name="T">The type to convert the released parameter value to.</typeparam>
      <param name="name">The name of the parameter whose calculated value to retrieve.</param>
      <param name="value">The calculated value of the parameter if the parameter was found.</param>
    </member>
    <member name="M:DriveWorks.ReleasedComponentTask.TryGetParameterValueAsInteger(System.String,System.Int32@)">
      <summary>Attempts to retrieve the value of the parameter with the given name as an Integer.</summary>
      <returns>True if the parameter was found and its value could successfully be converted to a Integer.</returns>
      <param name="name">The name of the parameter whose calculated value to retrieve.</param>
      <param name="value">The calculated value of the parameter if the parameter was found.</param>
    </member>
    <member name="M:DriveWorks.ReleasedComponentTask.GetParameterValue(System.String,System.String)">
      <summary>Gets the value of the parameter with the given name as a string, or the fallback value if the parameter could not be found, or has no value.</summary>
      <returns>The value of the parameter, or the fallback value if it wasn't found.</returns>
      <param name="name">The name of the parameter whose value to retrieve.</param>
      <param name="fallbackValue">The value to return if the parameter could not be found.</param>
    </member>
    <member name="M:DriveWorks.ReleasedComponentTask.GetParameterValue``1(System.String,``0)">
      <summary>Retrieves the value of the parameter with the given name, or <paramref name="fallbackValue" /> if it wasn't found.</summary>
      <returns>The value of the parameter, or the fallback value if it wasn't found.</returns>
      <typeparam name="T">The type of the parameter to retrieve.</typeparam>
      <param name="name">The name of the parameter whose value to retrieve.</param>
      <param name="fallbackValue">The value to return if the parameter could not be found.</param>
    </member>
    <member name="M:DriveWorks.ReleasedComponentTask.TryGetParameter(System.String,DriveWorks.Components.Data.ReleasedParameterData@)">
      <summary>Attempts to get the parameter data that matches the specified name.</summary>
      <returns>True if the parameter was found.</returns>
      <param name="name">The name of the parameter to get.</param>
      <param name="parameter">The parameter if it was found.</param>
    </member>
    <member name="M:DriveWorks.ReleasedComponentTask.TryGetParameter(System.String,System.Boolean,DriveWorks.Components.Data.ReleasedParameterData@)">
      <summary>Attempts to get the paramter data that matches the specified name.</summary>
      <returns>True if the parameter was found. If <paramref name="excludeEmpty" /> is True then returns whether the parameter was found and it's value was not empty.</returns>
      <param name="name">The name of the parameter to get.</param>
      <param name="excludeEmpty">True if an empty parameter value should be considered non-existent.</param>
      <param name="parameter">The parameter if it was found.</param>
    </member>
    <member name="M:DriveWorks.ReleasedComponentTask.TryGetParameterValue(System.String,System.String@)">
      <summary>Attempts to retrieve the value of the parameter with the given name.</summary>
      <returns>True if the parameter was found.</returns>
      <param name="name">The name of the parameter whose calculated value to retrieve.</param>
      <param name="value">The calculated value of the parameter if the parameter was found.</param>
    </member>
    <member name="M:DriveWorks.ReleasedComponentTask.TryGetParameterValue(System.String,System.Boolean,System.String@)">
      <summary>Attempts to retrieve the value of the parameter with the given name.</summary>
      <returns>True if the parameter was found.</returns>
      <param name="name">The name of the parameter whose calculated value to retrieve.</param>
      <param name="failOnEmptyString">True if this method should return false if the value is found, but is an empty string.</param>
      <param name="value">The calculated value of the parameter if the parameter was found.</param>
    </member>
    <member name="M:DriveWorks.ReleasedComponentTask.TryGetParameterValue``1(System.String,``0@)">
      <summary>Attempts to retrieve the value of the parameter with the given name as <typeparamref name="T" />.</summary>
      <returns>True if the parameter was found and its value could successfully be converted to a <typeparamref name="T" />.</returns>
      <typeparam name="T">The type to convert the released parameter value to.</typeparam>
      <param name="name">The name of the parameter whose calculated value to retrieve.</param>
      <param name="value">The calculated value of the parameter if the parameter was found.</param>
    </member>
    <member name="M:DriveWorks.ReleasedComponentTask.TryGetParameterValue``1(System.String,System.Boolean,``0@)">
      <summary>Attempts to retrieve the value of the parameter with the given name as <typeparamref name="T" />.</summary>
      <returns>True if the parameter was found and its value could successfully be converted to a <typeparamref name="T" />.</returns>
      <typeparam name="T">The type to convert the released parameter value to.</typeparam>
      <param name="name">The name of the parameter whose calculated value to retrieve.</param>
      <param name="failOnEmptyString">True if this method should return false if the value is found, but is an empty string before conversion.</param>
      <param name="value">The calculated value of the parameter if the parameter was found.</param>
    </member>
    <member name="P:DriveWorks.ReleasedComponentTask.Conditions">
      <summary>Gets the list of conditions that will be evaluated at runtime which governs whether the task will be executed.</summary>
    </member>
    <member name="P:DriveWorks.ReleasedComponentTask.Name">
      <summary>Gets the name of the generation task to be executed.</summary>
    </member>
    <member name="P:DriveWorks.ReleasedComponentTask.TaskType">
      <summary>Gets the name of the type of this task.</summary>
    </member>
    <member name="M:DriveWorks.ReleasedComponentTaskCollection.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
    </member>
    <member name="M:DriveWorks.ReleasedComponentTaskCollection.GetEnumerator1">
      <summary>Returns an enumerator that iterates through the collection.</summary>
    </member>
    <member name="M:DriveWorks.ReleasedEmail.#ctor">
      <summary>Creates an instance of the  class.</summary>
    </member>
    <member name="M:DriveWorks.ReleasedEmail.AddFailure(System.String)">
      <summary>Logs a failed attempt at sending this email.</summary>
      <param name="reason">The reason the email failed to be sent.</param>
    </member>
    <member name="M:DriveWorks.ReleasedEmail.Serialize">
      <summary>Serializes the information about the email.</summary>
      <returns>A byte array representing the serialized email information.</returns>
    </member>
    <member name="M:DriveWorks.ReleasedEmail.Load(System.IO.Stream)">
      <summary>Reads the information stored about the email from the specified stream.</summary>
      <param name="stream">The stream to deserialize and read the information from.</param>
    </member>
    <member name="M:DriveWorks.ReleasedEmail.Load(System.Xml.Linq.XElement)">
      <summary>Reads the information stored about the email from the specified XML element.</summary>
      <param name="element">The XML element to read the information from.</param>
    </member>
    <member name="P:DriveWorks.ReleasedEmail.Attachments">
      <summary>Gets/sets the paths to the attachments to be included in the email.</summary>
    </member>
    <member name="P:DriveWorks.ReleasedEmail.BccAddresses">
      <summary>Gets/sets the email addresses that should be blind carbon copied in on the email.</summary>
    </member>
    <member name="P:DriveWorks.ReleasedEmail.Body">
      <summary>Gets/sets the body text of the email.</summary>
    </member>
    <member name="P:DriveWorks.ReleasedEmail.CcAddresses">
      <summary>Gets/sets the email addresses that should be carbon copied in on the email.</summary>
    </member>
    <member name="P:DriveWorks.ReleasedEmail.FailedCount">
      <summary>Gets the number of failed attempts at trying to send this email.</summary>
    </member>
    <member name="P:DriveWorks.ReleasedEmail.Failures">
      <summary>Gets information regarding the failed attempts at sending the email.</summary>
    </member>
    <member name="P:DriveWorks.ReleasedEmail.LastProcessedDate">
      <summary>Gets/sets the date we last tried to send the email.</summary>
      <returns>Nothing, if this email was an email created before DriveWorks 12.2 or we've not yet tried to send it, otherwise the date we last tried to send the email.</returns>
    </member>
    <member name="P:DriveWorks.ReleasedEmail.PreventOutlookNewLineRemoval">
      <summary>Gets/sets whether we should prevent Outlook from removing breaklines.</summary>
    </member>
    <member name="P:DriveWorks.ReleasedEmail.Recipients">
      <summary>Gets/sets the email addresses that the email should be sent to.</summary>
    </member>
    <member name="P:DriveWorks.ReleasedEmail.ReleaseDate">
      <summary>Gets/sets the date the email was released.</summary>
      <returns>Nothing, if this was an email created before DriveWorks 12.2, otherwise the date the email was released.</returns>
    </member>
    <member name="P:DriveWorks.ReleasedEmail.SendAsHtml">
      <summary>Gets/sets whether to send the email as HTML.</summary>
    </member>
    <member name="P:DriveWorks.ReleasedEmail.Sender">
      <summary>Gets/sets the email address that sent the email.</summary>
    </member>
    <member name="P:DriveWorks.ReleasedEmail.Subject">
      <summary>Gets/sets the subject of the email.</summary>
    </member>
    <member name="M:DriveWorks.ReleasedTriggeredAction.#ctor">
      <summary>Initializes a new  with empty values.</summary>
    </member>
    <member name="M:DriveWorks.ReleasedTriggeredAction.AddFailMessage(System.String)">
      <summary>Add a failure to the  list.</summary>
      <param name="message">The exception message to add to the list.</param>
    </member>
    <member name="M:DriveWorks.ReleasedTriggeredAction.ClearFailures">
      <summary>Clears any failures associated with this triggered action.</summary>
    </member>
    <member name="M:DriveWorks.ReleasedTriggeredAction.Load(DriveWorks.Specification.SpecificationTaskDetails)">
      <summary>Reads the information stored about the triggered action from the specified task.</summary>
      <param name="task">The task to deserialize and read the information from.</param>
    </member>
    <member name="M:DriveWorks.ReleasedTriggeredAction.SynchronizeData">
      <summary>Synchronizes the XML for this triggered action with its specification task.</summary>
    </member>
    <member name="M:DriveWorks.ReleasedTriggeredAction.UpdateFilePath(System.String,System.String)">
      <summary>Updates the specified file path to the new location.</summary>
      <param name="pathToChange">An existing file path that the triggered action is looking for.</param>
      <param name="newPath">The new path to replace the old location with.</param>
    </member>
    <member name="P:DriveWorks.ReleasedTriggeredAction.Action">
      <summary>Gets/sets the name of the operation or transition to run.</summary>
    </member>
    <member name="P:DriveWorks.ReleasedTriggeredAction.Element">
      <summary>Gets the XML element of the triggered action.</summary>
    </member>
    <member name="P:DriveWorks.ReleasedTriggeredAction.FailedCount">
      <summary>Gets the amount of times that the triggered action has failed to execute.</summary>
    </member>
    <member name="P:DriveWorks.ReleasedTriggeredAction.FailureMessages">
      <summary>Gets information regarding failed attempts at executing the triggered action.</summary>
    </member>
    <member name="P:DriveWorks.ReleasedTriggeredAction.FilePaths">
      <summary>Gets an array of file paths that the triggered action is waiting for.</summary>
    </member>
    <member name="P:DriveWorks.ReleasedTriggeredAction.FilePathsDisplayValue">
      <summary>Gets/sets the pipe delimited string of the file paths that the triggered action is waiting for.</summary>
    </member>
    <member name="P:DriveWorks.ReleasedTriggeredAction.Name">
      <summary>Gets/sets the Name of the triggered action document.</summary>
    </member>
    <member name="P:DriveWorks.ReleasedTriggeredAction.Task">
      <summary>Gets the task information associated with this triggered action.</summary>
    </member>
    <member name="M:DriveWorks.ReleaseParameterDataContainer.GetParameterValue(System.String)">
      <summary>Retrieves the value of the parameter with the given name.</summary>
      <returns>This method returns null (Nothing in Visual Basic) if the parameter was not found.</returns>
      <param name="name">The name of the parameter whose calculated value to retrieve.</param>
    </member>
    <member name="M:DriveWorks.ReleaseParameterDataContainer.TryGetParameterValueAsBoolean(System.String,System.Boolean@)">
      <summary>Attempts to retrieve the value of the parameter with the given name as a Boolean.</summary>
      <returns>True if the parameter was found and it's value could successfully be converted to a Boolean.</returns>
      <param name="name">The name of the parameter whose calculated value to retrieve.</param>
      <param name="value">The calculated value of the parameter if the parameter was found.</param>
    </member>
    <member name="M:DriveWorks.ReleaseParameterDataContainer.TryGetParameterValueAsDateTime(System.String,System.DateTime@)">
      <summary>Attempts to retrieve the value of the parameter with the given name as a DateTime.</summary>
      <returns>True if the parameter was found and it's value could successfully be converted to a DateTime.</returns>
      <param name="name">The name of the parameter whose calculated value to retrieve.</param>
      <param name="value">The calculated value of the parameter if the parameter was found.</param>
    </member>
    <member name="M:DriveWorks.ReleaseParameterDataContainer.TryGetParameterValueAsDouble(System.String,System.Double@)">
      <summary>Attempts to retrieve the value of the parameter with the given name as a Double.</summary>
      <returns>True if the parameter was found and it's value could successfully be converted to a Double.</returns>
      <param name="name">The name of the parameter whose calculated value to retrieve.</param>
      <param name="value">The calculated value of the parameter if the parameter was found.</param>
    </member>
    <member name="M:DriveWorks.ReleaseParameterDataContainer.TryGetParameterValueAsInteger(System.String,System.Int32@)">
      <summary>Attempts to retrieve the value of the parameter with the given name as an Integer.</summary>
      <returns>True if the parameter was found and it's value could successfully be converted to a Integer.</returns>
      <param name="name">The name of the parameter whose calculated value to retrieve.</param>
      <param name="value">The calculated value of the parameter if the parameter was found.</param>
    </member>
    <member name="M:DriveWorks.ReleaseParameterDataContainer.TryGetParameter(System.String,DriveWorks.Components.Data.ReleasedParameterData@)">
      <summary>Attempts to get the parameter data that matches the specified name.</summary>
      <returns>True if the parameter was found.</returns>
      <param name="name">The name of the parameter to get.</param>
      <param name="parameter">The parameter if it was found.</param>
    </member>
    <member name="M:DriveWorks.ReleaseParameterDataContainer.TryGetParameter(System.String,System.Boolean,DriveWorks.Components.Data.ReleasedParameterData@)">
      <summary>Attempts to get the paramter data that matches the specified name.</summary>
      <returns>True if the parameter was found. If <paramref name="excludeEmpty" /> is True then returns whether the parameter was found and it's value was not empty.</returns>
      <param name="name">The name of the parameter to get.</param>
      <param name="excludeEmpty">True if an empty parameter value should be considered non-existent.</param>
      <param name="parameter">The parameter if it was found.</param>
    </member>
    <member name="M:DriveWorks.ReleaseParameterDataContainer.TryGetParameterValue(System.String,System.String@)">
      <summary>Attempts to retrieve the value of the parameter with the given name.</summary>
      <returns>True if the parameter was found.</returns>
      <param name="name">The name of the parameter whose calculated value to retrieve.</param>
      <param name="value">The calculated value of the parameter if the parameter was found.</param>
    </member>
    <member name="M:DriveWorks.ReleaseParameterDataContainer.TryGetParameterValue(System.String,System.Boolean,System.String@)">
      <summary>Attempts to retrieve the value of the parameter with the given name.</summary>
      <returns>True if the parameter was found.</returns>
      <param name="name">The name of the parameter whose calculated value to retrieve.</param>
      <param name="failOnEmptyString">True if this method should return false if the value is found, but is an empty string.</param>
      <param name="value">The calculated value of the parameter if the parameter was found.</param>
    </member>
    <member name="M:DriveWorks.ReleaseParameterDataContainer.TryGetParameterValue``1(System.String,``0@)">
      <summary>Attempts to retrieve the value of the parameter with the given name as <typeparamref name="T" />.</summary>
      <returns>True if the parameter was found and it's value could successfully be converted to a <typeparamref name="T" />.</returns>
      <typeparam name="T">The type to convert the released parameter value to.</typeparam>
      <param name="name">The name of the parameter whose calculated value to retrieve.</param>
      <param name="value">The calculated value of the parameter if the parameter was found.</param>
    </member>
    <member name="M:DriveWorks.ReleaseParameterDataContainer.TryGetParameterValue``1(System.String,System.Boolean,``0@)">
      <summary>Attempts to retrieve the value of the parameter with the given name as <typeparamref name="T" />.</summary>
      <returns>True if the parameter was found and it's value could successfully be converted to a <typeparamref name="T" />.</returns>
      <typeparam name="T">The type to convert the released parameter value to.</typeparam>
      <param name="name">The name of the parameter whose calculated value to retrieve.</param>
      <param name="failOnEmptyString">True if this method should return false if the value is found, but is an empty string before conversion.</param>
      <param name="value">The calculated value of the parameter if the parameter was found.</param>
    </member>
    <member name="M:DriveWorks.RemoteGroupBrowser.#ctor(DriveWorks.RemoteGroupServer)">
      <summary>Creates a new remote group browser for the specified remote group server.</summary>
    </member>
    <member name="M:DriveWorks.RemoteGroupBrowser.Start">
      <summary>Starts the browser service.</summary>
    </member>
    <member name="M:DriveWorks.RemoteGroupBrowser.Stop">
      <summary>Stops the browser service.</summary>
    </member>
    <member name="M:DriveWorks.RemoteGroupManager.Connect(System.String)">
      <summary>Connects to the specified remote group server.</summary>
      <param name="serverName">The name of the server to which to connect.</param>
    </member>
    <member name="M:DriveWorks.RemoteGroupManager.CreateGroup(System.String,System.String,System.String,DriveWorks.Security.IProviderCredentials)">
      <summary>Creates a new group with the specified details</summary>
      <param name="groupName">The name of the group to create.</param>
      <param name="creationUsername">The server's admin username.</param>
      <param name="creationPassword">The server's admin password.</param>
      <param name="credentials">Initial login details for the new group.</param>
    </member>
    <member name="M:DriveWorks.RemoteGroupManager.DeleteGroup(System.String,System.String,System.String)">
      <summary>Deletes a group from the server.</summary>
      <param name="groupName">The name of the group to delete.</param>
      <param name="creationUsername">The server's admin username.</param>
      <param name="creationPassword">The server's admin password.</param>
    </member>
    <member name="M:DriveWorks.RemoteGroupManager.GetGroupDetails">
      <summary>Gets a collection of all the groups on the server and their details.</summary>
    </member>
    <member name="M:DriveWorks.RemoteGroupManager.GetGroupNames">
      <summary>Gets a collection of all the groups on the server that are available to connect to.</summary>
    </member>
    <member name="M:DriveWorks.RemoteGroupManager.ReleaseOwnership(System.String)">
      <summary>Orders the server to release ownership of the specified group providing that the group is not in use by this server.</summary>
      <param name="groupName">The name of the group to be released</param>
    </member>
    <member name="M:DriveWorks.RemoteGroupManager.UpscaleGroup(System.IO.Stream,System.String,System.String,System.String)">
      <summary>Converts the specified group into shared group that will be hosted by this server.</summary>
      <param name="drivegroupStream">File stream to the drivegroup file that you wish to convert.</param>
      <param name="groupName">The name of the group to upscale to - this can be different from the original group name.</param>
      <param name="creationUsername">The server's admin username.</param>
      <param name="creationPassword">The server's admin password.</param>
    </member>
    <member name="M:DriveWorks.RemoteGroupServer.#ctor(System.String)">
      <summary>Creates a new remote group server for the specified SQL Server connection.</summary>
      <param name="connectionString">The connection string to use to connect to the SQL Server.</param>
    </member>
    <member name="M:DriveWorks.RemoteGroupServer.EnsureTcpPortSharingServiceIsSetup">
      <summary>Enables pro server and its services to be hosted in more than one application at once.</summary>
    </member>
    <member name="M:DriveWorks.RemoteGroupServer.Stop">
      <summary>Stops the underlying Remote Admin and Group Connection services.</summary>
    </member>
    <member name="M:DriveWorks.RemoteGroupServer.Start">
      <summary>Starts the underlying Remote Admin and Group Connection services.</summary>
    </member>
    <member name="M:DriveWorks.RemoteGroupServer.Start(System.ServiceModel.Dispatcher.IErrorHandler,System.ServiceModel.Dispatcher.IErrorHandler)">
      <summary>Starts the underlying Remote Admin and Group Connection services.</summary>
    </member>
    <member name="P:DriveWorks.RemoteGroupVersionDetails.Major">
      <summary>Gets the major version number.</summary>
    </member>
    <member name="P:DriveWorks.RemoteGroupVersionDetails.Minor">
      <summary>Gets the minor version number.</summary>
    </member>
    <member name="M:DriveWorks.ReportDetails.#ctor(System.Guid,System.String,System.DateTime,System.Nullable{System.DateTime},System.String)">
      <summary>Initializes a new instance of the  class.</summary>
      <param name="id">The unique identifier of the report.</param>
      <param name="title">The title of the report.</param>
      <param name="dateStarted">The date the report was started.</param>
      <param name="dateCompleted">The date the report was completed.</param>
      <param name="path">The path to the report if it is a legacy DriveWorks 6 report.</param>
    </member>
    <member name="P:DriveWorks.ReportDetails.DateCompleted">
      <summary>Gets the date and time the report was completed, or a null reference if the report has not been completed.</summary>
    </member>
    <member name="P:DriveWorks.ReportDetails.DateStarted">
      <summary>Gets the date and time the report was started.</summary>
    </member>
    <member name="P:DriveWorks.ReportDetails.ErrorCount">
      <summary>Gets the number of error entries in this report.</summary>
    </member>
    <member name="P:DriveWorks.ReportDetails.Id">
      <summary>Gets the unique identifier of the report.</summary>
    </member>
    <member name="P:DriveWorks.ReportDetails.InformationCount">
      <summary>Gets the number of information entries in this report.</summary>
    </member>
    <member name="P:DriveWorks.ReportDetails.Path">
      <summary>Gets the path to the report file if the report is a legacy DriveWorks 6 report.</summary>
    </member>
    <member name="P:DriveWorks.ReportDetails.Title">
      <summary>Gets the title of the report.</summary>
    </member>
    <member name="P:DriveWorks.ReportDetails.WarningCount">
      <summary>Gets the number of warning entries in this report.</summary>
    </member>
    <member name="M:DriveWorks.RollupDataTable.GetColumnNames(System.Boolean)">
      <summary>Gets the names of the columns that data will be retrieved for in any child specifications.</summary>
      <param name="includeDefault">If True, includes the default columns in the result. By default this is False.</param>
    </member>
    <member name="M:DriveWorks.RollupDataTable.GetPlaceholderData">
      <summary>Gets the placeholder data for the table.</summary>
      <returns>The placeholder data without the table column headings.  should be used to retrieve the complete table.</returns>
    </member>
    <member name="M:DriveWorks.RollupDataTable.SetChosenColumns(System.String[])">
      <summary>Sets the names of the columns that data will be retrieved for in any child specifications.</summary>
      <param name="columnNames">The chosen column names.</param>
    </member>
    <member name="M:DriveWorks.RollupDataTable.UpdatePlaceholderData(System.String[0:,0:])">
      <summary>Updates the placeholder data with the new values.</summary>
      <param name="newData">The new placeholder data. If Nothing or an empty 2D array is passed in then this will clear the data.</param>
    </member>
    <member name="P:DriveWorks.RollupDataTable.StoreIsSerialized">
      <summary>Gets whether the store should be serialized.</summary>
    </member>
    <member name="M:DriveWorks.RuleChangeData.#ctor(System.String,System.String,System.String)">
      <summary>Creates a new instance of the  class.</summary>
      <param name="ruleName">The name of the rule.</param>
      <param name="formula">The formula to apply to the rule.</param>
      <param name="comment">The comment to apply to the rule.</param>
    </member>
    <member name="M:DriveWorks.RuleChangeData.#ctor(System.String,System.String,System.String,System.Object)">
      <summary>Creates a new instance of the  class.</summary>
      <param name="ruleName">The name of the rule.</param>
      <param name="formula">The formula to apply to the rule.</param>
      <param name="comment">The comment to apply to the rule.</param>
      <param name="value">The value to apply to the rule.</param>
    </member>
    <member name="M:DriveWorks.RuleChangeData.#ctor(System.String,System.String,System.String,System.Object,System.Nullable{System.Boolean})">
      <summary>Creates a new instance of the  class.</summary>
      <param name="ruleName">The name of the rule.</param>
      <param name="formula">The formula to apply to the rule.</param>
      <param name="comment">The comment to apply to the rule.</param>
      <param name="value">The value to apply to the rule.</param>
      <param name="isDynamic">Whether the property should be dynamic.</param>
    </member>
    <member name="P:DriveWorks.RuleChangeData.Comment">
      <summary>The new comment to apply to the rule.</summary>
    </member>
    <member name="P:DriveWorks.RuleChangeData.Formula">
      <summary>The new rule formula to apply to the rule.</summary>
    </member>
    <member name="P:DriveWorks.RuleChangeData.IsDynamic">
      <summary>Whether the rule should be dynamic.</summary>
    </member>
    <member name="P:DriveWorks.RuleChangeData.RuleName">
      <summary>The name of the rule that will change.</summary>
    </member>
    <member name="P:DriveWorks.RuleChangeData.Value">
      <summary>The new value of the rule.</summary>
    </member>
    <member name="M:DriveWorks.RuleSectionUtility.GetLocalizedName(DriveWorks.RuleSection)">
      <summary>Gets the localized name of the specified enum.</summary>
      <returns>The localized name of the value.</returns>
      <param name="section">The value to get the localized string of.</param>
    </member>
    <member name="P:DriveWorks.RuleVersionDetails.Comment">
      <summary>Gets the comment for the version.</summary>
    </member>
    <member name="P:DriveWorks.RuleVersionDetails.Rule">
      <summary>Gets the rule for the version.</summary>
    </member>
    <member name="P:DriveWorks.RuleVersionDetails.UserDisplayName">
      <summary>Gets the display name of the user, which changed the rule and/or comment, as it was when the change was made.</summary>
    </member>
    <member name="P:DriveWorks.RuleVersionDetails.UserId">
      <summary>Gets the unique identifier of the user which changed the rule and/or comment.</summary>
    </member>
    <member name="P:DriveWorks.RuleVersionDetails.VersionDate">
      <summary>Gets the date that the rule and/or comment were changed.</summary>
    </member>
    <member name="M:DriveWorks.SettingChangedEventArgs.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the  class.</summary>
      <param name="settingName">The name of the setting that was changed.</param>
      <param name="settingValue">The new value of the setting that was changed.</param>
    </member>
    <member name="P:DriveWorks.SettingChangedEventArgs.SettingName">
      <summary>Gets the name of the setting that was changed.</summary>
    </member>
    <member name="P:DriveWorks.SettingChangedEventArgs.SettingValue">
      <summary>Gets the new value of the setting that was changed.</summary>
    </member>
    <member name="P:DriveWorks.SharedGroupDetails.GroupName">
      <summary>Gets the name of the group.</summary>
    </member>
    <member name="P:DriveWorks.SharedGroupDetails.MajorVersion">
      <summary>Gets the major version number of the group.</summary>
    </member>
    <member name="P:DriveWorks.SharedGroupDetails.MinorVersion">
      <summary>Gets the minor version number of the group.</summary>
    </member>
    <member name="P:DriveWorks.SharedGroupDetails.OwnerName">
      <summary>Gets the owner name (machine name) of the server that is hosting the group currently.</summary>
    </member>
    <member name="P:DriveWorks.SharedGroupDetails.RevisionVersion">
      <summary>Gets the revision version number of the group.</summary>
    </member>
    <member name="M:DriveWorks.SimpleDataTable.SetTableData(System.Object[0:,0:])">
      <summary>Set data for this table.</summary>
      <param name="data">The new data to set to this table.</param>
    </member>
    <member name="M:DriveWorks.SimpleTableExport.GetDetails">
      <summary>Gets the details for this document.</summary>
    </member>
    <member name="M:DriveWorks.SimpleTableExport.GetExportSummary">
      <summary>Gets a summary of changes that would take place if the document was generated now.</summary>
    </member>
    <member name="P:DriveWorks.SimpleTableExport.TableName">
      <summary>Gets/sets the name of the table that this document will drive.</summary>
    </member>
    <member name="M:DriveWorks.SpecificationDialogMessage.#ctor(DriveWorks.Specification.SpecificationContext,System.String,System.String,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxButtons)">
      <summary>Creates a new instance of the  class.</summary>
      <param name="specification">The specification that this message is is being raised from.</param>
      <param name="messageBody">The main text that will appear in the message to the user.</param>
      <param name="messageTitle">The title for the message.</param>
      <param name="messageIcon">The type of icon that will appear next the message.</param>
      <param name="messageButtons">The available options that the user will have to respond with.</param>
    </member>
    <member name="P:DriveWorks.SpecificationDialogMessage.Specification">
      <summary>The specification that this message has been raised from.</summary>
    </member>
    <member name="M:DriveWorks.SpecificationMacroCategories.CreateCategory(System.String)">
      <summary>Creates a new macro category with the specified name.</summary>
      <exception caption="" cref="T:DriveWorks.ItemExistsException">Thrown if a category with the specified name already exists in the current scope.</exception>
      <returns>The newly created macro category.</returns>
      <param name="name">The name of the new category which must be unique in the current scope.</param>
    </member>
    <member name="M:DriveWorks.SpecificationMacroCategories.GetCategories">
      <summary>Gets an array of the root-level macro categories.</summary>
    </member>
    <member name="M:DriveWorks.SpecificationMacroCategories.GetCategory(System.String)">
      <summary>Gets the named category.</summary>
      <exception caption="" cref="T:DriveWorks.ItemNotFoundException">Thrown if the specified category is not found.</exception>
      <returns>The found category.</returns>
      <param name="name">The name of the category to retrieve.</param>
    </member>
    <member name="M:DriveWorks.SpecificationMacroCategories.GetCategoryByPath(System.String)">
      <summary>Gets the category with the specified path.</summary>
      <returns>The found category or nothing if it could not be found.</returns>
      <param name="path">The full path to the category, delimited with the backslash character.</param>
    </member>
    <member name="M:DriveWorks.SpecificationMacroCategories.TryGetCategory(System.String,DriveWorks.SpecificationMacroCategory@)">
      <summary>Gets the named category.</summary>
      <returns>True if the specified category was found, otherwise false.</returns>
      <param name="name">The name of the category to retrieve.</param>
      <param name="macroCategory">A reference to a macro which will receive the category.</param>
    </member>
    <member name="P:DriveWorks.SpecificationMacroCategories.Project">
      <summary>Gets the project to which the macro category manager belongs.</summary>
    </member>
    <member name="E:DriveWorks.SpecificationMacroCategories.CategoryCreated">
      <summary>Raised when a new specification macro category is created.</summary>
    </member>
    <member name="E:DriveWorks.SpecificationMacroCategories.CategoryDeleted">
      <summary>Raised when a macro category is deleted.</summary>
    </member>
    <member name="E:DriveWorks.SpecificationMacroCategories.CategoryNameChanged">
      <summary>Raised when a macro category's name changes.</summary>
    </member>
    <member name="E:DriveWorks.SpecificationMacroCategories.CategoryParentChanged">
      <summary>Raised when a macro category's parent changes.</summary>
    </member>
    <member name="M:DriveWorks.SpecificationMacroCategory.CreateCategory(System.String)">
      <summary>Creates a new macro category with the specified name.</summary>
      <exception caption="" cref="T:DriveWorks.ItemExistsException">Thrown if a category with the specified name already exists in the current scope.</exception>
      <returns>The newly created macro category.</returns>
      <param name="name">The name of the new category which must be unique in the current scope.</param>
    </member>
    <member name="M:DriveWorks.SpecificationMacroCategory.Delete">
      <summary>Deletes an empty macro category.</summary>
      <exception caption="" cref="T:System.InvalidOperationException">Thrown if the macro category contains any child categories or macros.</exception>
    </member>
    <member name="M:DriveWorks.SpecificationMacroCategory.GetCategories">
      <summary>Gets all the category's child categories.</summary>
    </member>
    <member name="M:DriveWorks.SpecificationMacroCategory.GetCategory(System.String)">
      <summary>Gets the child specification macro category with the specified name.</summary>
      <exception caption="" cref="T:DriveWorks.ItemNotFoundException">Thrown when the specified category is not found.</exception>
      <returns>The named category.</returns>
      <param name="name">The name of the category to get.</param>
    </member>
    <member name="M:DriveWorks.SpecificationMacroCategory.GetFullPath">
      <summary>Gets the fully qualified path to the macro category.</summary>
      <returns>A string of the form "RootCategoryName\ChildCategory0\ChildCategory1\ChildCategory...\ThisCategory".</returns>
    </member>
    <member name="M:DriveWorks.SpecificationMacroCategory.GetMacros">
      <summary>Gets all the macros in the category.</summary>
    </member>
    <member name="M:DriveWorks.SpecificationMacroCategory.TryGetCategory(System.String,DriveWorks.SpecificationMacroCategory@)">
      <summary>Tries to get a category with the specified name.</summary>
      <returns>True if the named category was found, otherwise false.</returns>
      <param name="name">The name of the category to get.</param>
      <param name="macroCategory">Receives the named category if it was found, otherwise receives a null reference.</param>
    </member>
    <member name="P:DriveWorks.SpecificationMacroCategory.Id">
      <summary>Gets the unique string which identifies the macro category.</summary>
    </member>
    <member name="P:DriveWorks.SpecificationMacroCategory.IsDeleted">
      <summary>Determines whether the specification macro category has been deleted.</summary>
    </member>
    <member name="P:DriveWorks.SpecificationMacroCategory.Name">
      <summary>Gets/sets the name of the macro category.</summary>
    </member>
    <member name="P:DriveWorks.SpecificationMacroCategory.Parent">
      <summary>Gets the parent of the category.</summary>
    </member>
    <member name="E:DriveWorks.SpecificationMacroCategory.Deleted">
      <summary>Raised when the macro category is deleted.</summary>
    </member>
    <member name="E:DriveWorks.SpecificationMacroCategory.NameChanged">
      <summary>Raised when the name of the macro category changes.</summary>
    </member>
    <member name="E:DriveWorks.SpecificationMacroCategory.ParentChanged">
      <summary>Raised when the parent is changed.</summary>
    </member>
    <member name="M:DriveWorks.SpecificationMacroCategoryEventArgs.#ctor(DriveWorks.SpecificationMacroCategory)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="category">The category that was changed.</param>
    </member>
    <member name="P:DriveWorks.SpecificationMacroCategoryEventArgs.Category">
      <summary>Gets the category that was changed.</summary>
    </member>
    <member name="M:DriveWorks.SqlServerDataTable.GetFields">
      <summary>The fields that are used from the selected table.</summary>
    </member>
    <member name="M:DriveWorks.SqlServerDataTable.RefreshOnProjectLoad">
      <summary>Allow fresh on load option.</summary>
    </member>
    <member name="M:DriveWorks.SqlServerDataTable.SetChosenFields(System.String[])">
      <summary>Sets the chosen fields for this table.</summary>
    </member>
    <member name="P:DriveWorks.SqlServerDataTable.AllFields">
      <summary>If all the available fields should be read, as apposed to reading the specified ones.</summary>
    </member>
    <member name="P:DriveWorks.SqlServerDataTable.DatabaseName">
      <summary>The database name to connect to.</summary>
    </member>
    <member name="P:DriveWorks.SqlServerDataTable.Password">
      <summary>The password (if any) used to connect to the SQL server.</summary>
    </member>
    <member name="P:DriveWorks.SqlServerDataTable.RefreshTableOnLoad">
      <summary>If the data from the table should be re-loaded each time the project is launched.</summary>
    </member>
    <member name="P:DriveWorks.SqlServerDataTable.ServerAddress">
      <summary>The SQL server address, including the instance name.</summary>
    </member>
    <member name="P:DriveWorks.SqlServerDataTable.TableName">
      <summary>The name of the table to read from.</summary>
    </member>
    <member name="P:DriveWorks.SqlServerDataTable.TableSchema">
      <summary>The schema of the table to read from.</summary>
    </member>
    <member name="P:DriveWorks.SqlServerDataTable.Username">
      <summary>The username (if any) used to connect to the SQL server.</summary>
    </member>
    <member name="P:DriveWorks.SqlServerDataTable.WindowsAuthentication">
      <summary>Whether to use Windows authentication to sign into the SQL database.</summary>
    </member>
    <member name="M:DriveWorks.SqlServerExport.AddColumn(System.String,System.String,DriveWorks.ColumnType)">
      <summary>Adds a column that is present in the target table.</summary>
      <returns>The column definition.</returns>
      <param name="name">The name of the column.</param>
      <param name="type">The data type for this column.</param>
      <param name="columnType">The type of column - Common, Control or Not Specified.</param>
    </member>
    <member name="M:DriveWorks.SqlServerExport.AddCommonColumn(System.String,System.String,System.String,System.String)">
      <summary>Adds a common column to the table.</summary>
      <param name="name">The name of this column.</param>
      <param name="type">The data type for this column.</param>
      <param name="commonRule">The common rule to set for this column.</param>
      <param name="commonComment">The common comment to set for the column.</param>
    </member>
    <member name="M:DriveWorks.SqlServerExport.AddRow(System.Collections.Generic.IDictionary{System.String,DriveWorks.Abstractions.IHasRule})">
      <summary>Adds a row to the list of export rows.</summary>
      <param name="fields">The dictionary of fields that are specified on this row. Key is the field name and the Value is the rule for the cell.</param>
    </member>
    <member name="M:DriveWorks.SqlServerExport.ClearColumns">
      <summary>Removes all column specifications.</summary>
    </member>
    <member name="M:DriveWorks.SqlServerExport.ClearRows">
      <summary>Removes all rows from the list of export rows.</summary>
    </member>
    <member name="M:DriveWorks.SqlServerExport.GetExportSummary">
      <summary>Retrieve the generation summary for the document in a specifications test mode.</summary>
    </member>
    <member name="M:DriveWorks.SqlServerExport.RemoveRow(DriveWorks.DataExportRowDefinition)">
      <summary>Removes a row from the list of rows to be exported.</summary>
      <param name="row">The row to be removed.</param>
    </member>
    <member name="P:DriveWorks.SqlServerExport.Columns">
      <summary>Gets an array of all the columns that are used in the table.</summary>
    </member>
    <member name="P:DriveWorks.SqlServerExport.CommonColumns">
      <summary>Gets A collection of common columns. Common columns are always the same for each row. Used to save calculation time.</summary>
    </member>
    <member name="P:DriveWorks.SqlServerExport.ControlColumns">
      <summary>Gets a collection of control columns. Control columns depict where export row data is to match the existing data for updating/appending rows.</summary>
    </member>
    <member name="P:DriveWorks.SqlServerExport.DatabaseName">
      <summary>Gets/Sets the name of the SQL Server database to connect to.</summary>
    </member>
    <member name="P:DriveWorks.SqlServerExport.ExportWhen">
      <summary>Gets/Sets when the data will be exported during the specification.</summary>
    </member>
    <member name="P:DriveWorks.SqlServerExport.Password">
      <summary>Gets/Sets the Password that is used to connect to the SQL Server.</summary>
    </member>
    <member name="P:DriveWorks.SqlServerExport.Rows">
      <summary>Gets all of the new rows that will be updated or append the table.</summary>
    </member>
    <member name="P:DriveWorks.SqlServerExport.ServerName">
      <summary>Gets/Sets the name of the SQL Server to connect to.</summary>
    </member>
    <member name="P:DriveWorks.SqlServerExport.TableName">
      <summary>Gets/Sets the name of the table to connect to.</summary>
    </member>
    <member name="P:DriveWorks.SqlServerExport.UserName">
      <summary>Gets/Sets the Username that is used to connect to the SQL Server.</summary>
    </member>
    <member name="P:DriveWorks.SqlServerExport.WindowsAuthentication">
      <summary>Determines whether to use Windows Authentication to connect to the SQL Server.</summary>
    </member>
    <member name="P:DriveWorks.SqlTestResult.ConnectionEstablished">
      <summary>Whether or not the SQL connection was established.</summary>
    </member>
    <member name="P:DriveWorks.SqlTestResult.ErrorMessage">
      <summary>An error reported from attempting a connection to the SQL server (or Null if there were no issues).</summary>
    </member>
    <member name="P:DriveWorks.SqlTestResult.Permissions">
      <summary>A full collection of SQL permissions that were associated with the connection on the SQL server.</summary>
    </member>
    <member name="P:DriveWorks.SqlTestResult.WindowsAccountNameUsed">
      <summary>If a windows account was used to connect to the server then this is the full name of that account.</summary>
    </member>
    <member name="F:DriveWorks.StandardRuleTypes.CalculationTableName">
      <summary>The rule or value defines the name of a calculation table.</summary>
    </member>
    <member name="F:DriveWorks.StandardRuleTypes.ChildSpecificationColumns">
      <summary>The rule or value defines a list of result column names for a child specification list control.</summary>
    </member>
    <member name="F:DriveWorks.StandardRuleTypes.ChildSpecificationList">
      <summary>The rule or value defines the name of a child specification list.</summary>
    </member>
    <member name="F:DriveWorks.StandardRuleTypes.ColumnWidths">
      <summary>The rule or value defines a list of column widths for the data table control.</summary>
    </member>
    <member name="F:DriveWorks.StandardRuleTypes.ComponentFileName">
      <summary>The rule or value defines the filename of a component.</summary>
    </member>
    <member name="F:DriveWorks.StandardRuleTypes.ComponentFileNames">
      <summary>The rule or value defines filenames of components.</summary>
    </member>
    <member name="F:DriveWorks.StandardRuleTypes.ComponentRelativePath">
      <summary>The rule or value defines the relative path of a component.</summary>
    </member>
    <member name="F:DriveWorks.StandardRuleTypes.ConstantName">
      <summary>The rule or value defines the name of a constant.</summary>
    </member>
    <member name="F:DriveWorks.StandardRuleTypes.ControlName">
      <summary>The rule or value defines the name of a control.</summary>
    </member>
    <member name="F:DriveWorks.StandardRuleTypes.DataTableControlItemFields">
      <summary>The rule or value defines a list of field names for a data table control.</summary>
    </member>
    <member name="F:DriveWorks.StandardRuleTypes.DateFormat">
      <summary>The rule or value defines a date format string.</summary>
    </member>
    <member name="F:DriveWorks.StandardRuleTypes.DateTime">
      <summary>The rule or value defines a date and or time.</summary>
    </member>
    <member name="F:DriveWorks.StandardRuleTypes.DirectoryPath">
      <summary>The rule or value defines the path of a folder.</summary>
    </member>
    <member name="F:DriveWorks.StandardRuleTypes.DocumentFileName">
      <summary>The rule or value defines the filename of a document.</summary>
    </member>
    <member name="F:DriveWorks.StandardRuleTypes.DocumentGenerationBehavior">
      <summary>The rule or value defines document generation behaviour.</summary>
    </member>
    <member name="F:DriveWorks.StandardRuleTypes.DocumentName">
      <summary>The rule or value defines the name of a document.</summary>
    </member>
    <member name="F:DriveWorks.StandardRuleTypes.DocumentNames">
      <summary>The rule or value defines the names of documents.</summary>
    </member>
    <member name="F:DriveWorks.StandardRuleTypes.DocumentRelativePath">
      <summary>The rule or value defines the relative path of a document.</summary>
    </member>
    <member name="F:DriveWorks.StandardRuleTypes.EmailNames">
      <summary>The rule or value defines the names of email documents.</summary>
    </member>
    <member name="F:DriveWorks.StandardRuleTypes.ExternalProjectMacroName">
      <summary>The rule or value for the name of a Macro that is in a different project.</summary>
    </member>
    <member name="F:DriveWorks.StandardRuleTypes.FileExportType">
      <summary>The rule or value defines a list of file types to export to.</summary>
    </member>
    <member name="F:DriveWorks.StandardRuleTypes.FileFilter">
      <summary>The rule or value defines a filter for acceptable file types.</summary>
    </member>
    <member name="F:DriveWorks.StandardRuleTypes.FilePath">
      <summary>The rule or value defines the path of a file.</summary>
    </member>
    <member name="F:DriveWorks.StandardRuleTypes.FileSize">
      <summary>The rule or value defines the size of a file.</summary>
    </member>
    <member name="F:DriveWorks.StandardRuleTypes.FormMessage">
      <summary>The rule or value defines a form message.</summary>
    </member>
    <member name="F:DriveWorks.StandardRuleTypes.FormName">
      <summary>The rule or value defines the name of a form.</summary>
    </member>
    <member name="F:DriveWorks.StandardRuleTypes.GroupTableName">
      <summary>The rule or value defines the name of a group table.</summary>
    </member>
    <member name="F:DriveWorks.StandardRuleTypes.ImageFilePath">
      <summary>The rule or value defines the path of an image file.</summary>
    </member>
    <member name="F:DriveWorks.StandardRuleTypes.ItemListColumns">
      <summary>The rule or value defines a list of item value column names for an item list control.</summary>
    </member>
    <member name="F:DriveWorks.StandardRuleTypes.LightingPresetName">
      <summary>The rule or value for a name of a lighting preset name - used with 3D preview.</summary>
    </member>
    <member name="F:DriveWorks.StandardRuleTypes.MacroName">
      <summary>The rule or value defines the name of a macro.</summary>
    </member>
    <member name="F:DriveWorks.StandardRuleTypes.OperationName">
      <summary>The rule or value defines the name of a specification operation.</summary>
    </member>
    <member name="F:DriveWorks.StandardRuleTypes.OwnerName">
      <summary>The rule or value defines the name of a possible specification owner.</summary>
    </member>
    <member name="F:DriveWorks.StandardRuleTypes.PreviewControlName">
      <summary>The rule or value defines the name of a 3D Preview control.</summary>
    </member>
    <member name="F:DriveWorks.StandardRuleTypes.PreviewDocumentName">
      <summary>The rule or value defines the name of a 3D Preview control.</summary>
    </member>
    <member name="F:DriveWorks.StandardRuleTypes.ProjectName">
      <summary>The rule or value defines the name of a DriveWorks Project.</summary>
    </member>
    <member name="F:DriveWorks.StandardRuleTypes.ScrollVisibility">
      <summary>The rule or value defines the visibility of a scroll bar.</summary>
    </member>
    <member name="F:DriveWorks.StandardRuleTypes.SimpleTableName">
      <summary>The rule or value defines the name of a simple table.</summary>
    </member>
    <member name="F:DriveWorks.StandardRuleTypes.SpecificationFlowStateName">
      <summary>The rule or value for a name of a specification flow state.</summary>
    </member>
    <member name="F:DriveWorks.StandardRuleTypes.SpecificationHostName">
      <summary>The rule or value for a name of a Specification Host.</summary>
    </member>
    <member name="F:DriveWorks.StandardRuleTypes.TableName">
      <summary>The rule or value defines the name of a table.</summary>
    </member>
    <member name="F:DriveWorks.StandardRuleTypes.TeamName">
      <summary>The rule or value defines the name of a Team</summary>
    </member>
    <member name="F:DriveWorks.StandardRuleTypes.TextHorizontalAlignment">
      <summary>The rule or value defines text's horizontal alignment. This can be either Left, Center or Right.</summary>
    </member>
    <member name="F:DriveWorks.StandardRuleTypes.TextVerticalAlignment">
      <summary>The rule or value defines text's vertical alignment. This can be either Top, Center or Bottom.</summary>
    </member>
    <member name="F:DriveWorks.StandardRuleTypes.TimeSpanSeconds">
      <summary>The rule or value defines a time span in seconds.</summary>
    </member>
    <member name="F:DriveWorks.StandardRuleTypes.TransitionName">
      <summary>The rule or value defines the name of a specification transition.</summary>
    </member>
    <member name="F:DriveWorks.StandardRuleTypes.UseLocalValueFormat">
      <summary>The rule or value dictates whether a value should be converted to the current culture.</summary>
    </member>
    <member name="F:DriveWorks.StandardRuleTypes.UserName">
      <summary>The rule or value defines the name of a user.</summary>
    </member>
    <member name="F:DriveWorks.StandardRuleTypes.VariableName">
      <summary>The rule or value defines the name of a variable.</summary>
    </member>
    <member name="M:DriveWorks.StandardSchemas.GetCapturedComponentSchema">
      <summary>Gets the embedded schema from the Engine.</summary>
    </member>
    <member name="M:DriveWorks.StandardSchemas.GetComponentSetSchema">
      <summary>Gets the embedded schema from the Engine.</summary>
    </member>
    <member name="M:DriveWorks.StandardSchemas.GetComponentTaskSchema">
      <summary>Gets the embedded schema from the engine.</summary>
    </member>
    <member name="M:DriveWorks.StandardSchemas.GetDriveComponentSchema">
      <summary>Gets the embedded schema from the Engine.</summary>
    </member>
    <member name="M:DriveWorks.StandardSchemas.GetEventFlowSchema">
      <summary>Gets the embedded schema from the Engine.</summary>
    </member>
    <member name="M:DriveWorks.StandardSchemas.GetProjectSchema">
      <summary>Gets the embedded schema from the Engine.</summary>
    </member>
    <member name="M:DriveWorks.StandardSchemas.GetSpecificationFlowSchema">
      <summary>Gets the embedded schema from the Engine.</summary>
    </member>
    <member name="M:DriveWorks.StandardSchemas.GetSpecificationSchema">
      <summary>Gets the embedded schema from the Engine.</summary>
    </member>
    <member name="M:DriveWorks.StandardSchemas.GetTypesSchema">
      <summary>Gets the embedded schema from the Engine.</summary>
    </member>
    <member name="F:DriveWorks.StandardSchemas.CapturedComponentNamespace">
      <summary>Gets the XML namespace for captured components.</summary>
    </member>
    <member name="F:DriveWorks.StandardSchemas.ComponentSetNamespace">
      <summary>Gets the XML namespace for component sets.</summary>
    </member>
    <member name="F:DriveWorks.StandardSchemas.ComponentTaskNamespace">
      <summary>Gets the XML namespace for component tasks.</summary>
    </member>
    <member name="F:DriveWorks.StandardSchemas.DriveComponentNamespace">
      <summary>Gets the XML namespace for drive components.</summary>
    </member>
    <member name="F:DriveWorks.StandardSchemas.EventFlowNamespace">
      <summary>Gets the XML namespace for event flows.</summary>
    </member>
    <member name="F:DriveWorks.StandardSchemas.FormNamespace">
      <summary>Gets the XML namespace which denotes a form.</summary>
    </member>
    <member name="F:DriveWorks.StandardSchemas.ProjectNamespace">
      <summary>Gets the XML namespace which denotes a project.</summary>
    </member>
    <member name="F:DriveWorks.StandardSchemas.SpecificationFlowNamespace">
      <summary>Gets the XML namespace used for specification flow.</summary>
    </member>
    <member name="F:DriveWorks.StandardSchemas.SpecificationNamespace">
      <summary>Gets the XML namespace which denotes a specification.</summary>
    </member>
    <member name="F:DriveWorks.StandardSchemas.TypesNamespace">
      <summary>Gets the XML namespace which denotes the common types schema.</summary>
    </member>
    <member name="P:DriveWorks.TableExportCell.Header">
      <summary>Gets the header for the field that this cell is in.</summary>
    </member>
    <member name="P:DriveWorks.TableExportCell.Rule">
      <summary>Gets the rule for this cell.</summary>
    </member>
    <member name="P:DriveWorks.TableExportColumn.CommonRule">
      <summary>Gets the rule for this column if it is common.</summary>
    </member>
    <member name="P:DriveWorks.TableExportColumn.Header">
      <summary>Gets the header of this column.</summary>
    </member>
    <member name="P:DriveWorks.TableExportColumn.IsCommon">
      <summary>Gets/sets whether this column is common.</summary>
    </member>
    <member name="P:DriveWorks.TableExportColumn.IsControl">
      <summary>Gets/sets whether this is a control column.</summary>
    </member>
    <member name="E:DriveWorks.TableExportColumn.CommonRuleChanged">
      <summary>Raised when the common rule for this column has changed.</summary>
    </member>
    <member name="M:DriveWorks.TableExportColumns.Add(System.String)">
      <summary>Adds a column to this collection with the specified header.</summary>
      <returns>The created Column.</returns>
      <param name="header">The header to give the new column.</param>
    </member>
    <member name="M:DriveWorks.TableExportColumns.Clear">
      <summary>Removes all columns from this collection of columns.</summary>
    </member>
    <member name="M:DriveWorks.TableExportColumns.GetEnumerator">
      <summary>Gets an enumerator that iterates over the collection.</summary>
    </member>
    <member name="M:DriveWorks.TableExportColumns.Remove(DriveWorks.TableExportColumn)">
      <summary>Removes the specified column from this collection of columns.</summary>
      <returns>True if the column was removed.</returns>
      <param name="column">The column to remove.</param>
    </member>
    <member name="M:DriveWorks.TableExportDetails.CommitChanges">
      <summary>Applies all changed values to the export document.</summary>
    </member>
    <member name="M:DriveWorks.TableExportDetails.CommitChangesCore">
      <summary>Applies all changed values to the element.</summary>
    </member>
    <member name="P:DriveWorks.TableExportDetails.Columns">
      <summary>Gets the export columns used in the export document</summary>
    </member>
    <member name="P:DriveWorks.TableExportDetails.Element">
      <summary>Gets the main element that should only be modified during commit.</summary>
    </member>
    <member name="P:DriveWorks.TableExportDetails.Exports">
      <summary>Gets the export rows used in this export document.</summary>
    </member>
    <member name="M:DriveWorks.TableExportRow.Add(System.String)">
      <summary>Adds a cell with the specified column header to this row.</summary>
      <returns>The created cell.</returns>
      <param name="header">The header of the column that this cell will belong to.</param>
    </member>
    <member name="M:DriveWorks.TableExportRow.GetCells">
      <summary>Gets all cells that have been given a value on this export row.</summary>
    </member>
    <member name="M:DriveWorks.TableExportRow.Remove(DriveWorks.TableExportCell)">
      <summary>Removes the specified cell from this row.</summary>
      <returns>True if the cell was removed.</returns>
      <param name="cell">The cell to remove from this row.</param>
    </member>
    <member name="M:DriveWorks.TableExportRow.TryGetCell(System.String,DriveWorks.TableExportCell@)">
      <summary>Attempts to get the cell for the specified header.</summary>
      <returns>True if the cell was found.</returns>
      <param name="header">The header of the column to get the corresponding cell for.</param>
      <param name="cell">The reference to set the cell to if found.</param>
    </member>
    <member name="P:DriveWorks.TableExportRow.Cell(System.String)">
      <summary>Gets a cell with the specified header from this row.</summary>
      <param name="header">The column header for the cell to fetch.</param>
    </member>
    <member name="M:DriveWorks.TableExportRows.Add">
      <summary>Adds a row to this collection of rows.</summary>
      <returns>The created row.</returns>
    </member>
    <member name="M:DriveWorks.TableExportRows.GetEnumerator">
      <summary>Gets an enumerator that iterates over the collection.</summary>
    </member>
    <member name="M:DriveWorks.TableExportRows.Insert(System.Int32)">
      <summary>Inserts a row to this collection of rows.</summary>
      <returns>The created row.</returns>
    </member>
    <member name="M:DriveWorks.TableExportRows.Remove(DriveWorks.TableExportRow)">
      <summary>Removes the specified row from this collection of rows.</summary>
      <returns>True if the row was removed.</returns>
      <param name="row">The row to remove.</param>
    </member>
    <member name="P:DriveWorks.TableExportSummary.Errors">
      <summary>Collection of error messages from the summary generation.</summary>
    </member>
    <member name="P:DriveWorks.TableExportSummary.ExportDetails">
      <summary>The details of the export that this summary is for.</summary>
    </member>
    <member name="P:DriveWorks.TableExportSummary.Rows">
      <summary>Collection of summary details for individual rows that could be exported.</summary>
    </member>
    <member name="P:DriveWorks.TableExportSummary.Warnings">
      <summary>Collection of warning message from the summary generation.</summary>
    </member>
    <member name="M:DriveWorks.TextDocument.GetLines">
      <summary>Gets the lines that make up the text document.</summary>
      <returns>The text document's lines.</returns>
    </member>
    <member name="M:DriveWorks.TextDocument.ShouldGenerate(DriveWorks.Specification.RuleResults)">
      <summary>Determines whether the document should be generated.</summary>
      <returns>True if the hasn't been suppressed, otherwise false.</returns>
      <param name="results">The results of the rules in the document.</param>
    </member>
    <member name="P:DriveWorks.TextDocument.DocumentNameRule">
      <summary>Gets the rule that specifies the document's name when generated.</summary>
    </member>
    <member name="P:DriveWorks.TextDocument.DocumentPathRule">
      <summary>Gets the rule that specifies the path where the document will be generated to.</summary>
    </member>
    <member name="P:DriveWorks.TextDocument.IsHidden">
      <summary>Gets/sets whether the document will be hidden from the documents list.</summary>
    </member>
    <member name="M:DriveWorks.TextDocumentLine.#ctor(DriveWorks.ProjectDocumentRules,System.Int32)">
      <summary>Creates an instance of the  class.</summary>
      <param name="rules">The rules stored in the project.</param>
      <param name="lineNumber">The position of this line in the document (1 based).</param>
    </member>
    <member name="M:DriveWorks.TextDocumentLine.#ctor(DriveWorks.ProjectDocumentRules,System.Int32,System.Xml.Linq.XElement)">
      <summary>Creates a new instance of the  class.</summary>
      <param name="rules">The rules stored in the project.</param>
      <param name="lineNumber">The position of the line within the document.</param>
      <param name="lineElement">The XML element that represents the line in the Text Document.</param>
    </member>
    <member name="M:DriveWorks.TextDocumentLine.UpdateLine(System.String,System.String,System.String)">
      <summary>Updates the rule, comment and value for this line.</summary>
      <param name="rule">The new rule for the line.</param>
      <param name="comment">The new comment for the line's rule.</param>
      <param name="value">The calculated value of the new rule.</param>
    </member>
    <member name="P:DriveWorks.TextDocumentLine.Comment">
      <summary>Gets the comment for the line's rule.</summary>
    </member>
    <member name="P:DriveWorks.TextDocumentLine.DisplayName">
      <summary>Gets the name to display in the RulesBuilder for this line's rule.</summary>
    </member>
    <member name="P:DriveWorks.TextDocumentLine.Formula">
      <summary>Gets the formula for the line's rule, as a string.</summary>
    </member>
    <member name="P:DriveWorks.TextDocumentLine.LineNumber">
      <summary>Gets the position of this line within the document.</summary>
    </member>
    <member name="P:DriveWorks.TextDocumentLine.Rule">
      <summary>Gets the rule for the line.</summary>
    </member>
    <member name="P:DriveWorks.TextDocumentLine.Value">
      <summary>Gets the calculated value of the line.</summary>
    </member>
    <member name="E:DriveWorks.TextDocumentLine.PropertyChanged">
      <summary>Raised when a property on the line has changed.</summary>
    </member>
    <member name="M:DriveWorks.TextDocumentLineRuleWrapper.GetVersionHistory">
      <summary>Gets the version history for the line's rule.</summary>
    </member>
    <member name="M:DriveWorks.TextDocumentLineRuleWrapper.SetRuleAndComment(System.String,System.String)">
      <summary>Sets the rule and comment.</summary>
      <param name="newRule">The new rule.</param>
      <param name="newComment">The new comment.</param>
    </member>
    <member name="P:DriveWorks.TextDocumentLineRuleWrapper.Comment">
      <summary>Gets/sets the comment for the rule.</summary>
    </member>
    <member name="P:DriveWorks.TextDocumentLineRuleWrapper.DisplayName">
      <summary>Gets the display name for the rule.</summary>
    </member>
    <member name="P:DriveWorks.TextDocumentLineRuleWrapper.IsWritable">
      <summary>Gets whether the rule and comment can be written to.</summary>
    </member>
    <member name="P:DriveWorks.TextDocumentLineRuleWrapper.Rule">
      <summary>Gets/sets the rule.</summary>
    </member>
    <member name="P:DriveWorks.TextDocumentLineRuleWrapper.WrappedRule">
      <summary>Gets the rule this rule wraps.</summary>
    </member>
    <member name="M:DriveWorks.TextDocumentLines.#ctor(DriveWorks.ProjectDocumentRules,System.Xml.Linq.XElement)">
      <summary>Creates a new instance of the  class.</summary>
      <param name="rules">The rules stored in the project.</param>
      <param name="element">The XML element from the Project XML that represents the lines in a TextDocument.</param>
    </member>
    <member name="M:DriveWorks.TextDocumentLines.AddLine">
      <summary>Adds a line to the bottom of the document.</summary>
    </member>
    <member name="M:DriveWorks.TextDocumentLines.CalculateValues">
      <summary>Calculates the values for every line in the document.</summary>
    </member>
    <member name="M:DriveWorks.TextDocumentLines.ClearLines">
      <summary>Removes all lines in the document.</summary>
    </member>
    <member name="M:DriveWorks.TextDocumentLines.CommitChanges">
      <summary>Stores the changes to the document in the Project.</summary>
    </member>
    <member name="M:DriveWorks.TextDocumentLines.GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection of .</summary>
    </member>
    <member name="M:DriveWorks.TextDocumentLines.GetLines">
      <summary>Gets the lines for the document.</summary>
      <returns>A collection of lines for the document.</returns>
    </member>
    <member name="M:DriveWorks.TextDocumentLines.MoveLineDown(DriveWorks.TextDocumentLine)">
      <summary>Moves the specified line down one place.</summary>
      <param name="line">The line to move down.</param>
    </member>
    <member name="M:DriveWorks.TextDocumentLines.MoveLineUp(DriveWorks.TextDocumentLine)">
      <summary>Moves the specified line up one place.</summary>
      <param name="line">The line to move up.</param>
    </member>
    <member name="M:DriveWorks.TextDocumentLines.Remove(DriveWorks.TextDocumentLine)">
      <summary>Removes the specified line from the document.</summary>
      <param name="line">The line to remove.</param>
    </member>
    <member name="M:DriveWorks.TriggeredAction.ShouldGenerate(DriveWorks.Specification.RuleResults)">
      <summary>Determines whether the document should be generated.</summary>
      <returns>Returns True if the document should be generated.</returns>
      <param name="results">The calculated rule results for the document.</param>
    </member>
    <member name="P:DriveWorks.TriggeredAction.ActionNameRule">
      <summary>The rule for the name of the operation or transition to run (operations will be executed preferentially).</summary>
    </member>
    <member name="P:DriveWorks.TriggeredAction.TagsRule">
      <summary>The rule for associating tags with the triggered action.</summary>
    </member>
    <member name="P:DriveWorks.TriggeredAction.TriggeringFilesRule">
      <summary>The rule for the files whose existence trigger the action.</summary>
    </member>
    <member name="P:DriveWorks.TriggeredActionDetails.Action">
      <summary>Gets the name of the action to perform when the files exist.</summary>
    </member>
    <member name="P:DriveWorks.TriggeredActionDetails.Element">
      <summary>Gets the XML associated with this released triggered action.</summary>
    </member>
    <member name="P:DriveWorks.TriggeredActionDetails.Failures">
      <summary>Gets the failures from any attempts made to run the triggered action.</summary>
    </member>
    <member name="P:DriveWorks.TriggeredActionDetails.FilePaths">
      <summary>Gets the paths to the files that the triggered action is waiting to exist.</summary>
    </member>
    <member name="P:DriveWorks.TriggeredActionDetails.Name">
      <summary>Gets the name of the triggered action document.</summary>
    </member>
    <member name="P:DriveWorks.TriggeredActionFileResult.Resolved">
      <summary>Gets or sets the resolved result for the file.</summary>
    </member>
    <member name="P:DriveWorks.TriggeredActionFileResult.Result">
      <summary>Gets or sets the raw result for the file.</summary>
    </member>
    <member name="P:DriveWorks.TriggeredActionFileResult.Status">
      <summary>Gets or sets the status of the file entry.</summary>
    </member>
    <member name="P:DriveWorks.TriggeredActionTestResult.ActionNameResult">
      <summary>Gets or sets the result of the  rule.</summary>
    </member>
    <member name="P:DriveWorks.TriggeredActionTestResult.TagsResult">
      <summary>Gets or sets the result of the  rule.</summary>
    </member>
    <member name="P:DriveWorks.TriggeredActionTestResult.TriggeringFilesResult">
      <summary>Gets or sets the result of the  rule.</summary>
    </member>
    <member name="P:DriveWorks.TriggeredActionTestResult.WillGenerate">
      <summary>Determines whether one or more rules would prevent the document from being generated.</summary>
    </member>
    <member name="M:DriveWorks.UnknownDataTableProviderException.#ctor(System.String)">
      <summary>Creates a new instance of the  class.</summary>
      <param name="dataTableName">The name of the table.</param>
    </member>
    <member name="M:DriveWorks.UnknownDataTableProviderException.#ctor(System.String,System.String)">
      <summary>Creates a new instance of the  class.</summary>
      <param name="dataTableName">The name of the table.</param>
      <param name="typeName">The full name of the unknown type.</param>
    </member>
    <member name="P:DriveWorks.UnknownDataTableProviderException.DocumentName">
      <summary>Gets the name of the table.</summary>
    </member>
    <member name="P:DriveWorks.UnknownDataTableProviderException.TableType">
      <summary>Gets the type of the table.</summary>
    </member>
    <member name="M:DriveWorks.UnknownDocumentProviderException.#ctor(System.String)">
      <summary>Creates a new instance of the  class.</summary>
      <param name="documentName">The name of the document.</param>
    </member>
    <member name="M:DriveWorks.UnknownDocumentProviderException.#ctor(System.String,System.String)">
      <summary>Creates a new instance of the  class.</summary>
      <param name="documentName">The name of the document.</param>
      <param name="documentType">The type of the document.</param>
    </member>
    <member name="P:DriveWorks.UnknownDocumentProviderException.DocumentName">
      <summary>The name of the document.</summary>
    </member>
    <member name="P:DriveWorks.UnknownDocumentProviderException.DocumentType">
      <summary>The type of the document.</summary>
    </member>
    <member name="M:DriveWorks.UpgradeGroupDialogMessage.#ctor(System.String)">
      <summary>Creates an instance of the  class.</summary>
      <param name="groupUpgradeMessage">The message to display to the end user.</param>
    </member>
    <member name="P:DriveWorks.UpgradeGroupDialogMessage.DefaultButton">
      <summary>Gets the button on the dialog that will receive focus by default.</summary>
    </member>
    <member name="P:DriveWorks.UpgradeGroupDialogMessage.DefaultResponse">
      <summary>Gets the value to use if the dialog can't be interacted with by the user</summary>
    </member>
    <member name="M:DriveWorks.UserChangedEventArgs.#ctor(DriveWorks.Security.UserDetails)">
      <summary>Initializes a new instance of the  class.</summary>
      <param name="user">The user that was changed.</param>
    </member>
    <member name="P:DriveWorks.UserChangedEventArgs.User">
      <summary>Gets the user that was changed.</summary>
    </member>
    <member name="M:DriveWorks.UserDefinedFunctionInfo.GetFullName">
      <summary>Gets the full name of the macro.</summary>
    </member>
    <member name="P:DriveWorks.UserDefinedFunctionInfo.ContainerFileName">
      <summary>Gets the name of the container in which the function is defined.</summary>
    </member>
    <member name="P:DriveWorks.UserDefinedFunctionInfo.DeclarationLine">
      <summary>Gets the full line of text which opens the method.</summary>
    </member>
    <member name="P:DriveWorks.UserDefinedFunctionInfo.FunctionName">
      <summary>Gets the name of the function which can be called.</summary>
    </member>
    <member name="P:DriveWorks.UserDefinedFunctionInfo.ModuleName">
      <summary>Gets the name of the module in which the function is defined.</summary>
    </member>
    <member name="P:DriveWorks.UserDefinedFunctionInfo.ProjectName">
      <summary>Gets the name of the code project in which the function is defined.</summary>
    </member>
    <member name="M:DriveWorks.ValueChangedEventArgs`1.#ctor(`0,`0)">
      <summary>Creates a new instance of the  class.</summary>
      <param name="oldValue">The previous value for the item that has changed.</param>
      <param name="newValue">The new value for the item that has changed.</param>
    </member>
    <member name="P:DriveWorks.ValueChangedEventArgs`1.NewValue">
      <summary>Gets the new value.</summary>
    </member>
    <member name="P:DriveWorks.ValueChangedEventArgs`1.OldValue">
      <summary>Gets the old value.</summary>
    </member>
    <member name="M:DriveWorks.ValueEventArgs`1.#ctor(`0)">
      <summary>Creates a new instance of the  class.</summary>
      <param name="value">The item that is specific to this event.</param>
    </member>
    <member name="P:DriveWorks.ValueEventArgs`1.Value">
      <summary>Gets the item specific to this event.</summary>
    </member>
    <member name="M:DriveWorks.VariableCategoryEventArgs.#ctor(DriveWorks.ProjectVariableCategory)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="category">The variable category that was changed.</param>
    </member>
    <member name="P:DriveWorks.VariableCategoryEventArgs.Category">
      <summary>Gets the variable category that was changed.</summary>
    </member>
    <member name="M:DriveWorks.VariableEventArgs.#ctor(DriveWorks.ProjectVariable)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="variable">The variable that was changed.</param>
    </member>
    <member name="P:DriveWorks.VariableEventArgs.Variable">
      <summary>Gets the constant that was changed.</summary>
    </member>
    <member name="M:DriveWorks.WordDocument.ClearRanges">
      <summary>Removes all bookmarks from the list of ranges to be driven.</summary>
    </member>
    <member name="M:DriveWorks.WordDocument.GetRange(System.String)">
      <summary>Get the rule for a driven bookmark.</summary>
      <returns>The formula for the driven range, or nothing if it does not exist.</returns>
      <param name="name">Name of the driven range.</param>
    </member>
    <member name="M:DriveWorks.WordDocument.GetRangeNames">
      <summary>Gets a list of all the driven ranges names.</summary>
    </member>
    <member name="M:DriveWorks.WordDocument.GetRangeValues">
      <summary>Gets all the ranges resolved values.</summary>
      <returns>A dictionary where the key is the range name and the value is the resolved value.</returns>
    </member>
    <member name="M:DriveWorks.WordDocument.LoadRangesFromFile(System.Boolean)">
      <summary>Matches range information with ranges from file. Creates missing ranges and removes unused ones.</summary>
      <param name="overwrite">If the ranges from the file should overwrite the existing ones.</param>
    </member>
    <member name="M:DriveWorks.WordDocument.RangeExists(System.String)">
      <summary>Sees if a given driven bookmark exists with a specific name.</summary>
      <param name="rangeName">Name of the driven bookmark to find the existence of.</param>
    </member>
    <member name="M:DriveWorks.WordDocument.RemoveRange(System.String)">
      <summary>Removes a bookmark from the list of ranges to be driven.</summary>
      <param name="name">Name of the range to be removed from the drive list.</param>
    </member>
    <member name="M:DriveWorks.WordDocument.SetRange(System.String,System.String)">
      <summary>Sets/adds a bookmark to be driven.</summary>
      <param name="name">Name of the range to be driven.</param>
      <param name="formula">Formula of the range.</param>
    </member>
    <member name="M:DriveWorks.WordDocument.SetRange(System.String,System.String,System.String)">
      <summary>Sets/adds a bookmark to be driven.</summary>
      <param name="name">Name of the range to be driven.</param>
      <param name="formula">Formula of the range.</param>
      <param name="comment">Comment associated with the range.</param>
    </member>
    <member name="P:DriveWorks.WordDocument.CreateHtmlFile">
      <summary>Gets/sets if the document should be exported to HTML after it is generated.</summary>
    </member>
    <member name="P:DriveWorks.WordDocument.CreatePdfFile">
      <summary>Gets/sets if the document should be exported to PDF after it is generated.</summary>
    </member>
    <member name="P:DriveWorks.WordDocument.HideHtmlFile">
      <summary>Gets/sets if generated HTML files should be hidden from the specification's documents list.</summary>
    </member>
    <member name="P:DriveWorks.WordDocument.HidePdfFile">
      <summary>Gets/sets if generated PDF files should be hidden from the specification's documents list.</summary>
    </member>
    <member name="M:DriveWorks.XmlTemplateDocument.ClearRanges">
      <summary>Removes all Tagged Elements from the list of ranges to be driven.</summary>
    </member>
    <member name="M:DriveWorks.XmlTemplateDocument.GetRange(System.String)">
      <summary>Get the rule for a driven range.</summary>
      <returns>The formula for the driven range, or nothing if it does not exist.</returns>
      <param name="name">Name of the driven range.</param>
    </member>
    <member name="M:DriveWorks.XmlTemplateDocument.GetRangeNames">
      <summary>Gets a list of all the driven ranges names.</summary>
    </member>
    <member name="M:DriveWorks.XmlTemplateDocument.GetRangeValues">
      <summary>Gets all the ranges resolved values.</summary>
      <returns>A dictionary where the key is the range name and the value is the resolved value.</returns>
    </member>
    <member name="M:DriveWorks.XmlTemplateDocument.LoadRangesFromFile(System.Boolean)">
      <summary>Matches range information with ranges from file. Creates missing ranges and removes unused ones.</summary>
      <param name="overwrite">If the ranges from the file should overwrite the existing ones.</param>
    </member>
    <member name="M:DriveWorks.XmlTemplateDocument.RangeExists(System.String)">
      <summary>Sees if a given driven range exists with a specific name.</summary>
      <param name="rangeName">Name of the driven range to find the existence of.</param>
    </member>
    <member name="M:DriveWorks.XmlTemplateDocument.RemoveRange(System.String)">
      <summary>Removes a range from the list of ranges to be driven.</summary>
      <param name="name">Name of the range to be removed from the drive list.</param>
    </member>
    <member name="M:DriveWorks.XmlTemplateDocument.SetRange(System.String,System.String)">
      <summary>Sets/adds ranges to be driven.</summary>
      <param name="name">Name of the range to be driven.</param>
      <param name="formula">Formula of the range.</param>
    </member>
    <member name="M:DriveWorks.XmlTemplateDocument.SetRange(System.String,System.String,System.String)">
      <summary>Sets/adds ranges to be driven.</summary>
      <param name="name">Name of the range to be driven.</param>
      <param name="formula">Formula of the range.</param>
    </member>
    <member name="T:DriveWorks.ConstantChangedEventHandler">
      <summary>Represents the method that will handle the event raised when a constant is changed.</summary>
    </member>
    <member name="T:DriveWorks.DataTableEventHandler">
      <summary>Represents the method that will handle the event raised when a table is changed.</summary>
    </member>
    <member name="T:DriveWorks.DocumentEventHandler">
      <summary>Represents the method that will handle the event raised when a document is changed.</summary>
    </member>
    <member name="T:DriveWorks.MessageChangedEventHandler">
      <summary>Represents the method that will handle the event raised when a message is changed.</summary>
    </member>
    <member name="T:DriveWorks.ProjectComponentSetEventHandler">
      <summary>Represents the method that will handle the event raised when a component set is changed.</summary>
    </member>
    <member name="T:DriveWorks.ProjectSpecificationPropertyEventHandler">
      <summary>Represents a method which will handle an event which affects a specification property.</summary>
    </member>
    <member name="T:DriveWorks.TeamChangedEventHandler">
      <summary>Represents the method that will handle an event raised due to a team changing.</summary>
    </member>
    <member name="T:DriveWorks.UserChangedEventHandler">
      <summary>Represents the method that will handle an event raised due to a user changing.</summary>
    </member>
    <member name="T:DriveWorks.VariableCategoryChangedEventHandler">
      <summary>Represents the method that will handle the event raised when a variable category is changed.</summary>
    </member>
    <member name="T:DriveWorks.VariableChangedEventHandler">
      <summary>Represents the method that will handle the event raised when a variable is changed.</summary>
    </member>
    <member name="T:DriveWorks.Abstractions.ICustomizable">
      <summary>Represents an object which supports customization.</summary>
    </member>
    <member name="T:DriveWorks.Abstractions.IHasRule">
      <summary>Provides a contract for items which have a rule.</summary>
    </member>
    <member name="T:DriveWorks.Abstractions.IHasRuleId">
      <summary>Implemented by rules which have invariant identifiers.</summary>
    </member>
    <member name="T:DriveWorks.Abstractions.IHasRuleName">
      <summary>Implemented by items which have names which can be referenced in rules.</summary>
    </member>
    <member name="T:DriveWorks.Abstractions.IHasRuleType">
      <summary>Provides a contract for items which have a rule which is typed.</summary>
    </member>
    <member name="T:DriveWorks.Abstractions.IHasRuleVersionHistory">
      <summary>Provides a contract for items which have a rule version history.</summary>
    </member>
    <member name="T:DriveWorks.Abstractions.ILockable">
      <summary>Provides a contract for objects which can be locked to prevent modification.</summary>
    </member>
    <member name="T:DriveWorks.Abstractions.INotifyRuleChanged">
      <summary>Provides a contract for an object to notify when its rule changes.</summary>
    </member>
    <member name="M:DriveWorks.Abstractions.ICustomizable.Customize">
      <summary>Customizes the object.</summary>
    </member>
    <member name="M:DriveWorks.Abstractions.IHasRule.SetRuleAndComment(System.String,System.String)">
      <summary>Sets the rule and comment in a single operation.</summary>
      <exception caption="" cref="T:System.NotSupportedException">The rule is not writable.</exception>
      <param name="newRule">The new rule.</param>
      <param name="newComment">The new comment.</param>
    </member>
    <member name="P:DriveWorks.Abstractions.IHasRule.Comment">
      <summary>Gets/sets the comment for the rule.</summary>
      <exception caption="" cref="T:System.NotSupportedException">The rule is not writable.</exception>
    </member>
    <member name="P:DriveWorks.Abstractions.IHasRule.DisplayName">
      <summary>Gets an identifier which uniquely identifies the rule.</summary>
      <exception caption="" cref="T:System.NotSupportedException">The rule is not writable.</exception>
    </member>
    <member name="P:DriveWorks.Abstractions.IHasRule.IsWritable">
      <summary>Determines whether the rule and comment can be written to.</summary>
    </member>
    <member name="P:DriveWorks.Abstractions.IHasRule.Rule">
      <summary>Gets/sets the rule.</summary>
      <exception caption="" cref="T:System.NotSupportedException">The rule is not writable.</exception>
    </member>
    <member name="P:DriveWorks.Abstractions.IHasRuleId.Id">
      <summary>Gets the invariant identifier of the rule.</summary>
    </member>
    <member name="P:DriveWorks.Abstractions.IHasRuleName.Name">
      <summary>Gets the referenceable name.</summary>
    </member>
    <member name="P:DriveWorks.Abstractions.IHasRuleType.RuleType">
      <summary>Gets an array of type names which qualify the type of rule provided by the implementing class.</summary>
    </member>
    <member name="M:DriveWorks.Abstractions.IHasRuleVersionHistory.GetVersionHistory">
      <summary>Gets the version history for the item.</summary>
    </member>
    <member name="P:DriveWorks.Abstractions.ILockable.IsLocked">
      <summary>Determines whether the object has been locked.</summary>
    </member>
    <member name="E:DriveWorks.Abstractions.INotifyRuleChanged.RuleChanged">
      <summary>Raised when the rule for the object has changed.</summary>
    </member>
    <member name="T:DriveWorks.Abstractions.AliasRule">
      <summary>Provides a  implementation which acts as an alias for another <see cref="T:DriveWorks.Abstractions.IHasRule" />.</summary>
    </member>
    <member name="T:DriveWorks.Abstractions.BufferedRule">
      <summary>Provides an implementation of the  implementation which acts as a buffer between a rule, and a rule consumer.</summary>
    </member>
    <member name="T:DriveWorks.Abstractions.BufferedRuleWithVersionHistory">
      <summary>Provides an implementation of the  implementation which acts as a buffer between a rule, and a rule consumer.</summary>
    </member>
    <member name="T:DriveWorks.Abstractions.GenericRule">
      <summary>Provides a simple implementation of the  implementation.</summary>
    </member>
    <member name="T:DriveWorks.Abstractions.Lock">
      <summary>Provides an object which can be used to help implement the  interface.</summary>
    </member>
    <member name="M:DriveWorks.Abstractions.AliasRule.#ctor(DriveWorks.Abstractions.IHasRule,System.String)">
      <summary>Creates a new instance of the  class.</summary>
      <param name="rule">The rule to create an alias for.</param>
      <param name="displayName">The display name to show.</param>
    </member>
    <member name="M:DriveWorks.Abstractions.AliasRule.GetVersionHistory">
      <summary>Gets the version history for the item.</summary>
    </member>
    <member name="M:DriveWorks.Abstractions.AliasRule.SetRuleAndComment(System.String,System.String)">
      <summary>Sets the rule and comment in a single operation.</summary>
      <exception caption="" cref="T:System.NotSupportedException">The rule is not writable.</exception>
      <param name="newRule">The new rule.</param>
      <param name="newComment">The new comment.</param>
    </member>
    <member name="P:DriveWorks.Abstractions.AliasRule.Comment">
      <summary>Gets/sets the comment for the rule.</summary>
      <exception caption="" cref="T:System.NotSupportedException">The rule is not writable.</exception>
    </member>
    <member name="P:DriveWorks.Abstractions.AliasRule.DisplayName">
      <summary>Gets an identifier which uniquely identifies the rule.</summary>
    </member>
    <member name="P:DriveWorks.Abstractions.AliasRule.Id">
      <summary>Gets the invariant identifier of the inner rule if the inner rule implements , otherwise null (Nothing in VB).</summary>
    </member>
    <member name="P:DriveWorks.Abstractions.AliasRule.InnerRule">
      <summary>Gets the wrapped rule.</summary>
    </member>
    <member name="P:DriveWorks.Abstractions.AliasRule.IsWritable">
      <summary>Determines whether the rule and comment can be written to.</summary>
    </member>
    <member name="P:DriveWorks.Abstractions.AliasRule.Rule">
      <summary>Gets/sets the rule.</summary>
      <exception caption="" cref="T:System.NotSupportedException">The rule is not writable.</exception>
    </member>
    <member name="M:DriveWorks.Abstractions.BufferedRule.#ctor(DriveWorks.Abstractions.IHasRule)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="sourceRule">The rule which will be buffered.</param>
    </member>
    <member name="M:DriveWorks.Abstractions.BufferedRule.Flush">
      <summary>Flushes the buffered values to the rule which is being buffered.</summary>
    </member>
    <member name="M:DriveWorks.Abstractions.BufferedRule.SetRuleAndComment(System.String,System.String)">
      <summary>Sets the rule and comment at the same time.</summary>
      <param name="newRule">The new rule.</param>
      <param name="newComment">The new comment.</param>
    </member>
    <member name="P:DriveWorks.Abstractions.BufferedRule.Comment">
      <summary>Gets/sets the rule comment.</summary>
    </member>
    <member name="P:DriveWorks.Abstractions.BufferedRule.Context">
      <summary>The rules context for this rule.</summary>
    </member>
    <member name="P:DriveWorks.Abstractions.BufferedRule.DisplayName">
      <summary>Gets the rule id.</summary>
    </member>
    <member name="P:DriveWorks.Abstractions.BufferedRule.Id">
      <summary>Gets the invariant identifier of the source rule if it implements , otherwise null (Nothing in VB).</summary>
    </member>
    <member name="P:DriveWorks.Abstractions.BufferedRule.IsWritable">
      <summary>Determines whether the rule is writable (always returns true).</summary>
    </member>
    <member name="P:DriveWorks.Abstractions.BufferedRule.Rule">
      <summary>Gets/sets the rule formula.</summary>
    </member>
    <member name="P:DriveWorks.Abstractions.BufferedRule.Source">
      <summary>Gets the rule which will be buffered.</summary>
    </member>
    <member name="P:DriveWorks.Abstractions.BufferedRule.Type">
      <summary>Gets the rule type.</summary>
    </member>
    <member name="M:DriveWorks.Abstractions.BufferedRuleWithVersionHistory.#ctor(DriveWorks.Abstractions.IHasRule)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="sourceRule">The rule which will be buffered.</param>
    </member>
    <member name="M:DriveWorks.Abstractions.BufferedRuleWithVersionHistory.GetVersionHistory">
      <summary>Gets the version history for the rule.</summary>
    </member>
    <member name="M:DriveWorks.Abstractions.GenericRule.#ctor(DriveWorks.Abstractions.IHasRule)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="hasRule">The existing rule from which to copy values.</param>
    </member>
    <member name="M:DriveWorks.Abstractions.GenericRule.#ctor(System.String)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="displayName">The display name of the rule.</param>
    </member>
    <member name="M:DriveWorks.Abstractions.GenericRule.#ctor(System.String,System.String[])">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="displayName">The display name of the rule.</param>
      <param name="type">The type of the rule.</param>
    </member>
    <member name="M:DriveWorks.Abstractions.GenericRule.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="displayName">The display name of the rule.</param>
      <param name="formula">The formula which defines the rule.</param>
      <param name="comment">The comment which describes the operation of the rule.</param>
    </member>
    <member name="M:DriveWorks.Abstractions.GenericRule.#ctor(System.String,System.String[],System.String,System.String)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="displayName">The display name of the rule.</param>
      <param name="type">The type of the rule.</param>
      <param name="formula">The formula which defines the rule.</param>
      <param name="comment">The comment which describes the operation of the rule.</param>
    </member>
    <member name="M:DriveWorks.Abstractions.GenericRule.SetRuleAndComment(System.String,System.String)">
      <summary>Sets the rule and comment at the same time.</summary>
      <param name="newRule">The new rule.</param>
      <param name="newComment">The new comment.</param>
    </member>
    <member name="M:DriveWorks.Abstractions.GenericRule.SetRuleName(System.String)">
      <summary>Sets the reference name for this rule.</summary>
      <param name="name">The name to apply to this rule.</param>
    </member>
    <member name="P:DriveWorks.Abstractions.GenericRule.Comment">
      <summary>Gets/sets the rule comment.</summary>
    </member>
    <member name="P:DriveWorks.Abstractions.GenericRule.DisplayName">
      <summary>Gets the rule display name.</summary>
    </member>
    <member name="P:DriveWorks.Abstractions.GenericRule.IsWritable">
      <summary>Determines whether the rule is writable (always returns true).</summary>
    </member>
    <member name="P:DriveWorks.Abstractions.GenericRule.Name">
      <summary>The reference name of this rule.</summary>
    </member>
    <member name="P:DriveWorks.Abstractions.GenericRule.Rule">
      <summary>Gets/sets the rule formula.</summary>
    </member>
    <member name="P:DriveWorks.Abstractions.GenericRule.Type">
      <summary>Gets the rule type.</summary>
    </member>
    <member name="M:DriveWorks.Abstractions.Lock.AssertUnlocked">
      <summary>Throws an  if the object is locked.</summary>
    </member>
    <member name="M:DriveWorks.Abstractions.Lock.Lock">
      <summary>Locks the object.</summary>
    </member>
    <member name="P:DriveWorks.Abstractions.Lock.IsLocked">
      <summary>Gets whether the object has been locked.</summary>
    </member>
    <member name="T:DriveWorks.Components.IComponentFactory">
      <summary>Provides a means for dynamically constructing components of a certain type.</summary>
    </member>
    <member name="T:DriveWorks.Components.IHasReferences">
      <summary>provides a contract for an object that has external file references associated with it.</summary>
    </member>
    <member name="T:DriveWorks.Components.IReleasedComponentReferenceTree">
      <summary>Provides information about one or more released components and their relationships.</summary>
    </member>
    <member name="T:DriveWorks.Components.IReleaseParameterTracker">
      <summary>Provides support for a component being released to provide diagnosting information about a parameter which was released.</summary>
    </member>
    <member name="T:DriveWorks.Components.IReleaseTracker">
      <summary>Provides a contract for an object which is used to track the release of components.</summary>
    </member>
    <member name="M:DriveWorks.Components.IComponentFactory.CreateCapturedComponent">
      <summary>Creates a new captured component.</summary>
    </member>
    <member name="M:DriveWorks.Components.IComponentFactory.CreateProjectComponent">
      <summary>Creates a new project component.</summary>
    </member>
    <member name="M:DriveWorks.Components.IComponentFactory.CreateReleasedComponent">
      <summary>Creates a new released component.</summary>
    </member>
    <member name="M:DriveWorks.Components.IHasReferences.ChangeExternalReferencePath(System.Collections.Generic.Dictionary{System.String,System.String})">
      <summary>Changes all matching references in this object using the provided map.</summary>
      <returns>Whether or not any paths were changed.</returns>
      <param name="newPathsByOldPaths">Map of old paths to new paths to change in this object.</param>
    </member>
    <member name="M:DriveWorks.Components.IHasReferences.GetExternalReferencePaths">
      <summary>Gets a collection of all references paths that this object has.</summary>
    </member>
    <member name="P:DriveWorks.Components.IReleasedComponentReferenceTree.ReferencesByParentId">
      <summary>Gets a map from a parent component's identifier to the references for that component.</summary>
    </member>
    <member name="P:DriveWorks.Components.IReleasedComponentReferenceTree.RootComponentIds">
      <summary>Gets the unique identifiers of all of the root components in the reference tree.</summary>
    </member>
    <member name="M:DriveWorks.Components.IReleaseParameterTracker.NotifyParameterResult(System.String,System.String,System.String,System.String,System.String)">
      <summary>Called when a parameter result is finalized.</summary>
      <param name="parameterTypeName">The invariant name of the parameter's type.</param>
      <param name="parameterTypeDisplayName">The display name of the parameter's type.</param>
      <param name="parameterName">The display name of the parameter.</param>
      <param name="parameterRule">The rule which was used to calculate the parameter's result.</param>
      <param name="parameterResult">The result of calculating the parameter's rule.</param>
    </member>
    <member name="M:DriveWorks.Components.IReleaseTracker.Finish">
      <summary>Informs the trackers that the release process has finished.</summary>
    </member>
    <member name="M:DriveWorks.Components.IReleaseTracker.NotifyBeginEvaluate(DriveWorks.ProjectComponentSet,System.Nullable{System.Guid},DriveWorks.Components.ProjectComponent,System.Guid,System.String,System.String,System.String,System.String,System.String)">
      <summary>Called when the evaluation of a component has begun.</summary>
      <param name="rootComponentSet">The component set to which the root component belongs.</param>
      <param name="parentTrackingId">The tracking identifier of the parent component if there is one.</param>
      <param name="component">The component being evaluated.</param>
      <param name="componentTrackingId">A unique identifier which can be used to track the component, see remarks for more details.</param>
      <param name="componentPath">The path to the component.</param>
      <param name="nameRule">The rule which was evaluated to generate the component's name.</param>
      <param name="nameResult">The result of evaluating the component's name rule.</param>
      <param name="pathRule">The rule which was evaluated to generate the component's path.</param>
      <param name="pathResult">The result of evaluating the component's path rule.</param>
    </member>
    <member name="M:DriveWorks.Components.IReleaseTracker.NotifyBeginRelease(System.Guid)">
      <summary>Called when the release of an evaluated component has started.</summary>
      <param name="componentTrackingId">The tracking identifier of the component.</param>
    </member>
    <member name="M:DriveWorks.Components.IReleaseTracker.NotifyComponentSetAccepted(DriveWorks.ProjectComponentSet,System.String,System.String)">
      <summary>Called when a component set has its rule evaluated as "delete".</summary>
      <param name="componentSet">The component set that was evaluated.</param>
      <param name="rule">The rule which resulted in the the acceptance of the component set.</param>
      <param name="result">The textual version of the result.</param>
    </member>
    <member name="M:DriveWorks.Components.IReleaseTracker.NotifyComponentSetDeleted(DriveWorks.ProjectComponentSet,System.String,System.String)">
      <summary>Called when a component set has its rule evaluated as "delete".</summary>
      <param name="componentSet">The component set that was evaluated.</param>
      <param name="rule">The rule which resulted in the "delete" value.</param>
      <param name="result">The textual version of the result.</param>
    </member>
    <member name="M:DriveWorks.Components.IReleaseTracker.NotifyComponentSetLoadFailed(DriveWorks.ProjectComponentSet)">
      <summary>Called when a component set's root compoent could not be loaded.</summary>
      <param name="componentSet">The component set which failed.</param>
    </member>
    <member name="M:DriveWorks.Components.IReleaseTracker.NotifyComponentSetSuppressed(DriveWorks.ProjectComponentSet,System.String,System.String)">
      <summary>Called when a component set has its rule evaluated as "suppress".</summary>
      <param name="componentSet">The component set that was evaluated.</param>
      <param name="rule">The rule which resulted in the "suppress" value.</param>
      <param name="result">The textual version of the result.</param>
    </member>
    <member name="M:DriveWorks.Components.IReleaseTracker.NotifyEndEvaluate">
      <summary>Called when the evaluation of the current component has ended.</summary>
    </member>
    <member name="M:DriveWorks.Components.IReleaseTracker.NotifyEndRelease">
      <summary>Called when the release of the current component has ended.</summary>
    </member>
    <member name="M:DriveWorks.Components.IReleaseTracker.NotifyEvaluatedAsAction(DriveWorks.Components.ReleasedComponentReferenceAction,System.Boolean)">
      <summary>Called when the current component is determined to need a non-replacement action applying.</summary>
      <param name="action">The action to be taken.</param>
      <param name="isValid">True if the action is valid for the type of component, otherwise false.</param>
    </member>
    <member name="M:DriveWorks.Components.IReleaseTracker.NotifyEvaluatedAsDrivenAlternative(System.Guid,System.String,System.String)">
      <summary>Called when the current component is determined to need swapping for a driven alternative.</summary>
      <param name="alternativeId">The unique identifier of the driven alternative.</param>
      <param name="alternativeMasterPath">The path to the file on which the driven alternative was based.</param>
      <param name="alternativeTargetPath">The path to the driven alternative.</param>
    </member>
    <member name="M:DriveWorks.Components.IReleaseTracker.NotifyEvaluatedAsDuplicatePath(System.String)">
      <summary>Called when the current component is determined to have the same path as an existing component, but a different target name.</summary>
      <param name="fullPath">The evaluated path to the new component.</param>
    </member>
    <member name="M:DriveWorks.Components.IReleaseTracker.NotifyEvaluatedAsExistingComponent(System.Guid,System.String)">
      <summary>Called when the current component is determined to have already been evaluated.</summary>
      <param name="existingComponentId">The unique identifier of the existing component.</param>
      <param name="existingComponentPath">The full path to the existing component.</param>
    </member>
    <member name="M:DriveWorks.Components.IReleaseTracker.NotifyEvaluatedAsInvalidName(System.String)">
      <summary>Called when the current component is determined to have an invalid name.</summary>
      <param name="nameResult">The result of the name rule.</param>
    </member>
    <member name="M:DriveWorks.Components.IReleaseTracker.NotifyEvaluatedAsNewComponent(System.String)">
      <summary>Called when the current component is determined to be a new component.</summary>
      <param name="fullPath">The path which was generated.</param>
    </member>
    <member name="M:DriveWorks.Components.IReleaseTracker.NotifyEvaluatedAsNewComponentWithInvalidPath(System.String)">
      <summary>Called when the current component is determined to have an invalid full path.</summary>
      <param name="invalidPath">The path which was generated.</param>
    </member>
    <member name="M:DriveWorks.Components.IReleaseTracker.NotifyEvaluatedAsStandardAlternative(System.String)">
      <summary>Called when the current component is determined to need swapping for a standard alternative.</summary>
    </member>
    <member name="M:DriveWorks.Components.IReleaseTracker.NotifyEvaluatedAsStandardAlternativeWithInvalidPath(System.String)">
      <summary>Called when the current component is determined to need swapping for a standard alternative that has an invalid full path.</summary>
      <param name="invalidPath">The invalid path to the standard alternative.</param>
    </member>
    <member name="M:DriveWorks.Components.IReleaseTracker.NotifyInReleaseComponentParameterResult(System.Guid,System.String,System.String,System.String,System.String,System.String)">
      <summary>Called when a parameter result is finalized.</summary>
      <param name="componentTrackingId">The component tracking identifier assigned to the component.</param>
      <param name="parameterTypeName">The invariant name of the parameter's type.</param>
      <param name="parameterTypeDisplayName">The display name of the parameter's type.</param>
      <param name="parameterName">The parameter's display name.</param>
      <param name="parameterRule">The rule which was used to calculate the parameter's result.</param>
      <param name="parameterResult">The result of calculating the parameter's rule.</param>
    </member>
    <member name="M:DriveWorks.Components.IReleaseTracker.NotifyTrackingIdChanged(System.Guid)">
      <summary>Called when the current component is going to be used to overwriting an existing component and so the tracking id needs to be changed</summary>
      <param name="newTrackingId">The replacement tracking identifier.</param>
    </member>
    <member name="T:DriveWorks.Components.ComponentReferenceType">
      <summary>Specifies whether a component is a standard or a derived component.</summary>
    </member>
    <member name="F:DriveWorks.Components.ComponentReferenceType.Derived">
      <summary>The component is derived from another component and when released has a reference action of .</summary>
    </member>
    <member name="F:DriveWorks.Components.ComponentReferenceType.Standard">
      <summary>The component is a standard child component and when released has a reference action of .</summary>
    </member>
    <member name="T:DriveWorks.Components.ReleasedComponentFlags">
      <summary>Specifies additional behaviour for s.</summary>
    </member>
    <member name="F:DriveWorks.Components.ReleasedComponentFlags.None">
      <summary>No additional behaviour or status has been attached to the component.</summary>
    </member>
    <member name="F:DriveWorks.Components.ReleasedComponentFlags.ForceOverwrite">
      <summary>Flags a component for overwrite so that if the component has not been marked as generated but the file exist, the file will be regenerated.</summary>
    </member>
    <member name="F:DriveWorks.Components.ReleasedComponentFlags.Deferred">
      <summary>Flags a component to be ineligable for generation until this flag gets toggled off.</summary>
    </member>
    <member name="F:DriveWorks.Components.ReleasedComponentFlags.AwaitingPreview">
      <summary>Flags a component as needing a 3d preview creating for it.</summary>
    </member>
    <member name="F:DriveWorks.Components.ReleasedComponentFlags.Previewed">
      <summary>Flags a component as being attempted via a preview.</summary>
    </member>
    <member name="T:DriveWorks.Components.ReleasedComponentReferenceAction">
      <summary>Specifies the action to take for a released component reference.</summary>
    </member>
    <member name="F:DriveWorks.Components.ReleasedComponentReferenceAction.Derive">
      <summary>Derive, the child component is derived from the parent component, e.g. additional file formats.</summary>
    </member>
    <member name="F:DriveWorks.Components.ReleasedComponentReferenceAction.None">
      <summary>Take no action, the reference entry exists only to ensure correct model generation ordering.</summary>
    </member>
    <member name="F:DriveWorks.Components.ReleasedComponentReferenceAction.Replace">
      <summary>Replace the reference to the child in the parent and unsuppress the child component.</summary>
    </member>
    <member name="F:DriveWorks.Components.ReleasedComponentReferenceAction.Delete">
      <summary>Delete the reference to the child in the parent.</summary>
    </member>
    <member name="F:DriveWorks.Components.ReleasedComponentReferenceAction.Suppress">
      <summary>Leave the reference as it is, and suppress the child component.</summary>
    </member>
    <member name="F:DriveWorks.Components.ReleasedComponentReferenceAction.Unsuppress">
      <summary>Leave the reference as it is, and unsuppress the child component.</summary>
    </member>
    <member name="F:DriveWorks.Components.ReleasedComponentReferenceAction.Hide">
      <summary>Leave the reference as it is, and hide the child component.</summary>
    </member>
    <member name="F:DriveWorks.Components.ReleasedComponentReferenceAction.Show">
      <summary>Leave the reference as it is, and show the child component.</summary>
    </member>
    <member name="F:DriveWorks.Components.ReleasedComponentReferenceAction.DerivedDeferred">
      <summary>Derive, the child component is derived from the parent component, e.g. additional file formats, but is to be generated separately from the parent.</summary>
    </member>
    <member name="T:DriveWorks.Components.CapturedComponent">
      <summary>Provides the base class for captured components, which should be implemented by a component provider.</summary>
    </member>
    <member name="T:DriveWorks.Components.CapturedComponentInfo">
      <summary>Provides information about a captured component.</summary>
    </member>
    <member name="T:DriveWorks.Components.ComponentFactoryAttribute">
      <summary>Used to indicate to DriveWorks the factory that is responsible for creating components of a given type.</summary>
    </member>
    <member name="T:DriveWorks.Components.MissingProjectComponent">
      <summary>Provides a project component implementation for project components whose underlying capture data can't be resolved.</summary>
    </member>
    <member name="T:DriveWorks.Components.ProjectComponent">
      <summary>Provides the base class for project components, which should be implemented by a component provider.</summary>
    </member>
    <member name="T:DriveWorks.Components.ProjectComponentRule">
      <summary>Represents a rule on a project component or parameter.</summary>
    </member>
    <member name="T:DriveWorks.Components.ProjectComponentRuleProxy">
      <summary>Provides a base for inheriting from ProjectComponentRule.</summary>
    </member>
    <member name="T:DriveWorks.Components.ProjectComponents">
      <summary>Provides a collection of project components.</summary>
    </member>
    <member name="T:DriveWorks.Components.ReadOnlyReleasedComponentReferenceDetails">
      <summary>Provides a read-only wrapper around an instance of the  class.</summary>
    </member>
    <member name="T:DriveWorks.Components.ReleaseComponentController">
      <summary>Provided to a component during its release to give it the opportunity to control certain aspects of its release process.</summary>
    </member>
    <member name="T:DriveWorks.Components.ReleaseComponentHelper">
      <summary>Implements the release process for components.</summary>
    </member>
    <member name="T:DriveWorks.Components.ReleaseComponentReportTracker">
      <summary>Create a tracker to report on the release process of a component.</summary>
    </member>
    <member name="T:DriveWorks.Components.ReleaseComponentsResults">
      <summary>Encapsulates the results of releasing one or more component sets.</summary>
    </member>
    <member name="T:DriveWorks.Components.ReleasedComponent">
      <summary>Provides the base class for drive components, which should be implemented by a component provider.</summary>
    </member>
    <member name="T:DriveWorks.Components.ReleasedComponentDetails">
      <summary>Provides information about a released component.</summary>
    </member>
    <member name="T:DriveWorks.Components.ReleasedComponentReferenceDetails">
      <summary>Provides information about a reference from one driven component to another.</summary>
    </member>
    <member name="T:DriveWorks.Components.ReleasedComponentTaskCondition">
      <summary>Represents a released .</summary>
    </member>
    <member name="T:DriveWorks.Components.ReleaseEnvironment">
      <summary>Provides the environment required for releasing one or more components.</summary>
    </member>
    <member name="M:DriveWorks.Components.CapturedComponent.Initialize">
      <summary>When overridden by a derived class, performs any required initialization</summary>
    </member>
    <member name="M:DriveWorks.Components.CapturedComponentInfo.#ctor(System.Guid,System.String,System.String,System.Guid[],System.Boolean)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="id">The unique identifier assigned to the group.</param>
      <param name="type">The component's type.</param>
      <param name="path">The path to the component.</param>
      <param name="references">An array of identifiers of components referenced as children of the component.</param>
      <param name="isDeleted">A value which indicates whether the component is deleted.</param>
    </member>
    <member name="P:DriveWorks.Components.CapturedComponentInfo.Id">
      <summary>Gets the unique identifier assigned to the group.</summary>
    </member>
    <member name="P:DriveWorks.Components.CapturedComponentInfo.IsDeleted">
      <summary>Determines whether the component is deleted.</summary>
    </member>
    <member name="P:DriveWorks.Components.CapturedComponentInfo.Path">
      <summary>Gets the path to the component.</summary>
    </member>
    <member name="P:DriveWorks.Components.CapturedComponentInfo.References">
      <summary>Gets an array of identifiers of components referenced as children of the component.</summary>
    </member>
    <member name="P:DriveWorks.Components.CapturedComponentInfo.Type">
      <summary>Gets the component's type.</summary>
    </member>
    <member name="M:DriveWorks.Components.ComponentFactoryAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the  class.</summary>
      <param name="componentFactoryType">The factory class responsible for creating components.</param>
    </member>
    <member name="P:DriveWorks.Components.ComponentFactoryAttribute.ComponentFactoryType">
      <summary>Gets the type of the factory class.</summary>
    </member>
    <member name="P:DriveWorks.Components.MissingProjectComponent.CapturedComponentId">
      <summary>Gets the unique identifier of the captured component on which the project component is based.</summary>
    </member>
    <member name="M:DriveWorks.Components.ProjectComponent.Initialize">
      <summary>When overridden by a derived class, performs any required initialization</summary>
    </member>
    <member name="P:DriveWorks.Components.ProjectComponent.IncludeFileFormatsInLoop">
      <summary>Gets/sets whether file formats should be generated in the loop.</summary>
    </member>
    <member name="P:DriveWorks.Components.ProjectComponent.IsLoopEnabled">
      <summary>Gets/sets whether looping is enabled for this component.</summary>
    </member>
    <member name="P:DriveWorks.Components.ProjectComponent.LoopCount">
      <summary>Gets the rule that controls how many times this component should be looped during release.</summary>
    </member>
    <member name="P:DriveWorks.Components.ProjectComponent.Tasks">
      <summary>Gets the tasks associated with this component.</summary>
    </member>
    <member name="E:DriveWorks.Components.ProjectComponent.IncludeFileFormatsInLoopChanged">
      <summary>Raised whenever the  property changes.</summary>
    </member>
    <member name="E:DriveWorks.Components.ProjectComponent.IsLoopEnabledChanged">
      <summary>Raised whenever the  property changes.</summary>
    </member>
    <member name="M:DriveWorks.Components.ProjectComponentRule.GetVersionHistory">
      <summary>Gets the version history for the item.</summary>
    </member>
    <member name="M:DriveWorks.Components.ProjectComponentRule.RaiseCommentChanged(DriveWorks.ValueChangedEventArgs{System.String})">
      <summary>Raises the  event.</summary>
      <param name="args">The arguments to pass to the event.</param>
    </member>
    <member name="M:DriveWorks.Components.ProjectComponentRule.RaiseRuleChanged(DriveWorks.ValueChangedEventArgs{System.String})">
      <summary>Raises the RuleChanged event.</summary>
      <param name="args">Argument to raise in the event.</param>
    </member>
    <member name="M:DriveWorks.Components.ProjectComponentRule.SetRuleAndComment(System.String,System.String)">
      <summary>Sets the rule and comment in a single operation.</summary>
      <exception caption="" cref="T:System.NotSupportedException">The rule is not writable.</exception>
      <param name="newRule">The new rule.</param>
      <param name="newComment">The new comment.</param>
    </member>
    <member name="P:DriveWorks.Components.ProjectComponentRule.Comment">
      <summary>Gets/sets the comment for the rule.</summary>
      <exception caption="" cref="T:System.NotSupportedException">The rule is not writable.</exception>
    </member>
    <member name="P:DriveWorks.Components.ProjectComponentRule.DisplayName">
      <summary>Gets an identifier which uniquely identifies the rule.</summary>
      <exception caption="" cref="T:System.NotSupportedException">The rule is not writable.</exception>
    </member>
    <member name="P:DriveWorks.Components.ProjectComponentRule.Id">
      <summary>Gets the invariant identifier of the rule.</summary>
    </member>
    <member name="P:DriveWorks.Components.ProjectComponentRule.IsWritable">
      <summary>Determines whether the rule and comment can be written to.</summary>
    </member>
    <member name="P:DriveWorks.Components.ProjectComponentRule.Name">
      <summary>Gets the name for this rule.</summary>
    </member>
    <member name="P:DriveWorks.Components.ProjectComponentRule.Rule">
      <summary>Gets/sets the rule.</summary>
      <exception caption="" cref="T:System.NotSupportedException">The rule is not writable.</exception>
    </member>
    <member name="E:DriveWorks.Components.ProjectComponentRule.CommentChanged">
      <summary>Raised when the comment has been changed.</summary>
    </member>
    <member name="E:DriveWorks.Components.ProjectComponentRule.RuleChanged">
      <summary>Raised when the rule has been changed.</summary>
    </member>
    <member name="P:DriveWorks.Components.ProjectComponentRuleProxy.InnerRule">
      <summary>Gets or sets the rule that is being wrapped.</summary>
    </member>
    <member name="M:DriveWorks.Components.ProjectComponents.Extract(System.String)">
      <summary>Removes components of the specified type from the collection and returns them in a new collection.</summary>
      <returns>A collection containing the extracted components.</returns>
      <param name="componentType">The type of component to remove.</param>
    </member>
    <member name="M:DriveWorks.Components.ProjectComponents.GetEnumerator">
      <summary>Gets an enumerator which supports enumeration of the components in the collection.</summary>
    </member>
    <member name="P:DriveWorks.Components.ProjectComponents.Count">
      <summary>Gets the number of items in the collection.</summary>
    </member>
    <member name="P:DriveWorks.Components.ProjectComponents.Item(System.Int32)">
      <summary>Gets the component at the specified index.</summary>
      <returns>The specified item.</returns>
      <param name="index">The index of the item to get.</param>
    </member>
    <member name="P:DriveWorks.Components.ReadOnlyReleasedComponentReferenceDetails.Action">
      <summary>Gets the action to take on the reference's parent component.</summary>
    </member>
    <member name="P:DriveWorks.Components.ReadOnlyReleasedComponentReferenceDetails.ChildId">
      <summary>Gets the unique id of the child driven component to which the reference applies, if appropriate.</summary>
    </member>
    <member name="P:DriveWorks.Components.ReadOnlyReleasedComponentReferenceDetails.ChildMasterAddress">
      <summary>Gets the address of the reference in the parent component if applicable.</summary>
    </member>
    <member name="P:DriveWorks.Components.ReadOnlyReleasedComponentReferenceDetails.ChildMasterPath">
      <summary>Gets the full path to the original child component in the seed parent component.</summary>
    </member>
    <member name="P:DriveWorks.Components.ReadOnlyReleasedComponentReferenceDetails.Id">
      <summary>Gets the unique id of the reference.</summary>
    </member>
    <member name="P:DriveWorks.Components.ReadOnlyReleasedComponentReferenceDetails.ParentId">
      <summary>Gets the unique id of the parent driven component to which the reference applies.</summary>
    </member>
    <member name="P:DriveWorks.Components.ReadOnlyReleasedComponentReferenceDetails.TargetPath">
      <summary>Gets the full path of the file to be swapped into parent component.</summary>
    </member>
    <member name="M:DriveWorks.Components.ReleaseComponentController.AddStaticChildReplacement(System.String,System.String,System.String,System.Guid)">
      <summary>Adds a new static child replacement for the child with the given master path</summary>
      <returns>True if the static replacement was added, False if a replacement has already been registered for the given child.</returns>
      <param name="childMasterPath">The path of the child to replace.</param>
      <param name="childAddress">The address of the child (if applicable).</param>
      <param name="alternativePath">The path to the alternative to swap in.</param>
      <param name="parentId">The id of the parent.</param>
    </member>
    <member name="M:DriveWorks.Components.ReleaseComponentController.GetComponentByComponentSetName(System.String)">
      <summary>Gets the root component for the component set with the given name from the local release results. See remarks for details.</summary>
      <returns>The root component for the component set with the given name, or a null reference if no component set was found with the given name, or the component set root
component was deleted/suppressed.</returns>
    </member>
    <member name="M:DriveWorks.Components.ReleaseComponentController.GetComponentByName(System.String)">
      <summary>Gets a component with the given name from the local release results. See remarks for details.</summary>
      <returns>The component with the given name, or a null reference if no component was found with the given name.</returns>
      <param name="name">The name of the component to retrieve.</param>
    </member>
    <member name="M:DriveWorks.Components.ReleaseComponentController.GetReferenceByComponentSetName(System.String)">
      <summary>Gets the root component reference for the component set with the given name from the local release results. See remarks for details.</summary>
      <returns>The root component reference for the component set with the given name, or a null reference if no component set was found with the given name.</returns>
    </member>
    <member name="M:DriveWorks.Components.ReleaseComponentController.GetTasksInScope(System.String)">
      <summary>Gets all scoped tasks in the given scope.</summary>
    </member>
    <member name="M:DriveWorks.Components.ReleaseComponentController.AddChildComponentFromComponentSet(System.String,System.String)">
      <summary>Adds the named component set as a child of the component being released.</summary>
      <returns>True if the component set was found and added, otherwise false.</returns>
      <param name="childMasterPath">The path to the child component to replace.</param>
      <param name="componentSetName">The name of the component set to replace the child with.</param>
    </member>
    <member name="M:DriveWorks.Components.ReleaseComponentController.AddChildComponentFromComponentSet(System.String,System.String,System.String)">
      <summary>Adds the named component set as a child of the component being released.</summary>
      <returns>True if the component set was found and added, otherwise false.</returns>
      <param name="childMasterPath">The path to the child component to replace.</param>
      <param name="childMasterAddress">The optional address which further qualifies the child component to replace.</param>
      <param name="componentSetName">The name of the component set to replace the child with.</param>
    </member>
    <member name="M:DriveWorks.Components.ReleaseComponentController.AddDrivenChildComponent(System.String,DriveWorks.Components.ReleasedComponent)">
      <summary>Adds a new component as a child of the component being released.</summary>
      <param name="childMasterPath">The path to the child component to replace.</param>
      <param name="childComponent">The component to add as a child.</param>
    </member>
    <member name="M:DriveWorks.Components.ReleaseComponentController.AddDrivenChildComponent(System.String,System.String,DriveWorks.Components.ReleasedComponent)">
      <summary>Adds a new component as a child of the component being released.</summary>
      <param name="childMasterPath">The path to the child component to replace.</param>
      <param name="childMasterAddress">The optional address which further qualifies the child component to replace.</param>
      <param name="childComponent">The component to add as a child.</param>
    </member>
    <member name="P:DriveWorks.Components.ReleaseComponentController.DeferAllDrawings">
      <summary>Gets whether all drawings should be flagged for generation at a later stage.</summary>
    </member>
    <member name="P:DriveWorks.Components.ReleaseComponentController.DrawingsToDefer">
      <summary>Gets the name of the drawings that should be flagged for generation at a later stage.</summary>
    </member>
    <member name="P:DriveWorks.Components.ReleaseComponentController.IsRoot">
      <summary>Determines whether the component being released is a root component.</summary>
    </member>
    <member name="P:DriveWorks.Components.ReleaseComponentController.ReleasedComponentId">
      <summary>Gets the unique identifier that is assigned to the component.</summary>
    </member>
    <member name="P:DriveWorks.Components.ReleaseComponentController.SpecificationContext">
      <summary>Gets the specification context associated with the current release process.</summary>
    </member>
    <member name="P:DriveWorks.Components.ReleaseComponentController.Tracker">
      <summary>Gets the release tracker for the current release process.</summary>
    </member>
    <member name="M:DriveWorks.Components.ReleaseComponentHelper.Release(DriveWorks.Specification.SpecificationContext,System.String)">
      <summary>Releases the components specified by the given string and returns the results.</summary>
      <returns>The release results.</returns>
      <param name="context">The specification context for which to release components.</param>
      <param name="components">The names of the components to release separated by commas, or a "*" to release all components.</param>
    </member>
    <member name="M:DriveWorks.Components.ReleaseComponentHelper.Release(DriveWorks.Specification.SpecificationContext,System.String,DriveWorks.Components.IReleaseTracker)">
      <summary>Releases the components specified by the given string and returns the results.</summary>
      <returns>The release results.</returns>
      <param name="context">The specification context for which to release components.</param>
      <param name="components">The names of the components to release separated by commas, or a "*" to release all components.</param>
      <param name="tracker">An implementation of the  interface, or a null reference.</param>
    </member>
    <member name="M:DriveWorks.Components.ReleaseComponentHelper.Release(DriveWorks.Specification.SpecificationContext,System.Collections.Generic.IEnumerable{DriveWorks.ProjectComponentSet})">
      <summary>Releases the given components.</summary>
      <returns>The release results.</returns>
      <param name="context">The specification context for which to release components.</param>
      <param name="components">The components to release.</param>
    </member>
    <member name="M:DriveWorks.Components.ReleaseComponentHelper.Release(DriveWorks.Specification.SpecificationContext,System.Collections.Generic.IEnumerable{DriveWorks.ProjectComponentSet},DriveWorks.Components.IReleaseTracker)">
      <summary>Releases the given components.</summary>
      <returns>The release results.</returns>
      <param name="context">The specification context for which to release components.</param>
      <param name="components">The components to release.</param>
      <param name="tracker">An implementation of the  interface, or a null reference.</param>
    </member>
    <member name="M:DriveWorks.Components.ReleaseComponentHelper.Release(DriveWorks.Components.ReleaseEnvironment,DriveWorks.Specification.SpecificationContext,System.String)">
      <summary>Releases the components specified by the given string and returns the results.</summary>
      <returns>The release results.</returns>
      <param name="environment">The environment which controls the release process.</param>
      <param name="context">The specification context for which to release components.</param>
      <param name="components">The names of the components to release separated by commas, or a "*" to release all components.</param>
    </member>
    <member name="M:DriveWorks.Components.ReleaseComponentHelper.Release(DriveWorks.Components.ReleaseEnvironment,DriveWorks.Specification.SpecificationContext,System.String,DriveWorks.Components.IReleaseTracker)">
      <summary>Releases the components specified by the given string and returns the results.</summary>
      <returns>The release results.</returns>
      <param name="environment">The environment which controls the release process.</param>
      <param name="context">The specification context for which to release components.</param>
      <param name="components">The names of the components to release separated by commas, or a "*" to release all components.</param>
      <param name="tracker">An implementation of the  interface, or a null reference.</param>
    </member>
    <member name="M:DriveWorks.Components.ReleaseComponentHelper.Release(DriveWorks.Components.ReleaseEnvironment,DriveWorks.Specification.SpecificationContext,System.String,DriveWorks.Components.IReleaseTracker,System.String)">
      <summary>Releases the components specified by the given string and returns the results.</summary>
      <returns>The release results.</returns>
      <param name="environment">The environment which controls the release process.</param>
      <param name="context">The specification context for which to release components.</param>
      <param name="components">The names of the components to release separated by a pipe-bar '|', or a "*" to release all components.</param>
      <param name="tracker">An implementation of the  interface, or a null reference.</param>
      <param name="derivedComponentsToDefer">The names of the derived components to put on hold, not to be generated at the same time as the associated models.</param>
    </member>
    <member name="M:DriveWorks.Components.ReleaseComponentHelper.Release(DriveWorks.Components.ReleaseEnvironment,DriveWorks.Specification.SpecificationContext,System.Collections.Generic.IEnumerable{DriveWorks.ProjectComponentSet})">
      <summary>Releases the given components.</summary>
      <returns>The release results.</returns>
      <param name="environment">The environment which controls the release process.</param>
      <param name="context">The specification context for which to release components.</param>
      <param name="components">The components to release.</param>
    </member>
    <member name="M:DriveWorks.Components.ReleaseComponentHelper.Release(DriveWorks.Components.ReleaseEnvironment,DriveWorks.Specification.SpecificationContext,System.Collections.Generic.IEnumerable{DriveWorks.ProjectComponentSet},DriveWorks.Components.IReleaseTracker)">
      <summary>Releases the given components.</summary>
      <returns>The release results.</returns>
      <param name="environment">The environment which controls the release process.</param>
      <param name="context">The specification context for which to release components.</param>
      <param name="components">The components to release.</param>
      <param name="tracker">An implementation of the  interface, or a null reference.</param>
    </member>
    <member name="M:DriveWorks.Components.ReleaseComponentHelper.Release(DriveWorks.Components.ReleaseEnvironment,DriveWorks.Specification.SpecificationContext,System.Collections.Generic.IEnumerable{DriveWorks.ProjectComponentSet},DriveWorks.Components.IReleaseTracker,System.String)">
      <summary>Releases the given components.</summary>
      <returns>The release results.</returns>
      <param name="environment">The environment which controls the release process.</param>
      <param name="context">The specification context for which to release components.</param>
      <param name="components">The components to release.</param>
      <param name="tracker">An implementation of the  interface, or a null reference.</param>
      <param name="derivedComponentsToDefer">The names of the derived components to put on hold, not to be generated at the same time as the associated models.</param>
    </member>
    <member name="M:DriveWorks.Components.ReleaseComponentReportTracker.#ctor(DriveWorks.Reporting.IReportWriter)">
      <summary>Create a new report tracker that reports release component information to the supplied report writer.</summary>
      <param name="reportWriter">The report writer to use for the release component process.</param>
    </member>
    <member name="M:DriveWorks.Components.ReleaseComponentsResults.ConvertToReferenceTree(DriveWorks.Group)">
      <summary>Converts the release results to a complete component reference tree by copying across reference information from this release session, and retrieving
information for precedent components that were released in other sessions from the group.</summary>
      <returns>A released component reference tree.</returns>
      <param name="group">The group to use to load preexisting component reference information.</param>
    </member>
    <member name="M:DriveWorks.Components.ReleaseComponentsResults.GetComponent(System.Guid)">
      <summary>Gets a released component based on it's unique identifier.</summary>
      <returns>The component with the given identifier, or a null reference if no component exists with the given identifier.</returns>
      <param name="componentId">The unique identifier of the released component to retrieve.</param>
    </member>
    <member name="M:DriveWorks.Components.ReleaseComponentsResults.GetComponentReferences(System.Guid)">
      <summary>Gets the references for the component with the specified identifer.</summary>
      <returns>An array of references for the specified component, or a null reference if no component exists with the given identifier.</returns>
      <param name="componentId">The unique identifier of the released component for which to retrieve references.</param>
    </member>
    <member name="M:DriveWorks.Components.ReleaseComponentsResults.GetRootComponent(System.String)">
      <summary>Gets a root component based on the name of the component set</summary>
      <returns>A released component for the given component set, or a null reference if the component set</returns>
      <param name="componentSetName">Gets the root component for the component set with the given name.</param>
    </member>
    <member name="M:DriveWorks.Components.ReleaseComponentsResults.Save">
      <summary>Saves the released component results as an XML document.</summary>
    </member>
    <member name="M:DriveWorks.Components.ReleaseComponentsResults.Load(DriveWorks.Specification.SpecificationContext,System.Xml.Linq.XElement)">
      <summary>Loads the released component results from the given XML.</summary>
      <param name="specificationContext">The specification loading the results.</param>
      <param name="savedResults">The saved release results.</param>
    </member>
    <member name="M:DriveWorks.Components.ReleaseComponentsResults.Load(DriveWorks.Project,System.Xml.Linq.XElement)">
      <summary>Loads the released component results from the given XML.</summary>
      <param name="project">The project loading the results.</param>
      <param name="savedResults">The saved release results.</param>
    </member>
    <member name="M:DriveWorks.Components.ReleaseComponentsResults.Load(DriveWorks.Group,System.Xml.Linq.XElement)">
      <summary>Loads the released component results from the given XML.</summary>
      <param name="group">The group loading the results.</param>
      <param name="savedResults">The saved release results.</param>
    </member>
    <member name="M:DriveWorks.Components.ReleaseComponentsResults.Load(DriveWorks.Hosting.EngineHost,System.Xml.Linq.XElement)">
      <summary>Loads the released component results from the given XML.</summary>
      <param name="engineHost">The engine host.</param>
      <param name="savedResults">The saved release results.</param>
    </member>
    <member name="P:DriveWorks.Components.ReleaseComponentsResults.Components">
      <summary>Gets all of the components which were released.</summary>
    </member>
    <member name="P:DriveWorks.Components.ReleaseComponentsResults.Dependencies">
      <summary>Gets the identifiers of all of the driven components on which the specification is dependent.</summary>
    </member>
    <member name="P:DriveWorks.Components.ReleaseComponentsResults.DescendantId">
      <summary>Gets the identifier of the descendant specification to which the release results belong.</summary>
    </member>
    <member name="P:DriveWorks.Components.ReleaseComponentsResults.Flags">
      <summary>Gets the flags for all components released within this cycle.</summary>
    </member>
    <member name="P:DriveWorks.Components.ReleaseComponentsResults.References">
      <summary>Gets all of the component references which were released.</summary>
    </member>
    <member name="P:DriveWorks.Components.ReleaseComponentsResults.RootComponents">
      <summary>Gets the components that exist at root level.</summary>
    </member>
    <member name="P:DriveWorks.Components.ReleaseComponentsResults.ScopedTasks">
      <summary>Gets the scoped s that were released.</summary>
    </member>
    <member name="P:DriveWorks.Components.ReleaseComponentsResults.SpecificationId">
      <summary>Gets the identifier of the specification to which the release results belong.</summary>
    </member>
    <member name="M:DriveWorks.Components.ReleasedComponent.Initialize">
      <summary>When overridden by a derived class, performs any required initialization</summary>
    </member>
    <member name="P:DriveWorks.Components.ReleasedComponent.Flags">
      <summary>Gets the flags that have been set on this component.</summary>
    </member>
    <member name="P:DriveWorks.Components.ReleasedComponent.IncludeFileFormatsInLoop">
      <summary>Gets whether file formats should be generated in the loop.</summary>
    </member>
    <member name="P:DriveWorks.Components.ReleasedComponent.LoopVariations">
      <summary>Gets the variations of this component that was created during the release loop.</summary>
    </member>
    <member name="P:DriveWorks.Components.ReleasedComponent.ScopedTasks">
      <summary>Gets the scoped component tasks for this component.</summary>
    </member>
    <member name="P:DriveWorks.Components.ReleasedComponent.Tasks">
      <summary>Gets the released tasks for this component.</summary>
    </member>
    <member name="P:DriveWorks.Components.ReleasedComponentDetails.DateReleased">
      <summary>Gets/sets the date and time that this component was released.</summary>
    </member>
    <member name="P:DriveWorks.Components.ReleasedComponentDetails.Failed">
      <summary>Gets/sets whether the component has failed to be generated.</summary>
    </member>
    <member name="P:DriveWorks.Components.ReleasedComponentDetails.Flags">
      <summary>Gets/sets the flags associated with this released component.</summary>
    </member>
    <member name="P:DriveWorks.Components.ReleasedComponentDetails.Generated">
      <summary>Gets/sets whether the component has been generated.</summary>
    </member>
    <member name="P:DriveWorks.Components.ReleasedComponentDetails.Generating">
      <summary>Gets/sets whether the component is being generated.</summary>
    </member>
    <member name="P:DriveWorks.Components.ReleasedComponentDetails.Id">
      <summary>Gets/sets the unique identifier of the component.</summary>
    </member>
    <member name="P:DriveWorks.Components.ReleasedComponentDetails.MasterPath">
      <summary>Gets/sets the master path of the component.</summary>
    </member>
    <member name="P:DriveWorks.Components.ReleasedComponentDetails.ParentId">
      <summary>The unique identifier of the parent component (if any).</summary>
    </member>
    <member name="P:DriveWorks.Components.ReleasedComponentDetails.PreviewPath">
      <summary>Gets/sets the path to the .drive3d file to use if requested via a preview.</summary>
    </member>
    <member name="P:DriveWorks.Components.ReleasedComponentDetails.Tags">
      <summary>Gets/sets the tags associated with this released component.</summary>
    </member>
    <member name="P:DriveWorks.Components.ReleasedComponentDetails.TargetName">
      <summary>Gets/sets the name of the component.</summary>
    </member>
    <member name="P:DriveWorks.Components.ReleasedComponentDetails.TargetPath">
      <summary>Gets/sets the path of the component when it is generated.</summary>
    </member>
    <member name="P:DriveWorks.Components.ReleasedComponentDetails.Type">
      <summary>Gets/sets the string which identifies the type of the component.</summary>
    </member>
    <member name="P:DriveWorks.Components.ReleasedComponentReferenceDetails.Action">
      <summary>Specifies the action to take on the reference's parent component.</summary>
    </member>
    <member name="P:DriveWorks.Components.ReleasedComponentReferenceDetails.ChildId">
      <summary>The unique id of the child driven component to which the reference applies, if appropriate.</summary>
    </member>
    <member name="P:DriveWorks.Components.ReleasedComponentReferenceDetails.ChildMasterAddress">
      <summary>The address of the reference in the parent component if applicable.</summary>
    </member>
    <member name="P:DriveWorks.Components.ReleasedComponentReferenceDetails.ChildMasterPath">
      <summary>The full path to the original child component in the seed parent component.</summary>
    </member>
    <member name="P:DriveWorks.Components.ReleasedComponentReferenceDetails.Id">
      <summary>Gets/sets the unique id of the reference.</summary>
    </member>
    <member name="P:DriveWorks.Components.ReleasedComponentReferenceDetails.ParentId">
      <summary>The unique id of the parent driven component to which the reference applies.</summary>
    </member>
    <member name="P:DriveWorks.Components.ReleasedComponentReferenceDetails.TargetPath">
      <summary>Contains the full path of the file to be swapped into parent component.</summary>
    </member>
    <member name="P:DriveWorks.Components.ReleasedComponentTaskCondition.ConditionType">
      <summary>Gets the type of the condition.</summary>
    </member>
    <member name="P:DriveWorks.Components.ReleasedComponentTaskCondition.Index">
      <summary>Gets the index of the condition within the parent collection.</summary>
    </member>
    <member name="P:DriveWorks.Components.ReleasedComponentTaskCondition.Title">
      <summary>Gets the title of the condition.</summary>
    </member>
    <member name="P:DriveWorks.Components.ReleaseEnvironment.Flags">
      <summary>Gets/sets the flags to apply to the released components.</summary>
    </member>
    <member name="P:DriveWorks.Components.ReleaseEnvironment.IsLocked">
      <summary>Determines whether the object has been locked.</summary>
    </member>
    <member name="P:DriveWorks.Components.ReleaseEnvironment.OverwriteReleasedComponents">
      <summary>Gets/sets whether, during the release of components, components that already exist are overwritten or used as-is.</summary>
    </member>
    <member name="P:DriveWorks.Components.ReleaseEnvironment.TagOverrides">
      <summary>Gets/sets a list of tags that should be applied to ALL components, thereby overriding their tag rules.</summary>
    </member>
    <member name="P:DriveWorks.Components.ReleaseEnvironment.TestMode">
      <summary>Gets/sets whether the release is happening in Test Mode. This means that during the release of components, duplicate ones should be fully processed.</summary>
    </member>
    <member name="T:DriveWorks.Components.Tasks.IComponentTask">
      <summary>Represents the common interface for all s.</summary>
    </member>
    <member name="T:DriveWorks.Components.Tasks.IComponentTaskCondition">
      <summary>Represents the basic contract of a  that is evaluated at run time.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.IComponentTask.Parameters">
      <summary>Gets all capturable parameters for the task.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.IComponentTaskCondition.Parameters">
      <summary>Gets all capturable parameters for the .</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.IComponentTaskCondition.Title">
      <summary>Gets the title of this task.</summary>
    </member>
    <member name="T:DriveWorks.Components.Tasks.ComponentTaskSequenceLocation">
      <summary>Represents the different locations in the generation sequence that tasks can scheduled for execution.</summary>
    </member>
    <member name="F:DriveWorks.Components.Tasks.ComponentTaskSequenceLocation.Before">
      <summary>Indicates that the task should run before the core generation sequence.</summary>
    </member>
    <member name="F:DriveWorks.Components.Tasks.ComponentTaskSequenceLocation.After">
      <summary>Indicates that the task should run after the core generation sequence.</summary>
    </member>
    <member name="T:DriveWorks.Components.Tasks.ComponentTask">
      <summary>Represents a component task that has been added to the project.</summary>
    </member>
    <member name="T:DriveWorks.Components.Tasks.ComponentTaskAccessor">
      <summary>Provides access to the s for a component or type of component.</summary>
    </member>
    <member name="T:DriveWorks.Components.Tasks.ComponentTaskAttribute">
      <summary>Attribute to be assigned to implementors of the  interface to provide additional information about the task.</summary>
    </member>
    <member name="T:DriveWorks.Components.Tasks.ComponentTaskCollection">
      <summary>Represents a collection of s.</summary>
    </member>
    <member name="T:DriveWorks.Components.Tasks.ComponentTaskCondition">
      <summary>Represents a  condition that is released alongside <see cref="T:DriveWorks.Components.Tasks.ComponentTask" />s and are
evaluated at the time of executing the task.</summary>
    </member>
    <member name="T:DriveWorks.Components.Tasks.ComponentTaskConditionAttribute">
      <summary>Attribute to be assigned to implementors of the  interface to provide additional information about the
condition.</summary>
    </member>
    <member name="T:DriveWorks.Components.Tasks.ComponentTaskConditionEventArgs">
      <summary>Represents the event data that pertains to events related to component task conditions.</summary>
    </member>
    <member name="T:DriveWorks.Components.Tasks.ComponentTaskConditionInfo">
      <summary>Provides additional information about a .</summary>
    </member>
    <member name="T:DriveWorks.Components.Tasks.ComponentTaskConditionProperties">
      <summary>Represents a collection of  objects.</summary>
    </member>
    <member name="T:DriveWorks.Components.Tasks.ComponentTaskConditions">
      <summary>Represents a collection of s that are evaluated at runtime.</summary>
    </member>
    <member name="T:DriveWorks.Components.Tasks.ComponentTaskCorruptException">
      <summary>Represents the exception throw when the project contains invalid XML for the s.</summary>
    </member>
    <member name="T:DriveWorks.Components.Tasks.ComponentTaskEventArgs">
      <summary>Provides data for events related to s.</summary>
    </member>
    <member name="T:DriveWorks.Components.Tasks.ComponentTaskParameterInfo">
      <summary>Represents the capturable parameters of a .</summary>
    </member>
    <member name="T:DriveWorks.Components.Tasks.ComponentTaskParameterMetaData">
      <summary>Represents additional information about a parameter for a .</summary>
    </member>
    <member name="T:DriveWorks.Components.Tasks.ComponentTaskProperty">
      <summary>Represents a property on a .</summary>
    </member>
    <member name="T:DriveWorks.Components.Tasks.ComponentTaskReleaseCondition">
      <summary>Represents a condition which governs whether a  getes released during the release process.</summary>
    </member>
    <member name="T:DriveWorks.Components.Tasks.ComponentTaskReleaseConditionEventArgs">
      <summary>Represents the event data that pertains to events related to component task conditions.</summary>
    </member>
    <member name="T:DriveWorks.Components.Tasks.ComponentTaskReleaseConditionInfo">
      <summary>Provides additional information about a .</summary>
    </member>
    <member name="T:DriveWorks.Components.Tasks.ComponentTaskReleaseConditions">
      <summary>Represents a collection of conditions that governs whether a  gets released.</summary>
    </member>
    <member name="T:DriveWorks.Components.Tasks.ComponentTaskRule">
      <summary>Represents the rule for a  parameter.</summary>
    </member>
    <member name="T:DriveWorks.Components.Tasks.ComponentTaskRuleCollection">
      <summary>Represents a collection of rules for a .</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTask.ComponentId">
      <summary>Gets the id of the component this task is associated with.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTask.Id">
      <summary>Gets the unique identifier of this task.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTask.Index">
      <summary>Gets the index of this task in the parent collection.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTask.Location">
      <summary>Gets/sets the location of this task in the generation sequence.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTask.Name">
      <summary>Gets/sets the title of the task.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTask.Parameters">
      <summary>Gets the collection of parameters for this task.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTask.ReleaseConditions">
      <summary>Gets the collection of conditions that governs whether this task gets released alongside the associated component.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTask.RuntimeConditions">
      <summary>Gets the collection of conditions that will be released alongside the component and evaluated at run time.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTask.Scope">
      <summary>Gets the scope the task has been added to.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTask.Type">
      <summary>Gets the type of the task.</summary>
    </member>
    <member name="F:DriveWorks.Components.Tasks.ComponentTask.INDEX_PARAM_TYPE_ID">
      <summary>The type id of the  parameter the release data for <see cref="T:DriveWorks.Components.Tasks.ComponentTask" />s.</summary>
    </member>
    <member name="F:DriveWorks.Components.Tasks.ComponentTask.LOCATION_PARAM_TYPE_ID">
      <summary>The type id of the  parameter the release data for <see cref="T:DriveWorks.Components.Tasks.ComponentTask" />s.</summary>
    </member>
    <member name="F:DriveWorks.Components.Tasks.ComponentTask.TASK_RELEASE_TYPE_ID">
      <summary>The element type id of released s in the underlying release data.</summary>
    </member>
    <member name="E:DriveWorks.Components.Tasks.ComponentTask.IndexChanged">
      <summary>The event that gets raised when the index of the task has changed in the parent collection.</summary>
    </member>
    <member name="E:DriveWorks.Components.Tasks.ComponentTask.LocationChanged">
      <summary>The even that gets raised when the location of the task has changed.</summary>
    </member>
    <member name="E:DriveWorks.Components.Tasks.ComponentTask.NameChanged">
      <summary>The event that gets raised when the name of the task has changed.</summary>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskAccessor.Clear">
      <summary>Removes all tasks managed by this accessor from the project.</summary>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskAccessor.EnsureCollection(DriveWorks.Components.Tasks.ComponentTaskSequenceLocation)">
      <summary>Ensures that a task collection for the given location has been created.</summary>
      <returns>A task collection for the given location.</returns>
      <param name="location">The location of the task collection.</param>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskAccessor.IsNameTaken(System.String)">
      <summary>Checks if the given name is occupied by a task in any of the collections managed by this accessor.</summary>
      <returns>True if a task exists in the accessor with the given name.</returns>
      <param name="name">The name to check.</param>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskAccessor.Remove(DriveWorks.Components.Tasks.ComponentTask)">
      <summary>Removes the given task from the collection and deletes it from the project.</summary>
      <returns>True if the task was successfully removed.</returns>
      <param name="task">The task to remove.</param>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskAccessor.Add``1(System.String)">
      <summary>Adds a new task to the collection and returns the newly created task.</summary>
      <returns>The newly created task, or a null reference (Nothing in VB) if the creation of the task fails.</returns>
      <typeparam name="T">The type of the task to create.</typeparam>
      <param name="name">The name of the task to create.</param>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskAccessor.Add``1(System.String,DriveWorks.Components.Tasks.ComponentTaskSequenceLocation)">
      <summary>Adds a new task to the collection and returns the newly created task.</summary>
      <returns>The newly created task, or a null reference (Nothing in VB) if the creation of the task fails.</returns>
      <typeparam name="T">The type of the task to create.</typeparam>
      <param name="name">The name of the task to create.</param>
      <param name="location">The location of the task.</param>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskAccessor.Add(System.Type,System.String)">
      <summary>Adds a new task to the collection and returns the newly created task.</summary>
      <returns>The newly created task, or a null reference (Nothing in VB) if the creation of the task fails.</returns>
      <param name="type">The type of the task to create.</param>
      <param name="name">The name of the task to create.</param>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskAccessor.Add(System.Type,System.String,DriveWorks.Components.Tasks.ComponentTaskSequenceLocation)">
      <summary>Adds a new task to the collection and returns the newly created task.</summary>
      <returns>The newly created task, or a null reference (Nothing in VB) if the creation of the task fails.</returns>
      <param name="type">The type of the task to create.</param>
      <param name="name">The name of the task to create.</param>
      <param name="location">The location of the task.</param>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskAccessor.Get(System.Guid)">
      <summary>Gets the task with the given id in the collection (or a null reference if the task doesn't exist).</summary>
      <returns>The task with the given id if it's present in the collection, otherwise a null reference.</returns>
      <param name="taskId">The id of the task to get.</param>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskAccessor.Get(System.String)">
      <summary>Gets the task with the given name in the collection (or a null reference if the task doesn't exist).</summary>
      <returns>The task with the given name if it's present in the collection, otherwise a null reference.</returns>
      <param name="name">The name of the task to get.</param>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskAccessor.Insert``1(System.String,System.Int32)">
      <summary>Creates and inserts a new  at the given index.</summary>
      <exception caption="" cref="T:System.IndexOutOfRangeException">Index is negative or greater than the size of the collection.</exception>
      <returns>The newly created task, or a null reference (Nothing in VB) if the creation of the task fails.</returns>
      <typeparam name="T">The type of the task to create.</typeparam>
      <param name="name">The name of the task to create.</param>
      <param name="index">The index to insert the newly created task in.</param>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskAccessor.Insert``1(System.String,System.Int32,DriveWorks.Components.Tasks.ComponentTaskSequenceLocation)">
      <summary>Creates and inserts a new  at the given index.</summary>
      <exception caption="" cref="T:System.IndexOutOfRangeException">Index is negative or greater than the size of the collection.</exception>
      <returns>The newly created task, or a null reference (Nothing in VB) if the creation of the task fails.</returns>
      <typeparam name="T">The type of the task to create.</typeparam>
      <param name="name">The name of the task to create.</param>
      <param name="index">The index to insert the newly created task in.</param>
      <param name="location">The location of the task to insert.</param>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskAccessor.Insert(System.Type,System.String,System.Int32)">
      <summary>Creates and inserts a new  at the given index.</summary>
      <exception caption="" cref="T:System.IndexOutOfRangeException">Index is negative or greater than the size of the collection.</exception>
      <returns>The newly created task, or a null reference (Nothing in VB) if the creation of the task fails.</returns>
      <param name="type">The type of the task to create.</param>
      <param name="name">The name of the task to create.</param>
      <param name="index">The index to insert the newly created task in.</param>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskAccessor.Insert(System.Type,System.String,System.Int32,DriveWorks.Components.Tasks.ComponentTaskSequenceLocation)">
      <summary>Creates and inserts a new  at the given index.</summary>
      <exception caption="" cref="T:System.IndexOutOfRangeException">Index is negative or greater than the size of the collection.</exception>
      <returns>The newly created task, or a null reference (Nothing in VB) if the creation of the task fails.</returns>
      <param name="type">The type of the task to create.</param>
      <param name="name">The name of the task to create.</param>
      <param name="index">The index to insert the newly created task in.</param>
      <param name="location">The location of the task to insert.</param>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskAccessor.Collections">
      <summary>Gets the task collections this accessor manages.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskAccessor.Item(DriveWorks.Components.Tasks.ComponentTaskSequenceLocation)">
      <summary>Gets the  for the tasks with the specified location.</summary>
      <param name="location">The sequence location of the task collection to retrieve.</param>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskAccessor.TotalTaskCount">
      <summary>Gets the total number of tasks in the accessor.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskAttribute.Category">
      <summary>Gets/sets the category of this task.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskAttribute.Description">
      <summary>Gets the description of this task providing additional information about this task.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskAttribute.Image">
      <summary>Gets the description of this task providing additional information about this task.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskAttribute.Name">
      <summary>The name of the task as shown to the end user when administrating tasks.</summary>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskCollection.Move(System.Int32,System.Int32)">
      <summary>Moves the task at <paramref name="oldIndex" /> to <paramref name="newIndex" />.</summary>
      <param name="oldIndex">The index of the task to move.</param>
      <param name="newIndex">The new index of the task.</param>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskCollection.Add(System.Type,System.String)">
      <summary>Adds a new task to the collection and returns the newly created task.</summary>
      <returns>The newly created task, or a null reference (Nothing in VB) if the creation of the task fails.</returns>
      <param name="type">The type of the task to create.</param>
      <param name="name">The name of the task to create.</param>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskCollection.Insert(System.Type,System.String,System.Int32)">
      <summary>Creates and inserts a new  at the given index.</summary>
      <exception caption="" cref="T:System.IndexOutOfRangeException">Index is negative or greater than the size of the collection.</exception>
      <returns>The newly created task, or a null reference (Nothing in VB) if the creation of the task fails.</returns>
      <param name="type">The type of the task to create.</param>
      <param name="name">The name of the task to create.</param>
      <param name="index">The index to insert the newly created task in.</param>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskCollection.Remove(DriveWorks.Components.Tasks.ComponentTask)">
      <summary>Removes the given task from the collection and deletes it from the project.</summary>
      <returns>True if the task was successfully removed.</returns>
      <param name="task">The task to remove.</param>
    </member>
    <member name="E:DriveWorks.Components.Tasks.ComponentTaskCollection.Added">
      <summary>The event that gets raised when a task has been added to the collection.</summary>
    </member>
    <member name="E:DriveWorks.Components.Tasks.ComponentTaskCollection.Removed">
      <summary>The event that gets raised when a task has been removed from the collection.</summary>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskCondition.Save">
      <summary>Saves the condition to the backing XML store.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskCondition.Id">
      <summary>Gets the id of the condition.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskCondition.Index">
      <summary>Gets the index of the condition in the parent collection.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskCondition.Info">
      <summary>Gets the meta data describing the type of the condition.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskCondition.Parent">
      <summary>Gets the collection of conditions this condition belongs to.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskCondition.Properties">
      <summary>Gets the collection of properties for this condition.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskCondition.Title">
      <summary>Gets/sets the title of the condition.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskCondition.TypeName">
      <summary>Gets the type of the type of the condition.</summary>
    </member>
    <member name="F:DriveWorks.Components.Tasks.ComponentTaskCondition.CONDITION_RELEASE_TYPE_ID">
      <summary>The id of the released condition within the parents collection of released conditions.</summary>
    </member>
    <member name="F:DriveWorks.Components.Tasks.ComponentTaskCondition.INDEX_PARAM_TYPE_ID">
      <summary>The index of the task within the parents collection.</summary>
    </member>
    <member name="F:DriveWorks.Components.Tasks.ComponentTaskCondition.TITLE_PARAM_TYPE_ID">
      <summary>Gets the unique identifier of the  parameter in the release data.</summary>
    </member>
    <member name="E:DriveWorks.Components.Tasks.ComponentTaskCondition.IndexChanged">
      <summary>The event that is raised whenever the index of this task within the parent collection changes.</summary>
    </member>
    <member name="E:DriveWorks.Components.Tasks.ComponentTaskCondition.TitleChanged">
      <summary>The event that is raised whenever the  property's value has changed.</summary>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskConditionAttribute.#ctor(System.String)">
      <summary>Creates a new instance of the see  class.</summary>
      <param name="title">The title to show the user when administrating the condition.</param>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskConditionAttribute.#ctor(System.String,System.String)">
      <summary>Creates a new instance of the see  class.</summary>
      <param name="title">The title to show the user when administrating the condition.</param>
      <param name="description">The description providing the user with additional information about this condition.</param>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskConditionAttribute.#ctor(System.String,System.String,System.String)">
      <summary>Creates a new instance of the see  class.</summary>
      <param name="title">The title to show the user when administrating the condition.</param>
      <param name="description">The description providing the user with additional information about this condition.</param>
      <param name="image">The resource uri to the image used to represent the associated condition.</param>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskConditionAttribute.#ctor(System.String,System.String,System.String,System.String)">
      <summary>Creates a new instance of the see  class.</summary>
      <param name="title">The title to show the user when administrating the condition.</param>
      <param name="description">The description providing the user with additional information about this condition.</param>
      <param name="image">The resource uri to the image used to represent the associated condition.</param>
      <param name="category">The category of the condition.</param>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskConditionAttribute.Category">
      <summary>Gets/sets the category of this condition.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskConditionAttribute.Description">
      <summary>Gets the description of this condition.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskConditionAttribute.Image">
      <summary>Gets the description of this condition.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskConditionAttribute.Title">
      <summary>The title of the condition.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskConditionEventArgs.Condition">
      <summary>Gets the condition involved in the event.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskConditionInfo.Category">
      <summary>Gets the category of the condition.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskConditionInfo.Description">
      <summary>Gets the description of the condition.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskConditionInfo.Image">
      <summary>Gets the image resource uri of the condition.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskConditionInfo.Parameters">
      <summary>Gets the collection of parameter info describing the rules of the condition.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskConditionInfo.Title">
      <summary>Gets the title of the condition.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskConditionInfo.Type">
      <summary>Gets the type of the condition.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskConditionInfo.TypeName">
      <summary>Gets the full type name used to serialize/deserialize the condition.</summary>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskConditionProperties.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskConditionProperties.Count">
      <summary>Gets the number of elements in the collection.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskConditionProperties.Item(System.Int32)">
      <summary>Gets the rule at the specified index in the read-only list.</summary>
    </member>
    <member name="E:DriveWorks.Components.Tasks.ComponentTaskConditionProperties.RuleChanged">
      <summary>The event that gets raised whenever a rule in the collection has changed.</summary>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskConditions.Clear">
      <summary>Removes all conditions from the collection.</summary>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskConditions.Contains(DriveWorks.Components.Tasks.ComponentTaskCondition)">
      <summary>Determines whether the collection contains a specific condition.</summary>
      <returns>True if the condition was found in the collection, otherwise False.</returns>
      <param name="condition">The condition to locate in the collection.</param>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskConditions.CopyTo(DriveWorks.Components.Tasks.ComponentTaskCondition[],System.Int32)">
      <summary>Copies the elements of the System.Collections.Generic.ICollection`1 to an System.Array, starting at a particular System.Array index.</summary>
      <param name="array">The one-dimensional System.Array that is the destination of the elements copied from this collection.</param>
      <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskConditions.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>A  that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskConditions.IndexOf(DriveWorks.Components.Tasks.ComponentTaskCondition)">
      <summary>Determines the index of the specific condition in the collection.</summary>
      <returns>The index of condition if found in the collection, otherwise -1.</returns>
      <param name="item">The condition to locate in the collection.</param>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskConditions.Remove(DriveWorks.Components.Tasks.ComponentTaskCondition)">
      <summary>Removes a condition from the collection.</summary>
      <param name="condition">The condition to remove.</param>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskConditions.RemoveAt(System.Int32)">
      <summary>Removes the condition at the specified index.</summary>
      <param name="index">The index of the condition to remove.</param>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskConditions.Save">
      <summary>Saves the conditions in this collection to the highest bidder.</summary>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskConditions.Add``1(System.String)">
      <summary>Creates and adds a new condition of the specified type to the collection.</summary>
      <exception caption="" cref="T:System.ArgumentException">The specified type is not a valid %T:DriveWorks.Components.Tasks.ComponentTaskCondition% type.</exception>
      <returns>The newly created condition.</returns>
      <typeparam name="T">The type of the condition to add (Must inherit from ).</typeparam>
      <param name="title">The title of the condition to create.</param>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskConditions.Add(System.Type,System.String)">
      <summary>Creates and adds a new condition of the specified type to the collection.</summary>
      <exception caption="" cref="T:System.ArgumentException">The specified type is not a valid %T:DriveWorks.Components.Tasks.ComponentTaskCondition% type.</exception>
      <returns>The newly created condition.</returns>
      <param name="type">The type of the condition to add (Must inherit from ).</param>
      <param name="title">The title of the condition to create.</param>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskConditions.Add``1(System.String,System.Int32)">
      <summary>Creates and adds a new condition of the specified type to the collection.</summary>
      <exception caption="" cref="T:System.ArgumentException">The specified type is not a valid %T:DriveWorks.Components.Tasks.ComponentTaskCondition% type.</exception>
      <returns>The newly created condition.</returns>
      <typeparam name="T">The type of the condition to add (Must inherit from ).</typeparam>
      <param name="title">The title of the condition to create.</param>
      <param name="index">The index to insert the newly condition at.</param>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskConditions.Add(System.Type,System.String,System.Int32)">
      <summary>Creates and adds a new condition of the specified type to the collection.</summary>
      <exception caption="" cref="T:System.ArgumentException">The specified type is not a valid %T:DriveWorks.Components.Tasks.ComponentTaskCondition% type.</exception>
      <returns>The newly created condition.</returns>
      <param name="type">The type of the condition to add (Must inherit from ).</param>
      <param name="title">The title of the condition to create.</param>
      <param name="index">The index to insert the newly condition at.</param>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskConditions.Count">
      <summary>Gets the number of conditions in the collection.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskConditions.IsReadOnly">
      <summary>Gets whether this collection is read only.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskConditions.Item(System.Int32)">
      <summary>Gets the item at the specified index.</summary>
      <exception caption="" cref="T:System.ArgumentOutOfRangeException">Index is not a valid index for the collection.Attempting to call the setter of this property.</exception>
      <returns>The condition at the specified index.</returns>
      <param name="index">The index of the item to get.</param>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskConditions.Task">
      <summary>Gets the task this condition is associated with.</summary>
    </member>
    <member name="E:DriveWorks.Components.Tasks.ComponentTaskConditions.Added">
      <summary>The event that gets raised whenever a condition is added to this collection.</summary>
    </member>
    <member name="E:DriveWorks.Components.Tasks.ComponentTaskConditions.ConditionTitleChanged">
      <summary>The event that gets raised whenever the title of a condition in the collection changes.</summary>
    </member>
    <member name="E:DriveWorks.Components.Tasks.ComponentTaskConditions.Removed">
      <summary>The event that gets raised whenever a condition has been removed from this collection.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskEventArgs.Task">
      <summary>Gets the task associated with this event.</summary>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskParameterInfo.#ctor(System.String,System.String)">
      <summary>Creates a new instance of the  class.</summary>
      <exception caption="" cref="T:System.ArgumentException">%name% is null or empty.</exception>
      <param name="name">The name of the parameter.</param>
      <param name="displayName">The name of the parameter to show end end user.</param>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskParameterInfo.#ctor(System.String,System.String,System.String)">
      <summary>Creates a new instance of the  class.</summary>
      <exception caption="" cref="T:System.ArgumentException">%name% is null or empty.</exception>
      <param name="name">The name of the parameter.</param>
      <param name="displayName">The name of the parameter to show end end user.</param>
      <param name="description">The description of the parameter.</param>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskParameterInfo.#ctor(System.String,System.String,System.String,System.String)">
      <summary>Creates a new instance of the  class.</summary>
      <exception caption="" cref="T:System.ArgumentException">%name% is null or empty.</exception>
      <param name="name">The name of the parameter.</param>
      <param name="displayName">The name of the parameter to show end end user.</param>
      <param name="description">The description of the parameter.</param>
      <param name="category">The category this parameter belongs to.</param>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskParameterInfo.#ctor(System.String,System.String,System.String,System.String,DriveWorks.Components.Tasks.ComponentTaskParameterMetaData)">
      <summary>Creates a new instance of the  class.</summary>
      <exception caption="" cref="T:System.ArgumentException">%name% is null or empty.</exception>
      <param name="name">The name of the parameter.</param>
      <param name="displayName">The name of the parameter to show end end user.</param>
      <param name="description">The description of the parameter.</param>
      <param name="category">The category this parameter belongs to.</param>
      <param name="metaData">Additional meta data describing the parameter.</param>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskParameterInfo.Category">
      <summary>Gets the category of the parameter.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskParameterInfo.Description">
      <summary>Gets the description of the parameter.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskParameterInfo.DisplayName">
      <summary>Gets the name of the task to display to the end user.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskParameterInfo.MetaData">
      <summary>Gets the rule types of the parameter.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskParameterInfo.Name">
      <summary>Gets the name of the parameter.</summary>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskParameterMetaData.#ctor(DriveWorks.Forms.DataModel.PropertyBehavior)">
      <summary>Creates a new instance of the  class.</summary>
      <param name="behavior">The behavior of the property.</param>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskParameterMetaData.#ctor(DriveWorks.Forms.DataModel.PropertyBehavior,System.Type,System.Object)">
      <summary>Creates a new instance of the  class.</summary>
      <param name="behaviour">The behavior of the property.</param>
      <param name="valueType">The CLR type of the property when it is static (if supported).</param>
      <param name="defaultValue">The default value of the property when it has just been created.</param>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskParameterMetaData.#ctor(DriveWorks.Forms.DataModel.PropertyBehavior,System.Type,System.Object,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Creates a new instance of the  class.</summary>
      <param name="behaviour">The behavior of the property.</param>
      <param name="valueType">The CLR type of the property when it is static (if supported).</param>
      <param name="defaultValue">The default value of the property when it has just been created.</param>
      <param name="ruleTypes">The rule type of the .</param>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskParameterMetaData.Behavior">
      <summary>Gets the behavior of this property describing whether it can be made dynamic and/or static.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskParameterMetaData.DefaultValue">
      <summary>Gets the default value of the property.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskParameterMetaData.RuleTypes">
      <summary>Gets the type the rule represents.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskParameterMetaData.Type">
      <summary>Gets the value type the property holds if it supports being static and holds a static value.</summary>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskProperty.SetIsDynamic(System.Boolean)">
      <summary>Changes whether this property is bound to a rule, or a static value.</summary>
      <exception caption="" cref="T:System.InvalidOperationException">The property does not support being made dynamic.</exception>
      <param name="isDynamic">True if this property should be bound to a rule, False for it to be bound to a static value.</param>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskProperty.SetRuleAndComment(System.String,System.String)">
      <summary>Sets the rule and comment in a single operation and updates the version history.</summary>
      <param name="newRule">The new rule to set.</param>
      <param name="newComment">The new comment to set.</param>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskProperty.CanMakeDynamic">
      <summary>Gets whether this property can be made dynamic.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskProperty.CanMakeStatic">
      <summary>Gets whether this property can be made static.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskProperty.IsDynamic">
      <summary>Gets whether this property is dynamic.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskProperty.Type">
      <summary>Gets the CLR type of the value the parameter holds if  is False.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskProperty.Value">
      <summary>Gets/sets the value of the rule.</summary>
    </member>
    <member name="E:DriveWorks.Components.Tasks.ComponentTaskProperty.IsDynamicChanged">
      <summary>The event that gets raised when the  property has changed.</summary>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskReleaseCondition.Evaluate(DriveWorks.Specification.SpecificationContext)">
      <summary>When overridden by a derived class, evaluates the condition.</summary>
      <returns>True if the condition passes, otherwise false.</returns>
      <param name="specificationContext">The active execution context.</param>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskReleaseCondition.Save">
      <summary>Pushes the current condition information into the backing store.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskReleaseCondition.Id">
      <summary>Gets the unique identifier of this condition.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskReleaseCondition.Index">
      <summary>Gets the index of this condition within the parent collection.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskReleaseCondition.Info">
      <summary>Gets additional meta information about the condition, such as the localized title and description.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskReleaseCondition.Negated">
      <summary>Determins whether the condition evaluation is to be negated (have not applied to it).</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskReleaseCondition.Parent">
      <summary>Gets the collection this condition belongs to.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskReleaseCondition.Properties">
      <summary>Represents all properties of the task that can have rules written for them.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskReleaseCondition.Title">
      <summary>Gets/sets the title of this condition.</summary>
    </member>
    <member name="E:DriveWorks.Components.Tasks.ComponentTaskReleaseCondition.TitleChanged">
      <summary>The event that gets raised whenever the value of the  property has changed.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskReleaseConditionEventArgs.Condition">
      <summary>Gets the condition involved in the event.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskReleaseConditionInfo.Category">
      <summary>Gets the category of the condition.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskReleaseConditionInfo.Description">
      <summary>Gets the description of the condition.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskReleaseConditionInfo.Image">
      <summary>Gets the image resource uri of the condition.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskReleaseConditionInfo.Title">
      <summary>Gets the title of the condition.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskReleaseConditionInfo.Type">
      <summary>Gets the type of the condition.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskReleaseConditionInfo.TypeName">
      <summary>Gets the full type name used to serialize/deserialize the condition.</summary>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskReleaseConditions.Clear">
      <summary>Removes all conditions from the collection.</summary>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskReleaseConditions.Contains(DriveWorks.Components.Tasks.ComponentTaskReleaseCondition)">
      <summary>Determines whether the collection contains a specific condition.</summary>
      <returns>True if the condition was found in the collection, otherwise False.</returns>
      <param name="condition">The condition to locate in the collection.</param>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskReleaseConditions.CopyTo(DriveWorks.Components.Tasks.ComponentTaskReleaseCondition[],System.Int32)">
      <summary>Copies the elements of the System.Collections.Generic.ICollection`1 to an System.Array, starting at a particular System.Array index.</summary>
      <param name="array">The one-dimensional System.Array that is the destination of the elements copied from this collection.</param>
      <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskReleaseConditions.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>A  that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskReleaseConditions.IndexOf(DriveWorks.Components.Tasks.ComponentTaskReleaseCondition)">
      <summary>Determines the index of the specific condition in the collection.</summary>
      <returns>The index of condition if found in the collection, otherwise -1.</returns>
      <param name="item">The condition to locate in the collection.</param>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskReleaseConditions.Remove(DriveWorks.Components.Tasks.ComponentTaskReleaseCondition)">
      <summary>Removes the first occurrence of the given condition within the collection.</summary>
      <returns>True if the item was successfully removed, otherwise False.</returns>
      <param name="item">The item to remove.</param>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskReleaseConditions.RemoveAt(System.Int32)">
      <summary>Removes the condition at the specified index.</summary>
      <param name="index">The index of the condition to remove.</param>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskReleaseConditions.Add(System.Type,System.String)">
      <summary>Creates a new  of the given type and adds it to the collection.</summary>
      <returns>The newly created condition.</returns>
      <param name="type">The type of the condition to create. This type must inherit from .</param>
      <param name="title">The title of the condition to create.</param>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskReleaseConditions.Add``1(System.String)">
      <summary>Creates a new  of type <typeparamref name="T" /> and adds it to the collection.</summary>
      <returns>The newly created condition.</returns>
      <typeparam name="T">The type of the condition to create. This type must inherit from .</typeparam>
      <param name="title">The title of the condition to create.</param>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskReleaseConditions.Count">
      <summary>Gets the number of elements in the collection.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskReleaseConditions.Item(System.Int32)">
      <summary>Gets the element at the specified index in the collection.</summary>
      <returns>The element at the specified index in the read-only list.</returns>
      <param name="index">The zero-based index of the element to get.</param>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskReleaseConditions.Task">
      <summary>Gets the task this collection of conditions is associated with.</summary>
    </member>
    <member name="E:DriveWorks.Components.Tasks.ComponentTaskReleaseConditions.Added">
      <summary>The event that gets raised whenever a task has been added to the collection.</summary>
    </member>
    <member name="E:DriveWorks.Components.Tasks.ComponentTaskReleaseConditions.ConditionTitleChanged">
      <summary>The event that gets raised whenever the title of a condition in the collection changes.</summary>
    </member>
    <member name="E:DriveWorks.Components.Tasks.ComponentTaskReleaseConditions.Removed">
      <summary>The event that gets raised whenever a task has been removed from the collection.</summary>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskRule.GetVersionHistory">
      <summary>Retrieves the version history of the rule.</summary>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskRule.SetRuleAndComment(System.String,System.String)">
      <summary>Sets the rule and comment in a single operation and updates the version history.</summary>
      <param name="newRule">The new rule to set.</param>
      <param name="newComment">The new comment to set.</param>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskRule.Category">
      <summary>Gets the category of this rule.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskRule.Comment">
      <summary>Gets/sets the comment for the rule.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskRule.Description">
      <summary>Gets the user friendly description of this rule.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskRule.DisplayName">
      <summary>Gets the display name of the rule.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskRule.Id">
      <summary>Gets the invariant identifier of the rule.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskRule.IsWritable">
      <summary>Gets whether the rule and comment can be written to.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskRule.Name">
      <summary>Gets the invariant name of the rule.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskRule.Rule">
      <summary>Gets/sets the rule.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskRule.RuleType">
      <summary>Gets an array of type names which qualify the type of the rule.</summary>
    </member>
    <member name="E:DriveWorks.Components.Tasks.ComponentTaskRule.RuleChanged">
      <summary>Raised when the  property has changed.</summary>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskRuleCollection.GetEnumerator">
      <summary>Gets an enumerator that iterates over the collection.</summary>
    </member>
    <member name="M:DriveWorks.Components.Tasks.ComponentTaskRuleCollection.GetEnumerator1">
      <summary>Gets an enumerator that iterates over the collection.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskRuleCollection.Count">
      <summary>Gets the number of items in the collection.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.ComponentTaskRuleCollection.Item(System.Int32)">
      <summary>Gets the item at the specified index.</summary>
    </member>
    <member name="E:DriveWorks.Components.Tasks.ComponentTaskRuleCollection.RuleChanged">
      <summary>The event that gets raised whenever a rule in the collection has changed.</summary>
    </member>
    <member name="T:DriveWorks.Components.Tasks.StandardConditions.CheckValueComponentTaskReleaseCondition">
      <summary>A component task condition which determines whether the value entered is TRUE/YES/1.</summary>
    </member>
    <member name="T:DriveWorks.Components.Tasks.StandardConditions.ReleaseToAutopilotCondition">
      <summary>A Component Task condition which determines whether the ReleaseToAutoPilot setting is turned on.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.StandardConditions.CheckValueComponentTaskReleaseCondition.Value">
      <summary>Gets the value to check for.</summary>
    </member>
    <member name="P:DriveWorks.Components.Tasks.StandardConditions.ReleaseToAutopilotCondition.SettingValue">
      <summary>Gets/sets the desires setting value to check for when this condition is evaluated.</summary>
    </member>
    <member name="T:DriveWorks.Connectors.Database.DatabaseConnectorConfiguration">
      <summary>Provides editable properties for the database group connector.</summary>
    </member>
    <member name="T:DriveWorks.Connectors.Database.InputBinding">
      <summary>Provides information about a binding between a field in a table and an input in a DriveWorks project.</summary>
    </member>
    <member name="T:DriveWorks.Connectors.Database.OdbcDataSourceConfiguration">
      <summary>Provides configuration options for ODBC data sources.</summary>
    </member>
    <member name="T:DriveWorks.Connectors.Database.SqlDataSourceConfiguration">
      <summary>Provides configuration of options for a SQL data source.</summary>
    </member>
    <member name="M:DriveWorks.Connectors.Database.DatabaseConnectorConfiguration.AddInput(System.String,System.String)">
      <summary>Adds a new input bindings for this configuration.</summary>
      <param name="fieldName">The database field name to bind to.</param>
      <param name="inputName">The DriveWorks input name to bind to.</param>
    </member>
    <member name="M:DriveWorks.Connectors.Database.DatabaseConnectorConfiguration.ClearInputs">
      <summary>Removes all input bindings from this configuration.</summary>
    </member>
    <member name="P:DriveWorks.Connectors.Database.DatabaseConnectorConfiguration.DataSourceElement">
      <summary>Gets/sets the data used for configuring the data source for the connector.</summary>
    </member>
    <member name="P:DriveWorks.Connectors.Database.DatabaseConnectorConfiguration.DataSourceTypeName">
      <summary>Get/sets the name of the type that is responsible for configuring the data source for the connector.</summary>
    </member>
    <member name="P:DriveWorks.Connectors.Database.DatabaseConnectorConfiguration.IdFieldName">
      <summary>Gets/set the name of the field that contains a unique identifier for each row.</summary>
    </member>
    <member name="P:DriveWorks.Connectors.Database.DatabaseConnectorConfiguration.Inputs">
      <summary>Gets the input bindings used in this configuration.</summary>
    </member>
    <member name="P:DriveWorks.Connectors.Database.DatabaseConnectorConfiguration.OperationFieldName">
      <summary>Gets/sets the name of the optional field that contains the name of the operation to invoke.</summary>
    </member>
    <member name="P:DriveWorks.Connectors.Database.DatabaseConnectorConfiguration.OperationName">
      <summary>Gets/sets the name of the operation to invoke.</summary>
    </member>
    <member name="P:DriveWorks.Connectors.Database.DatabaseConnectorConfiguration.ProcessFailedValue">
      <summary>Gets/sets the value that indicates that a row has failed to be processed into a specification.</summary>
    </member>
    <member name="P:DriveWorks.Connectors.Database.DatabaseConnectorConfiguration.ProcessFieldName">
      <summary>Gets/sets the name of the field that contains the process state information.</summary>
    </member>
    <member name="P:DriveWorks.Connectors.Database.DatabaseConnectorConfiguration.ProcessingValue">
      <summary>Gets/sets the value that indicates that a row is being processed currently.</summary>
    </member>
    <member name="P:DriveWorks.Connectors.Database.DatabaseConnectorConfiguration.ProcessSuccessValue">
      <summary>Gets/sets the value that indicates that a row has been successfully processed into a specification.</summary>
    </member>
    <member name="P:DriveWorks.Connectors.Database.DatabaseConnectorConfiguration.ProjectFieldName">
      <summary>Gets/sets the optional field name that will contain the name of the project to create specifications from.</summary>
    </member>
    <member name="P:DriveWorks.Connectors.Database.DatabaseConnectorConfiguration.ProjectName">
      <summary>Gets/sets the name of the project to create specifications from if the project field could not be used.</summary>
    </member>
    <member name="P:DriveWorks.Connectors.Database.DatabaseConnectorConfiguration.SpecificationId">
      <summary>Gets/sets the id of the specification to modify.</summary>
    </member>
    <member name="P:DriveWorks.Connectors.Database.DatabaseConnectorConfiguration.SpecificationIdFieldName">
      <summary>Gets/sets the optional field name that will contain the id of the specification to modify.</summary>
    </member>
    <member name="P:DriveWorks.Connectors.Database.DatabaseConnectorConfiguration.SpecificationName">
      <summary>Gets/sets the name of the specification to modify.</summary>
    </member>
    <member name="P:DriveWorks.Connectors.Database.DatabaseConnectorConfiguration.SpecificationNameFieldName">
      <summary>Gets/sets the optional field name that will contain the name of the specification to modify.</summary>
    </member>
    <member name="P:DriveWorks.Connectors.Database.DatabaseConnectorConfiguration.TableName">
      <summary>Gets/sets the name of the table that will be read from.</summary>
    </member>
    <member name="P:DriveWorks.Connectors.Database.DatabaseConnectorConfiguration.TimerInterval">
      <summary>Gets/sets the time between checks to the database for new data to process.</summary>
    </member>
    <member name="P:DriveWorks.Connectors.Database.DatabaseConnectorConfiguration.ToProcessValue">
      <summary>Gets/sets the value that indicates that a row is ready to be processed by this connector.</summary>
    </member>
    <member name="P:DriveWorks.Connectors.Database.DatabaseConnectorConfiguration.TransitionFieldName">
      <summary>Gets/sets the name of the optional field that contains the name of the transition to invoke to close the specification.</summary>
    </member>
    <member name="P:DriveWorks.Connectors.Database.DatabaseConnectorConfiguration.TransitionName">
      <summary>Gets/sets the name of the transition to invoke if transition field could not be used.</summary>
    </member>
    <member name="P:DriveWorks.Connectors.Database.InputBinding.FieldName">
      <summary>Gets/sets the name of a field in table.</summary>
    </member>
    <member name="P:DriveWorks.Connectors.Database.InputBinding.InputName">
      <summary>Gets/sets the name of an input in a DriveWorks project.</summary>
    </member>
    <member name="M:DriveWorks.Connectors.Database.OdbcDataSourceConfiguration.#ctor(System.Xml.Linq.XElement)">
      <summary>Creates a new instance of the  class.</summary>
      <param name="data">The XML to use for this configuration.</param>
    </member>
    <member name="P:DriveWorks.Connectors.Database.OdbcDataSourceConfiguration.Data">
      <summary>Gets the backing data for the current configuration information.</summary>
    </member>
    <member name="P:DriveWorks.Connectors.Database.OdbcDataSourceConfiguration.DataSourceName">
      <summary>Get/sets the name of the data source to connect to.</summary>
    </member>
    <member name="P:DriveWorks.Connectors.Database.OdbcDataSourceConfiguration.Password">
      <summary>Gets/sets the password to use when accessing the data source.</summary>
    </member>
    <member name="P:DriveWorks.Connectors.Database.OdbcDataSourceConfiguration.Username">
      <summary>Gets/sets user name to use to access the data source.</summary>
    </member>
    <member name="M:DriveWorks.Connectors.Database.SqlDataSourceConfiguration.#ctor(System.Xml.Linq.XElement)">
      <summary>Creates a new instance of the  class.</summary>
      <param name="data">The XML to use for this configuration.</param>
    </member>
    <member name="P:DriveWorks.Connectors.Database.SqlDataSourceConfiguration.Data">
      <summary>Gets the backing data for this configuration.</summary>
    </member>
    <member name="P:DriveWorks.Connectors.Database.SqlDataSourceConfiguration.DatabaseName">
      <summary>Gets/sets the name of the database to connect to on the server.</summary>
    </member>
    <member name="P:DriveWorks.Connectors.Database.SqlDataSourceConfiguration.IsTrustedConnection">
      <summary>Gets/sets whether or not to use Windows authentication when connecting to the SQL server.</summary>
    </member>
    <member name="P:DriveWorks.Connectors.Database.SqlDataSourceConfiguration.Password">
      <summary>Gets/sets the password to use when connecting to the SQL server.</summary>
    </member>
    <member name="P:DriveWorks.Connectors.Database.SqlDataSourceConfiguration.ServerAddress">
      <summary>Gets/sets the address of the server to connect to.</summary>
    </member>
    <member name="P:DriveWorks.Connectors.Database.SqlDataSourceConfiguration.Username">
      <summary>Gets/sets the username to use when connecting to the SQL server.</summary>
    </member>
    <member name="T:DriveWorks.Connectors.Folder.FolderWatcherConfiguration">
      <summary>Provides editable properties for the folder watcher connector.</summary>
    </member>
    <member name="P:DriveWorks.Connectors.Folder.FolderWatcherConfiguration.FailedFolder">
      <summary>Gets/sets where files that are have been scanned and unsuccessfully used/rejected will be moved into.</summary>
    </member>
    <member name="P:DriveWorks.Connectors.Folder.FolderWatcherConfiguration.SourceFolder">
      <summary>Get/sets the folder that will be scanned.</summary>
    </member>
    <member name="P:DriveWorks.Connectors.Folder.FolderWatcherConfiguration.SuccessFolder">
      <summary>Gets/sets where files that are have been scanned and successfully used will be moved into.</summary>
    </member>
    <member name="P:DriveWorks.Connectors.Folder.FolderWatcherConfiguration.TimerInterval">
      <summary>Gets/sets the time in seconds for the period of time to wait between scans of the source folder.</summary>
    </member>
    <member name="T:DriveWorks.Connectors.Http.HttpConnectorConfiguration">
      <summary>Collection of settings for the HTTP connector.</summary>
    </member>
    <member name="P:DriveWorks.Connectors.Http.HttpConnectorConfiguration.ListenUri">
      <summary>The address to use for listening to specification requests.</summary>
    </member>
    <member name="T:DriveWorks.EventFlow.IFlowNode">
      <summary>Represents a common interface for all nodes in a flow.</summary>
    </member>
    <member name="T:DriveWorks.EventFlow.INodeEditor">
      <summary>Represents a visual editor for a .</summary>
    </member>
    <member name="T:DriveWorks.EventFlow.INodeEndpointCollection">
      <summary>Represents the owner of a  or <see cref="T:DriveWorks.EventFlow.NodeOutput" />.</summary>
    </member>
    <member name="M:DriveWorks.EventFlow.IFlowNode.NotifyRequirementsChanged">
      <summary>Called whenever the value of any mapped inputs or connections have changed And this node should reevaluate whether it can execute or not.</summary>
    </member>
    <member name="M:DriveWorks.EventFlow.IFlowNode.TryGetOutputEndpoint(System.String,System.Boolean,DriveWorks.EventFlow.NodeOutput@)">
      <summary>Attempts to retrieve the output end point with the given name.</summary>
      <returns>True if the end point was found, otherwise false.</returns>
      <param name="name">The name of the end point to find.</param>
      <param name="isNavigation">True if the requested end point is expected to be a navigation end point.</param>
      <param name="endpoint">The end point (if found), otherwise a null reference.</param>
    </member>
    <member name="P:DriveWorks.EventFlow.IFlowNode.Flow">
      <summary>Gets the flow this node is associated with.</summary>
    </member>
    <member name="P:DriveWorks.EventFlow.IFlowNode.Left">
      <summary>Gets the left position of this node in the visual editor.</summary>
    </member>
    <member name="P:DriveWorks.EventFlow.IFlowNode.Name">
      <summary>Gets the name of the node.</summary>
    </member>
    <member name="P:DriveWorks.EventFlow.IFlowNode.NavigationOutput">
      <summary>Gets the navigation output of this node.</summary>
    </member>
    <member name="P:DriveWorks.EventFlow.IFlowNode.Outputs">
      <summary>Gets a collection of all outputs of this node.</summary>
    </member>
    <member name="P:DriveWorks.EventFlow.IFlowNode.Top">
      <summary>Gets the top position of this node in the visual editor.</summary>
    </member>
    <member name="E:DriveWorks.EventFlow.IFlowNode.LeftChanged">
      <summary>Occurs when the value of the  property has changed.</summary>
    </member>
    <member name="E:DriveWorks.EventFlow.IFlowNode.TopChanged">
      <summary>Occurs when the value of the  property has changed.</summary>
    </member>
    <member name="M:DriveWorks.EventFlow.INodeEditor.EditNode(DriveWorks.EventFlow.ExecutableNodeBase)">
      <summary>Shows the editor for the given node.</summary>
      <returns>True if the node was modified.</returns>
      <param name="node">The node to edit.</param>
    </member>
    <member name="M:DriveWorks.EventFlow.INodeEndpointCollection.NotifyNameChanged(DriveWorks.EventFlow.ConnectionEndpoint,System.String)">
      <summary>Called by s and <see cref="T:DriveWorks.EventFlow.NodeOutput" />s to let the owner know its name has changed.</summary>
      <param name="endpoint">The end point whose name has changed.</param>
      <param name="oldName">The old name of the end point before the name was changed.</param>
    </member>
    <member name="T:DriveWorks.EventFlow.NodeExecutionState">
      <summary>Represents the state of a .</summary>
    </member>
    <member name="F:DriveWorks.EventFlow.NodeExecutionState.NotStarted">
      <summary>The  is ready to be executed.</summary>
    </member>
    <member name="F:DriveWorks.EventFlow.NodeExecutionState.Skipped">
      <summary>The 's inputs were never fulfilled and thus it was never executed.</summary>
    </member>
    <member name="F:DriveWorks.EventFlow.NodeExecutionState.InputsMissing">
      <summary>The  has inputs that need to be fulfilled before the <see cref="T:DriveWorks.EventFlow.ExecutableNodeBase" /> can execute.</summary>
    </member>
    <member name="F:DriveWorks.EventFlow.NodeExecutionState.Failed">
      <summary>The execution of the  failed.</summary>
    </member>
    <member name="F:DriveWorks.EventFlow.NodeExecutionState.Successful">
      <summary>The execution of the  was successful.</summary>
    </member>
    <member name="F:DriveWorks.EventFlow.NodeExecutionState.SuccessfulWithWarnings">
      <summary>The execution of the  was successful but there are some warnings.</summary>
    </member>
    <member name="T:DriveWorks.EventFlow.ConditionOutput">
      <summary>Represents the base class for all logical condition outputs within a .</summary>
    </member>
    <member name="T:DriveWorks.EventFlow.Connection">
      <summary>Represents a connection between one node's input and another node's output.</summary>
    </member>
    <member name="T:DriveWorks.EventFlow.ConnectionEndpoint">
      <summary>Represents the common base class for inputs and outputs.</summary>
    </member>
    <member name="T:DriveWorks.EventFlow.ConnectionEventArgs">
      <summary>Provides data for events relating to .</summary>
    </member>
    <member name="T:DriveWorks.EventFlow.ExecutableNodeBase">
      <summary>Represents a  that is executable.</summary>
    </member>
    <member name="T:DriveWorks.EventFlow.ExecutableNodeEventArgs">
      <summary>Represents event data for events involving  objects.</summary>
    </member>
    <member name="T:DriveWorks.EventFlow.FlowBase">
      <summary>Provides the base for all flows that allow nodes to be connected.</summary>
    </member>
    <member name="T:DriveWorks.EventFlow.FlowNodeCollection">
      <summary>Represents a collection of  objects.</summary>
    </member>
    <member name="T:DriveWorks.EventFlow.FlowPropertyEventArgs">
      <summary>Represents event data for events pertaining to  objects.</summary>
    </member>
    <member name="T:DriveWorks.EventFlow.InputConnectionEndpoint">
      <summary>Represents the common base class for all input connection endpoints on nodes.</summary>
    </member>
    <member name="T:DriveWorks.EventFlow.InvalidFlowException">
      <summary>The exception thrown when an invalid / corrupt  is encountered.</summary>
    </member>
    <member name="T:DriveWorks.EventFlow.MacroStartNode">
      <summary>Represents the very first task to execute in a .</summary>
    </member>
    <member name="T:DriveWorks.EventFlow.NodeNavigationInput">
      <summary>Represents a logical flow input endpoint for a .</summary>
    </member>
    <member name="T:DriveWorks.EventFlow.NodeNavigationOutput">
      <summary>Represents a logical endpoint on a  that allows logical connections to be made between the node this output belongs to and
the node a <see cref="T:DriveWorks.EventFlow.NodeNavigationInput" /> belongs to.</summary>
    </member>
    <member name="T:DriveWorks.EventFlow.NodeOutput">
      <summary>Represents a data output of a .</summary>
    </member>
    <member name="T:DriveWorks.EventFlow.NodeOutputCollection">
      <summary>Represents a collection of .</summary>
    </member>
    <member name="T:DriveWorks.EventFlow.NodeOutputEventArgs">
      <summary>Provides event data for events pertaining to  objects.</summary>
    </member>
    <member name="T:DriveWorks.EventFlow.StartNode">
      <summary>Represents the very first node in a  where execution will begin.</summary>
    </member>
    <member name="T:DriveWorks.EventFlow.SubFlowInputsNode">
      <summary>This node represents the inputs to a SubFlow.</summary>
    </member>
    <member name="T:DriveWorks.EventFlow.SubFlowOutputsNode">
      <summary>Represents the outputs of a .</summary>
    </member>
    <member name="M:DriveWorks.EventFlow.ConditionOutput.Unlock">
      <summary>Unlocks this condition path. Letting the  execution engine know that it should follow the connections made to this output.</summary>
    </member>
    <member name="P:DriveWorks.EventFlow.ConditionOutput.Unlocked">
      <summary>Gets whether this condition path has been unlocked.</summary>
    </member>
    <member name="P:DriveWorks.EventFlow.Connection.Element">
      <summary>The element used as the backing store for this connection.</summary>
    </member>
    <member name="P:DriveWorks.EventFlow.Connection.Input">
      <summary>The input the connection is made to.</summary>
    </member>
    <member name="P:DriveWorks.EventFlow.Connection.Output">
      <summary>The output the connection is made from.</summary>
    </member>
    <member name="P:DriveWorks.EventFlow.ConnectionEndpoint.Collection">
      <summary>Gets the collection this end point is a part of.</summary>
    </member>
    <member name="P:DriveWorks.EventFlow.ConnectionEndpoint.Description">
      <summary>The localized description of this end point.</summary>
    </member>
    <member name="P:DriveWorks.EventFlow.ConnectionEndpoint.DisplayName">
      <summary>Gets the user-friendly display name of this end point.</summary>
    </member>
    <member name="P:DriveWorks.EventFlow.ConnectionEndpoint.Name">
      <summary>The name of the end point.</summary>
    </member>
    <member name="P:DriveWorks.EventFlow.ConnectionEndpoint.Node">
      <summary>Gets the node this data end point belongs to.</summary>
    </member>
    <member name="P:DriveWorks.EventFlow.ConnectionEndpoint.ValueType">
      <summary>The underlying CLR type of the end point.</summary>
    </member>
    <member name="M:DriveWorks.EventFlow.ConnectionEventArgs.#ctor(DriveWorks.EventFlow.Connection)">
      <summary>Creates a new instance of the  class.</summary>
      <param name="connection">The  for the event.</param>
    </member>
    <member name="P:DriveWorks.EventFlow.ConnectionEventArgs.Connection">
      <summary>The  for the event.</summary>
    </member>
    <member name="M:DriveWorks.EventFlow.ExecutableNodeBase.GetEditor">
      <summary>Gets the editor for this node.</summary>
    </member>
    <member name="M:DriveWorks.EventFlow.ExecutableNodeBase.RaiseLeftChanged">
      <summary>Raises the  event.</summary>
    </member>
    <member name="M:DriveWorks.EventFlow.ExecutableNodeBase.RaiseNameChanged(System.String,System.String)">
      <summary>Raises the  event.</summary>
      <param name="oldName">The name before it was changed.</param>
      <param name="newName">The new name.</param>
    </member>
    <member name="M:DriveWorks.EventFlow.ExecutableNodeBase.RaiseTopChanged">
      <summary>Raises the  event.</summary>
    </member>
    <member name="M:DriveWorks.EventFlow.ExecutableNodeBase.TryGetInputEndpoint(System.String,System.Boolean,DriveWorks.EventFlow.InputConnectionEndpoint@)">
      <summary>Attempts to find an input with the given name.</summary>
      <returns>True if the end point was found, otherwise false.</returns>
      <param name="name">The name of the input to find.</param>
      <param name="isNavigation">True if the requested input is expected to be a navigation end point.</param>
      <param name="endpoint">The end point (if found), otherwise a null reference.</param>
    </member>
    <member name="M:DriveWorks.EventFlow.ExecutableNodeBase.TryGetOutputEndpoint(System.String,System.Boolean,DriveWorks.EventFlow.NodeOutput@)">
      <summary>Attempts to retrieve the output end point with the given name.</summary>
      <returns>True if the end point was found, otherwise false.</returns>
      <param name="name">The name of the end point to find.</param>
      <param name="isNavigation">True if the requested end point is expected to be a navigation end point.</param>
      <param name="output">The end point (if found), otherwise a null reference.</param>
    </member>
    <member name="M:DriveWorks.EventFlow.ExecutableNodeBase.SetState(DriveWorks.EventFlow.NodeExecutionState)">
      <summary>Sets the result of executing this node.</summary>
      <param name="state">The resultant state of executing this node.</param>
    </member>
    <member name="M:DriveWorks.EventFlow.ExecutableNodeBase.SetState(DriveWorks.EventFlow.NodeExecutionState,System.String)">
      <summary>Sets the result of executing this node.</summary>
      <param name="state">The resultant state of executing this node.</param>
      <param name="result">The result of this node.</param>
    </member>
    <member name="M:DriveWorks.EventFlow.ExecutableNodeBase.SetState(DriveWorks.EventFlow.NodeExecutionState,System.String,System.String)">
      <summary>Sets the result of executing this node.</summary>
      <param name="state">The resultant state of executing this node.</param>
      <param name="result">The result of this node.</param>
      <param name="details">A detailed message clarifying the result.</param>
    </member>
    <member name="P:DriveWorks.EventFlow.ExecutableNodeBase.ExecutionTime">
      <summary>Gets the amount of time it took for this node to execute.</summary>
      <returns>The time it took for this node to execute, or an empty TimeSpan if it hasn't executed.</returns>
    </member>
    <member name="P:DriveWorks.EventFlow.ExecutableNodeBase.Flow">
      <summary>Gets the flow this node is associated with.</summary>
    </member>
    <member name="P:DriveWorks.EventFlow.ExecutableNodeBase.Left">
      <summary>Gets the left position of this node.</summary>
    </member>
    <member name="P:DriveWorks.EventFlow.ExecutableNodeBase.NavigationInput">
      <summary>Gets the navigation input of this node.</summary>
    </member>
    <member name="P:DriveWorks.EventFlow.ExecutableNodeBase.NavigationOutput">
      <summary>Gets the navigation output of this node.</summary>
    </member>
    <member name="P:DriveWorks.EventFlow.ExecutableNodeBase.Outputs">
      <summary>Gets a collection of all outputs of this node.</summary>
    </member>
    <member name="P:DriveWorks.EventFlow.ExecutableNodeBase.Properties">
      <summary>Gets access to the property registration service.</summary>
    </member>
    <member name="P:DriveWorks.EventFlow.ExecutableNodeBase.Result">
      <summary>Gets the result of this node (if it has executed).</summary>
    </member>
    <member name="P:DriveWorks.EventFlow.ExecutableNodeBase.ResultDetails">
      <summary>Gets additional information about the result of this node (if it has executed).</summary>
    </member>
    <member name="P:DriveWorks.EventFlow.ExecutableNodeBase.State">
      <summary>Gets the execution state of this node.</summary>
    </member>
    <member name="P:DriveWorks.EventFlow.ExecutableNodeBase.Title">
      <summary>Gets/sets the human-readable title of the node.</summary>
    </member>
    <member name="P:DriveWorks.EventFlow.ExecutableNodeBase.Top">
      <summary>Gets the top position of this node.</summary>
    </member>
    <member name="F:DriveWorks.EventFlow.ExecutableNodeBase.MIN_LEFT">
      <summary>The minimum allowed value of the  property.</summary>
    </member>
    <member name="F:DriveWorks.EventFlow.ExecutableNodeBase.MIN_TOP">
      <summary>The minimum allowed value of the  property.</summary>
    </member>
    <member name="E:DriveWorks.EventFlow.ExecutableNodeBase.ExecutionTimeChanged">
      <summary>Occurs whenever the  property's value has changed.</summary>
    </member>
    <member name="E:DriveWorks.EventFlow.ExecutableNodeBase.InputsChanged">
      <summary>Occurs whenever a property has been added or removed from the  collection.</summary>
    </member>
    <member name="E:DriveWorks.EventFlow.ExecutableNodeBase.LeftChanged">
      <summary>Occurs whenever the  property's value has changed.</summary>
    </member>
    <member name="E:DriveWorks.EventFlow.ExecutableNodeBase.NameChanged">
      <summary>Occurs when the name of the node has changed.</summary>
    </member>
    <member name="E:DriveWorks.EventFlow.ExecutableNodeBase.StateChanged">
      <summary>Occurs whenever the  property's value has changed.</summary>
    </member>
    <member name="E:DriveWorks.EventFlow.ExecutableNodeBase.TopChanged">
      <summary>Occurs whenever the  property's value has changed.</summary>
    </member>
    <member name="P:DriveWorks.EventFlow.ExecutableNodeEventArgs.Node">
      <summary>The node that participated in the event.</summary>
    </member>
    <member name="P:DriveWorks.EventFlow.ExecutableNodeWithStatus.FailedOutput">
      <summary>Gets the end point that allows logical navigation connections to be made from this node when this node fails during execution.</summary>
    </member>
    <member name="P:DriveWorks.EventFlow.ExecutableNodeWithStatus.SuccessOutput">
      <summary>Gets the end point that allows logical navigation connections to be made from this node when this node successfully executes.</summary>
    </member>
    <member name="P:DriveWorks.EventFlow.ExecutableNodeWithStatus.WarningOutput">
      <summary>Gets the end point that allows logical navigation connections to be made from this node when this node produces a warning as it's state.</summary>
    </member>
    <member name="M:DriveWorks.EventFlow.FlowBase.TryGetNode(System.String,DriveWorks.EventFlow.IFlowNode@)">
      <summary>Attempt to retrieve a  from this flow.</summary>
      <returns>True if a node was found, otherwise False.</returns>
      <param name="name">The name of the  to retrieve.</param>
      <param name="node">The node if found, or a null reference (Nothing in Visual Basic) if a node with that name could not be found.</param>
    </member>
    <member name="P:DriveWorks.EventFlow.FlowBase.HasExecuted">
      <summary>Gets whether this flow has executed.</summary>
    </member>
    <member name="P:DriveWorks.EventFlow.FlowBase.Name">
      <summary>Gets the name of this flow.</summary>
    </member>
    <member name="P:DriveWorks.EventFlow.FlowBase.Nodes">
      <summary>Gets a collection of all nodes that have been added to this flow.</summary>
    </member>
    <member name="P:DriveWorks.EventFlow.FlowBase.StartNode">
      <summary>Gets the first node in this flow that serves as the start point to which all other s should be connected.</summary>
    </member>
    <member name="E:DriveWorks.EventFlow.FlowBase.Executed">
      <summary>Raised when this flow has been executed and can no longer be edited.</summary>
    </member>
    <member name="M:DriveWorks.EventFlow.FlowNodeCollection.GetEnumerator">
      <summary>Gets an enumerator suitable for enumerating the nodes in the collection.</summary>
      <returns>An IEnumerator specialized for the  type.</returns>
    </member>
    <member name="M:DriveWorks.EventFlow.FlowNodeCollection.IEnumerable_GetEnumerator">
      <summary>Gets an enumerator suitable for enumerating the nodes in the collection.</summary>
    </member>
    <member name="M:DriveWorks.EventFlow.FlowNodeCollection.IndexOf(DriveWorks.EventFlow.ExecutableNodeBase)">
      <summary>Gets the index of the given node.</summary>
      <returns>The index of the node, or -1 if the node is not in this collection.</returns>
      <param name="node">The node whose index to retrieve.</param>
    </member>
    <member name="M:DriveWorks.EventFlow.FlowNodeCollection.RaiseNodeCreated(DriveWorks.EventFlow.ExecutableNodeBase)">
      <summary>Raise the  event.</summary>
      <param name="node">The node that was created.</param>
    </member>
    <member name="M:DriveWorks.EventFlow.FlowNodeCollection.RaiseNodeDeleted(DriveWorks.EventFlow.ExecutableNodeBase)">
      <summary>Raise the  event.</summary>
      <param name="node">The node that was deleted.</param>
    </member>
    <member name="P:DriveWorks.EventFlow.FlowNodeCollection.Count">
      <summary>Gets the number of nodes in the collection.</summary>
    </member>
    <member name="P:DriveWorks.EventFlow.FlowNodeCollection.Item(System.Int32)">
      <summary>Gets the node at the specified index.</summary>
      <exception caption="" cref="T:System.IndexOutOfRangeException">Thrown if the specified index is out of range.</exception>
      <param name="index">The zero-based index of the node to retrieve.</param>
    </member>
    <member name="E:DriveWorks.EventFlow.FlowNodeCollection.NodeCreated">
      <summary>The event raised when a node has been added to the collection.</summary>
    </member>
    <member name="E:DriveWorks.EventFlow.FlowNodeCollection.NodeDeleted">
      <summary>The event raised when a node has been deleted from the collection.</summary>
    </member>
    <member name="P:DriveWorks.EventFlow.FlowPropertyEventArgs.PropertyName">
      <summary>The name of the property for this event.</summary>
    </member>
    <member name="M:DriveWorks.EventFlow.InputConnectionEndpoint.Connect(DriveWorks.EventFlow.NodeOutput)">
      <summary>Connects this input to the given output.</summary>
      <param name="output">The output to map this input value to.</param>
    </member>
    <member name="M:DriveWorks.EventFlow.InputConnectionEndpoint.RaiseConnectionAdded(DriveWorks.EventFlow.Connection)">
      <summary>Raises the  event.</summary>
      <param name="connection">The connection that was added.</param>
    </member>
    <member name="M:DriveWorks.EventFlow.InputConnectionEndpoint.RaiseConnectionRemoved(DriveWorks.EventFlow.Connection)">
      <summary>Raises the  event.</summary>
      <param name="connection">The connection that was removed.</param>
    </member>
    <member name="E:DriveWorks.EventFlow.InputConnectionEndpoint.ConnectionAdded">
      <summary>Occurs when a connection has been added to this input.</summary>
    </member>
    <member name="E:DriveWorks.EventFlow.InputConnectionEndpoint.ConnectionRemoved">
      <summary>Occurs when a connection has been removed from this input.</summary>
    </member>
    <member name="P:DriveWorks.EventFlow.MacroStartNode.ArgumentOutput">
      <summary>Gets the output that will contain the macro argument during execution.</summary>
    </member>
    <member name="P:DriveWorks.EventFlow.MacroStartNode.CallerOutput">
      <summary>Gets the output that will contain the macro caller during execution.</summary>
    </member>
    <member name="M:DriveWorks.EventFlow.NodeNavigationInput.Connect(DriveWorks.EventFlow.NodeOutput)">
      <summary>Create a connection between this input and the given , scheduling the <see cref="T:DriveWorks.EventFlow.IFlowNode" /> that owns this
input to be executed if the mapped output is fulfilled during execution.</summary>
      <exception caption="" cref="T:System.InvalidOperationException">%output% is not a %T:DriveWorks.EventFlow.ConditionOutput% or a %T:DriveWorks.EventFlow.NodeNavigationOutput%.</exception>
      <param name="output">The condition output to map this input to.</param>
    </member>
    <member name="M:DriveWorks.EventFlow.NodeNavigationInput.Disconnect(DriveWorks.EventFlow.Connection)">
      <summary>Removes the given connection from this input.</summary>
      <returns>True if the connection was removed, otherwise False.</returns>
      <param name="connection">The connection to remove.</param>
    </member>
    <member name="P:DriveWorks.EventFlow.NodeNavigationInput.Connections">
      <summary>Gets a collection of all connections that have been made to this input.</summary>
    </member>
    <member name="P:DriveWorks.EventFlow.NodeNavigationOutput.IsStatus">
      <summary>Gets whether this output represents a conditional output that depends on the state of it's owning node.</summary>
    </member>
    <member name="M:DriveWorks.EventFlow.NodeOutput.Fulfill(System.Object)">
      <summary>Assign a static value to this input.</summary>
      <param name="value">The value to assign to this output.</param>
    </member>
    <member name="M:DriveWorks.EventFlow.NodeOutput.GetConnections">
      <summary>Gets all connections that has been made to this output.</summary>
    </member>
    <member name="P:DriveWorks.EventFlow.NodeOutput.IsFulfilled">
      <summary>Gets whether this output has been given a value.</summary>
    </member>
    <member name="P:DriveWorks.EventFlow.NodeOutput.Value">
      <summary>Gets the value of this output.</summary>
    </member>
    <member name="E:DriveWorks.EventFlow.NodeOutput.ConnectionAdded">
      <summary>Raised whenever a connection has been made to this output.</summary>
    </member>
    <member name="E:DriveWorks.EventFlow.NodeOutput.ConnectionRemoved">
      <summary>Raised whenever a connection has been removed from this output.</summary>
    </member>
    <member name="E:DriveWorks.EventFlow.NodeOutput.ValueChanged">
      <summary>Raised whenever the value of this output has been set.</summary>
    </member>
    <member name="M:DriveWorks.EventFlow.NodeOutputCollection.Delete(System.String)">
      <summary>Removes an output from the collection.</summary>
      <returns>True if the output was removed, otherwise False.</returns>
      <param name="name">The name of the output to remove.</param>
    </member>
    <member name="M:DriveWorks.EventFlow.NodeOutputCollection.CreateCondition(System.String,System.String)">
      <summary>Adds a condition output to the collection.</summary>
      <returns>The newly created condition output.</returns>
      <param name="name">The user-friendly name of the condition.</param>
      <param name="description">The user-friendly description of the condition.</param>
    </member>
    <member name="M:DriveWorks.EventFlow.NodeOutputCollection.CreateCondition(System.String,System.String,System.String)">
      <summary>Adds a condition output to the collection.</summary>
      <returns>The newly created condition output.</returns>
      <param name="name">The user-friendly name of the condition.</param>
      <param name="description">The user-friendly description of the condition.</param>
      <param name="displayName">the user-friendly name of the condition.</param>
    </member>
    <member name="M:DriveWorks.EventFlow.NodeOutputCollection.Register(System.String,System.String,System.Type)">
      <summary>Adds a new output to the collection.</summary>
      <returns>The newly created output.</returns>
      <param name="name">The name of the output to create.</param>
      <param name="description">The user-friendly description of the output.</param>
      <param name="valueType">The type of the value this output stores.</param>
    </member>
    <member name="M:DriveWorks.EventFlow.NodeOutputCollection.Register(System.String,System.String,System.Type,System.String)">
      <summary>Adds a new output to the collection.</summary>
      <returns>The newly created output.</returns>
      <param name="name">The name of the output to create.</param>
      <param name="description">The user-friendly description of the output.</param>
      <param name="valueType">The type of the value this output stores.</param>
      <param name="displayName">The user-friendly name of the output.</param>
    </member>
    <member name="P:DriveWorks.EventFlow.NodeOutputEventArgs.OutputName">
      <summary>The name of the  for the event.</summary>
    </member>
    <member name="M:DriveWorks.EventFlow.StartNode.NotifyRequirementsChanged">
      <summary>Called whenever the value of any mapped inputs or connections have changed and this node should re-evaluate whether it can execute or not.</summary>
    </member>
    <member name="M:DriveWorks.EventFlow.StartNode.TryGetOutputEndpoint(System.String,System.Boolean,DriveWorks.EventFlow.NodeOutput@)">
      <summary>Attempts to retrieve the end point with the given name.</summary>
      <returns>True if the end point was found, otherwise false.</returns>
      <param name="name">The name of the end point to find.</param>
      <param name="isNavigation">True if the requested end point is a navigation end point.</param>
      <param name="output">The end point (if found), otherwise a null reference.</param>
    </member>
    <member name="P:DriveWorks.EventFlow.StartNode.Flow">
      <summary>Gets the  that owns this node.</summary>
    </member>
    <member name="P:DriveWorks.EventFlow.StartNode.Left">
      <summary>Gets the left position of this node.</summary>
    </member>
    <member name="P:DriveWorks.EventFlow.StartNode.Name">
      <summary>Gets the name of the start node.</summary>
    </member>
    <member name="P:DriveWorks.EventFlow.StartNode.NavigationOutput">
      <summary>Gets the logical navigation end point of this node.</summary>
    </member>
    <member name="P:DriveWorks.EventFlow.StartNode.Outputs">
      <summary>Gets a collection of all outputs of this node.</summary>
    </member>
    <member name="P:DriveWorks.EventFlow.StartNode.Top">
      <summary>Gets the top position of this start node.</summary>
    </member>
    <member name="E:DriveWorks.EventFlow.StartNode.LeftChanged">
      <summary>Occurs whenever the  property's value has changed.</summary>
    </member>
    <member name="E:DriveWorks.EventFlow.StartNode.TopChanged">
      <summary>Occurs whenever the  property's value has changed.</summary>
    </member>
    <member name="T:DriveWorks.Extensibility.IExtension">
      <summary>Provides a marker interface which must be implemented by all types which are obtainable from an extension library.</summary>
    </member>
    <member name="T:DriveWorks.Extensibility.ComponentTaskConditionNotFoundException">
      <summary>Raised when an attempt is made to open a project that contains references to a  or
<see cref="T:DriveWorks.Components.Tasks.IComponentTaskCondition" /> that are defined in an assembly that is not available.</summary>
    </member>
    <member name="T:DriveWorks.Extensibility.ComponentTaskNotFoundException">
      <summary>Raised when an attempt is made to open a project that contains references to s that are defined in an assembly
that is not available.</summary>
    </member>
    <member name="T:DriveWorks.Extensibility.ExtensibilityAttribute">
      <summary>Provides a base class for all attributes applied to a extension library.</summary>
    </member>
    <member name="T:DriveWorks.Extensibility.FrameworkLibraryAttribute">
      <summary>For internal use only. Marks an assembly as being part of the DriveWorks core framework.</summary>
    </member>
    <member name="T:DriveWorks.Extensibility.InvalidPluginAssemblyException">
      <summary>Raised when an attempt is made to perform an operation which can only be performed on a extension library.</summary>
    </member>
    <member name="T:DriveWorks.Extensibility.LibraryAttribute">
      <summary>Marks an assembly as being a DriveWorks extension library.</summary>
    </member>
    <member name="T:DriveWorks.Extensibility.MacroAttribute">
      <summary>Designates a method on a  as a macro.</summary>
    </member>
    <member name="T:DriveWorks.Extensibility.ProjectExtender">
      <summary>Provides support for extending a project.</summary>
    </member>
    <member name="T:DriveWorks.Extensibility.SharedProjectExtender">
      <summary>Provides support for extending all DriveWorks projects with additional functions.</summary>
    </member>
    <member name="T:DriveWorks.Extensibility.UdfAttribute">
      <summary>Designates a method on a  or a <see cref="T:DriveWorks.Extensibility.SharedProjectExtender" /> as a user defined function to be
available in a design master.</summary>
    </member>
    <member name="P:DriveWorks.Extensibility.ComponentTaskConditionNotFoundException.ConditionType">
      <summary>Gets the full type name of the condition that is missing.</summary>
    </member>
    <member name="P:DriveWorks.Extensibility.ComponentTaskNotFoundException.TaskType">
      <summary>Gets the full type name of the task that is missing.</summary>
    </member>
    <member name="M:DriveWorks.Extensibility.FrameworkLibraryAttribute.IsFrameworkLibrary(System.Reflection.Assembly)">
      <summary>Tests the specified assembly to see whether it is a framework library.</summary>
      <returns>True if the specified assembly is marked with the  and is signed with the DriveWorks strong name key.</returns>
      <param name="assembly">The assembly to test.</param>
    </member>
    <member name="M:DriveWorks.Extensibility.InvalidPluginAssemblyException.#ctor(System.String)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="message">The message which describes the exception.</param>
    </member>
    <member name="M:DriveWorks.Extensibility.InvalidPluginAssemblyException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="message">The message which describes the exception.</param>
      <param name="inner">The inner exception.</param>
    </member>
    <member name="M:DriveWorks.Extensibility.InvalidPluginAssemblyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the  class with serialized data.</summary>
      <param name="info">The  that holds the serialized object data about the exception being thrown</param>
      <param name="context">The  that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:DriveWorks.Extensibility.LibraryAttribute.#ctor">
      <summary>Initializes a new instance of the  type using the assembly name as the invariant name.</summary>
    </member>
    <member name="M:DriveWorks.Extensibility.LibraryAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="invariantName">The invariant name of the extension library.</param>
    </member>
    <member name="M:DriveWorks.Extensibility.LibraryAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="invariantName">The invariant name of the extension library.</param>
      <param name="displayName">Specifies the display name of the extension library.</param>
    </member>
    <member name="M:DriveWorks.Extensibility.LibraryAttribute.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="invariantName">The invariant name of the extension library.</param>
      <param name="displayName">Specifies the display name of the extension library.</param>
      <param name="description">Specifies a brief description of the extension library.</param>
    </member>
    <member name="M:DriveWorks.Extensibility.LibraryAttribute.#ctor(System.String,System.String,System.String,System.String)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="invariantName">The invariant name of the extension library.</param>
      <param name="displayName">Specifies the display name of the extension library.</param>
      <param name="description">Specifies a brief description of the extension library.</param>
      <param name="publisherUrl">Specifies a URL which points to a web site for the extension library or publisher.</param>
    </member>
    <member name="M:DriveWorks.Extensibility.LibraryAttribute.AreReferencesEqual(System.String,System.String)">
      <summary>Compares two qualified references for equality.</summary>
      <returns>True if the references are equivalent, otherwise false.</returns>
      <param name="reference1">The first reference to compare.</param>
      <param name="reference2">The second reference to compare.</param>
    </member>
    <member name="M:DriveWorks.Extensibility.LibraryAttribute.GetInvariantName(System.Reflection.Assembly)">
      <summary>Gets the invariant name from an extension library.</summary>
      <param name="assembly">The assembly for which to get the extension library name.</param>
    </member>
    <member name="M:DriveWorks.Extensibility.LibraryAttribute.TryParseQualifiedReference(System.String,System.String@,System.String@,System.String@)">
      <summary>Attempts to parse a qualified reference.</summary>
      <returns>True if the parse was successful, otherwise false.</returns>
      <param name="reference">The reference to parse.</param>
      <param name="namespaceName">The namespace of the referenced type, or an empty string if no namespace is present.</param>
      <param name="typeName">The unqualified name of the referenced type.</param>
      <param name="libraryName">The name of the library containing the referenced type.</param>
    </member>
    <member name="M:DriveWorks.Extensibility.LibraryAttribute.GetAttribute(System.Reflection.Assembly)">
      <summary>Gets the  from the specified assembly.</summary>
      <returns>An instance of the library attribute if it is applied to the specified assembly, otherwise a null reference (Nothing in Visual Basic).</returns>
      <param name="assembly">The assembly from which to retrieve the attribute.</param>
    </member>
    <member name="M:DriveWorks.Extensibility.LibraryAttribute.GetAttribute(System.Reflection.Assembly,System.Boolean)">
      <summary>Gets the  from the specified assembly.</summary>
      <returns>An instance of the library attribute if it is applied to the specified assembly, otherwise a null reference (Nothing in Visual Basic).</returns>
      <param name="assembly">The assembly from which to retrieve the attribute.</param>
      <param name="createIfNotDefined">Determines whether an attribute is synthesized for assemblies which do not define one.</param>
    </member>
    <member name="M:DriveWorks.Extensibility.LibraryAttribute.GetQualifiedReference(System.Object)">
      <summary>Gets a qualified reference for the specified object's type.</summary>
      <returns>A qualified reference for the object's type.</returns>
      <param name="instance">An object whose type is defined in an extension library.</param>
    </member>
    <member name="M:DriveWorks.Extensibility.LibraryAttribute.GetQualifiedReference(System.Type)">
      <summary>Gets a qualified reference for the specified type.</summary>
      <returns>A qualified reference for the type.</returns>
      <param name="type">A type defined in an extension library.</param>
    </member>
    <member name="P:DriveWorks.Extensibility.LibraryAttribute.Description">
      <summary>Gets a description of the library.</summary>
    </member>
    <member name="P:DriveWorks.Extensibility.LibraryAttribute.DisplayName">
      <summary>Gets the display name of the library.</summary>
    </member>
    <member name="P:DriveWorks.Extensibility.LibraryAttribute.PublisherUrl">
      <summary>Gets a URL pointing to a web site for the library or publisher.</summary>
    </member>
    <member name="M:DriveWorks.Extensibility.ProjectExtender.OnInitialize">
      <summary>Called by DriveWorks when the Project Extender has been initialized.</summary>
    </member>
    <member name="M:DriveWorks.Extensibility.ProjectExtender.OnMacroDialogClick(System.String)">
      <summary>Called by DriveWorks when the DriveWorks_OnDialogClick macro is executed.</summary>
    </member>
    <member name="M:DriveWorks.Extensibility.ProjectExtender.OnMacroDialogClicked(System.String)">
      <summary>Called by DriveWorks when the DriveWorks_OnDialogClicked macro is executed.</summary>
    </member>
    <member name="M:DriveWorks.Extensibility.ProjectExtender.OnMacroPostConstantDrive">
      <summary>Called by DriveWorks when the DriveWorks_OnPostConstantDrive macro is executed.</summary>
    </member>
    <member name="M:DriveWorks.Extensibility.ProjectExtender.OnMacroPostFinish">
      <summary>Called by DriveWorks when the DriveWorks_OnPostFinish macro is executed.</summary>
    </member>
    <member name="M:DriveWorks.Extensibility.ProjectExtender.OnMacroPreFinish">
      <summary>Called by DriveWorks when the DriveWorks_OnPreFinish macro is executed.</summary>
    </member>
    <member name="M:DriveWorks.Extensibility.ProjectExtender.OnMacroRelease">
      <summary>Called by DriveWorks when the DriveWorks_OnReleaseFinish macro is executed.</summary>
    </member>
    <member name="M:DriveWorks.Extensibility.ProjectExtender.OnMacroSpecificationCancelled">
      <summary>Called by DriveWorks when the DriveWorks_OnCancelSpecification macro is executed.</summary>
    </member>
    <member name="M:DriveWorks.Extensibility.ProjectExtender.OnMacroSpecificationStarted(DriveWorks.Specification.SpecificationType)">
      <summary>Called by DriveWorks when one of the DriveWorks_OnNew, DriveWorks_OnEdit, or DriveWorks_OnCopy macros is executed.</summary>
    </member>
    <member name="P:DriveWorks.Extensibility.ProjectExtender.Project">
      <summary>Gets the Project which owns the extender.</summary>
    </member>
    <member name="M:DriveWorks.Extensibility.SharedProjectExtender.OnInitialize">
      <summary>Called by DriveWorks when the shared project extender has been initialized.</summary>
    </member>
    <member name="P:DriveWorks.Extensibility.SharedProjectExtender.Project">
      <summary>Gets the Project which owns the extender.</summary>
    </member>
    <member name="M:DriveWorks.Extensibility.UdfAttribute.#ctor">
      <summary>Creates a new instance of the  class.</summary>
    </member>
    <member name="M:DriveWorks.Extensibility.UdfAttribute.#ctor(System.Boolean)">
      <summary>Creates a new instance of the .</summary>
      <param name="allowRunDuringLoad">Whether the UDF should be ran before we've started initializing the design master, which will load project elements such as form controls, variables, etc (see
Remarks).</param>
    </member>
    <member name="P:DriveWorks.Extensibility.UdfAttribute.AllowRunDuringLoad">
      <summary>Gets whether the UDF should be available before we start loading the project data, such as form controls, variables, etc.</summary>
    </member>
    <member name="T:DriveWorks.Forms.ICanConvert">
      <summary>Implemented by controls which can be converted to a different control type.</summary>
    </member>
    <member name="T:DriveWorks.Forms.IPreviewHost">
      <summary>Provides a contract to a host responsible for translating an . See remarks for details.</summary>
    </member>
    <member name="T:DriveWorks.Forms.IPreviewProviderService">
      <summary>Interface for classes that work with 3D previews.</summary>
    </member>
    <member name="T:DriveWorks.Forms.IPreviewResourceHandler">
      <summary>Handles resource fetching and caching for a particular preview result.</summary>
    </member>
    <member name="T:DriveWorks.Forms.IPreviewService">
      <summary>Represents a service responsible for serving 3D Previews.</summary>
    </member>
    <member name="T:DriveWorks.Forms.IPreviewTranslator">
      <summary>Provides a contract to an  translator.</summary>
    </member>
    <member name="M:DriveWorks.Forms.ICanConvert.GetConversionData(System.Type)">
      <summary>Returns a  that when added to a <see cref="T:DriveWorks.Forms.ContainerControlBase" /> will create a new control of
the given type.</summary>
      <param name="newType">The type of control to convert this control to.</param>
    </member>
    <member name="M:DriveWorks.Forms.ICanConvert.GetConvertTypes">
      <summary>Returns an array of types that this control can be converted to.</summary>
    </member>
    <member name="M:DriveWorks.Forms.IPreviewHost.TranslatePreview(DriveWorks.Forms.EffectivePreviewResult)">
      <summary>Attempts to translate the given .</summary>
      <returns>A translated version of the given  if translation was successful; otherwise returns a null reference (or Nothing in
Visual Basic).</returns>
      <param name="originalResult">Original  to translate.</param>
    </member>
    <member name="M:DriveWorks.Forms.IPreviewProviderService.ApplyUpdate(System.Object,System.String)">
      <summary>Applies changes from the update string to the given preview.</summary>
      <param name="preview">The 3D Preview scene.</param>
      <param name="jsonUpdate">The changes to apply to it.</param>
    </member>
    <member name="M:DriveWorks.Forms.IPreviewProviderService.ConvertNodeHierarchyToJsonString(System.Object)">
      <summary>Converts a preview object to a string version containing just the node hierarchy</summary>
      <param name="preview">The Object to stringify.</param>
    </member>
    <member name="M:DriveWorks.Forms.IPreviewProviderService.ConvertPreviewToJson(System.Object)">
      <summary>Converts a preview object to a serialized version that be used for network transmission.</summary>
      <param name="preview">The Object to serialize.</param>
    </member>
    <member name="M:DriveWorks.Forms.IPreviewProviderService.GenerateImageStream(System.Object,DriveWorks.Support.RotationZoom,System.Int32,System.Int32,System.String,System.Boolean)">
      <summary>Generates a screenshot image and return it as a stream in png format</summary>
      <param name="preview">Preview Result to render image from.</param>
      <param name="rotationZoom">Camera rotation to take the screenshot from.</param>
      <param name="width">Pixel width of the output image.</param>
      <param name="height">Pixel height of the output image.</param>
      <param name="useAutoCenter">Whether we are panning from the bounds center or from the origin.</param>
    </member>
    <member name="M:DriveWorks.Forms.IPreviewProviderService.GenerateScreenshot(System.Object,System.String,DriveWorks.Support.RotationZoom,System.Int32,System.Int32,System.String,System.Boolean)">
      <summary>Generates a screenshot image at the given path.</summary>
      <param name="preview">Preview Result to render image from.</param>
      <param name="outputPath">Path to save the image to.</param>
      <param name="rotationZoom">Camera rotation to take the screenshot from.</param>
      <param name="width">Pixel width of the output image.</param>
      <param name="height">Pixel height of the output image.</param>
      <param name="useAutoCenter">Whether we are panning from the bounds center or from the origin.</param>
    </member>
    <member name="M:DriveWorks.Forms.IPreviewProviderService.GetPreviewResourceHandler(System.Object)">
      <summary>Gets a resource handler for the specified preview.</summary>
      <param name="preview">The preview to get resources from.</param>
    </member>
    <member name="M:DriveWorks.Forms.IPreviewProviderService.LoadPreview(System.String,System.String)">
      <summary>Creates a 3D preview object that can be used in 3D preview based classes.</summary>
      <returns>The loaded and ready to use preview based on the file. This should always be disposed when no longer needed.</returns>
      <param name="filepath">The full file path to a Drive3D file.</param>
      <param name="lightPreset">Lighting preset to apply to the loaded preview.</param>
    </member>
    <member name="M:DriveWorks.Forms.IPreviewResourceHandler.EagerLoadResources">
      <summary>Begins loading resources from the preview so that GetPreviewResource returns results quicker.</summary>
    </member>
    <member name="M:DriveWorks.Forms.IPreviewResourceHandler.GetPreviewResource(System.String)">
      <summary>Attempts to get a resource from the preview object. This is typically for fetching model data in a JSON format or an image binary.</summary>
      <returns>A stream to the resource or null if nothing was found.</returns>
      <param name="key">The name of the resource to fetch.</param>
    </member>
    <member name="M:DriveWorks.Forms.IPreviewResourceHandler.InvalidateResource(System.String)">
      <summary>Invalidates the resource in the event it is changed.</summary>
      <param name="resourceName">The name of the scene resource.</param>
    </member>
    <member name="M:DriveWorks.Forms.IPreviewService.Preview(DriveWorks.Forms.PreviewRequest)">
      <summary>Generates a preview of the specified release data.</summary>
      <returns>Information about the files belonging to the preview, or a null reference if the release data doesn't contain a root model.</returns>
      <param name="requestData">The request data for the 3D Preview.</param>
    </member>
    <member name="M:DriveWorks.Forms.IPreviewTranslator.TranslatePreview(System.String,DriveWorks.Forms.EffectivePreviewResult)">
      <summary>Attempts to translate the given . See remarks for details.</summary>
      <returns>A version of the given  translated to the desired type if successful; otherwise returns a null reference (Nothing in
Visual Basic).</returns>
      <param name="desiredExtension">Extension of the file type the  should be translated to.</param>
      <param name="originalResult">Original  that is to be translated.</param>
    </member>
    <member name="T:DriveWorks.Forms.CheckAlignment">
      <summary>Controls the alignment of the check region in check box.</summary>
    </member>
    <member name="F:DriveWorks.Forms.CheckAlignment.Left">
      <summary>The check is aligned to the left of the text.</summary>
    </member>
    <member name="F:DriveWorks.Forms.CheckAlignment.Right">
      <summary>The check is aligned to the right of the text.</summary>
    </member>
    <member name="T:DriveWorks.Forms.ChildSpecificationBehavior">
      <summary>Provides options which govern the behavior of a child specification list control.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ChildSpecificationBehavior.MultipleChildren">
      <summary>The child specification list allows the addition of any number of children.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ChildSpecificationBehavior.SingleChild">
      <summary>The child specification list allows only one child to be added.</summary>
    </member>
    <member name="T:DriveWorks.Forms.ControlOrientation">
      <summary>Provides options for specifying control render orientation.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ControlOrientation.Horizontal">
      <summary>Specifies that the control should be rendered in a horizontal orientation.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ControlOrientation.Vertical">
      <summary>Specifies that the control should be rendered in a vertical orientation.</summary>
    </member>
    <member name="T:DriveWorks.Forms.DuplicateFileHandlingBehavior">
      <summary>Provides options for how to handle duplicate file situations.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DuplicateFileHandlingBehavior.Overwrite">
      <summary>File should be overwritten.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DuplicateFileHandlingBehavior.AppendNumber">
      <summary>New file should have a unique number appended to its name.</summary>
    </member>
    <member name="T:DriveWorks.Forms.ExtendedPictureStyle">
      <summary>How an picture will be displayed on a button or control.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ExtendedPictureStyle.Text">
      <summary>Picture will not be displayed.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ExtendedPictureStyle.TextAndPicture">
      <summary>Text will be displayed with picture.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ExtendedPictureStyle.Picture">
      <summary>Picture will be the only content on the control.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ExtendedPictureStyle.PictureOnly">
      <summary>Picture will fully replace everything on control.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ExtendedPictureStyle.TextOverPicture">
      <summary>Text will be displayed over the picture.</summary>
    </member>
    <member name="T:DriveWorks.Forms.HyperlinkBehavior">
      <summary>Provides options which govern the behavior of an Hyperlink control.</summary>
    </member>
    <member name="F:DriveWorks.Forms.HyperlinkBehavior.CurrentWindow">
      <summary>The Hyperlink, when clicked will open the link in the current window.</summary>
    </member>
    <member name="F:DriveWorks.Forms.HyperlinkBehavior.NewWindow">
      <summary>The Hyperlink, when clicked will open the link in a new window/tab.</summary>
    </member>
    <member name="T:DriveWorks.Forms.InputValueType">
      <summary>Specifies the type of the input value.</summary>
    </member>
    <member name="F:DriveWorks.Forms.InputValueType.User">
      <summary>Specifies that the input value should be treated as if the user has typed it.</summary>
    </member>
    <member name="F:DriveWorks.Forms.InputValueType.Processed">
      <summary>Specifies that the input value should be treated as if the control has already formatted it.</summary>
    </member>
    <member name="T:DriveWorks.Forms.OptionGroupItemAlignment">
      <summary>Specifies the alignment of items in an option group.</summary>
    </member>
    <member name="F:DriveWorks.Forms.OptionGroupItemAlignment.Left">
      <summary>Options are left aligned.</summary>
    </member>
    <member name="F:DriveWorks.Forms.OptionGroupItemAlignment.Right">
      <summary>Options are right aligned.</summary>
    </member>
    <member name="T:DriveWorks.Forms.PictureSizeMode">
      <summary>Specifies the behaviour used to size a picture in a picture box.</summary>
    </member>
    <member name="F:DriveWorks.Forms.PictureSizeMode.Normal">
      <summary>Use the pictures native size</summary>
    </member>
    <member name="F:DriveWorks.Forms.PictureSizeMode.StretchImage">
      <summary>Size the picture to fit the picture box and ignore the aspect ratio of the picture.</summary>
    </member>
    <member name="F:DriveWorks.Forms.PictureSizeMode.Zoom">
      <summary>Size the picture to fit the picture box but preserve the aspect ratio of the picture.</summary>
    </member>
    <member name="F:DriveWorks.Forms.PictureSizeMode.Center">
      <summary>Center the picture</summary>
    </member>
    <member name="T:DriveWorks.Forms.PictureStyle">
      <summary>How an picture will be displayed on a button or control.</summary>
    </member>
    <member name="F:DriveWorks.Forms.PictureStyle.Text">
      <summary>Picture will not be displayed.</summary>
    </member>
    <member name="F:DriveWorks.Forms.PictureStyle.TextAndPicture">
      <summary>Text will be displayed with picture.</summary>
    </member>
    <member name="F:DriveWorks.Forms.PictureStyle.Picture">
      <summary>Picture will be the only content on the control.</summary>
    </member>
    <member name="T:DriveWorks.Forms.PreviewGenerationMethod">
      <summary>Defines the different options for generating models during a 3d preview.</summary>
    </member>
    <member name="F:DriveWorks.Forms.PreviewGenerationMethod.OnDemand">
      <summary>The preview will be generated using On Demand generation.</summary>
    </member>
    <member name="F:DriveWorks.Forms.PreviewGenerationMethod.Queued">
      <summary>The preview will be generated using Queued generation.</summary>
    </member>
    <member name="T:DriveWorks.Forms.ScrollBarVisibility">
      <summary>The visibility style of a scroll bar.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ScrollBarVisibility.Auto">
      <summary>The scroll bar will shown when needed, but is otherwise hidden.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ScrollBarVisibility.Visible">
      <summary>The scroll bar is visible at all times, but is disabled when not needed.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ScrollBarVisibility.Hidden">
      <summary>The scroll bar is always hidden and scrolling is disabled.</summary>
    </member>
    <member name="T:DriveWorks.Forms.SelectedItemRemovedBehavior">
      <summary>Controls the behavior of a selection control when the selected item is removed.</summary>
    </member>
    <member name="F:DriveWorks.Forms.SelectedItemRemovedBehavior.SelectNone">
      <summary>Clears the selection.</summary>
    </member>
    <member name="F:DriveWorks.Forms.SelectedItemRemovedBehavior.SelectFirst">
      <summary>Selects the first item in the control.</summary>
    </member>
    <member name="T:DriveWorks.Forms.SerializationMode">
      <summary>Controls the serialization of a control.</summary>
    </member>
    <member name="F:DriveWorks.Forms.SerializationMode.Display">
      <summary>Serializes the information required to display the control to and end-user.</summary>
    </member>
    <member name="F:DriveWorks.Forms.SerializationMode.Save">
      <summary>Serializes the information required to save the control to a file as part of the project, and reload it when the project is loaded.</summary>
    </member>
    <member name="F:DriveWorks.Forms.SerializationMode.Copy">
      <summary>Serializes the information required to duplicate the control.</summary>
    </member>
    <member name="F:DriveWorks.Forms.SerializationMode.Backup">
      <summary>Serializes the information required to backup the control.</summary>
    </member>
    <member name="T:DriveWorks.Forms.StoreValueType">
      <summary>Describes the type used to represent a value in the property store.</summary>
    </member>
    <member name="F:DriveWorks.Forms.StoreValueType.Unknown">
      <summary>The value is of an unknown type.</summary>
    </member>
    <member name="F:DriveWorks.Forms.StoreValueType.EmptyValue">
      <summary>The value is empty.</summary>
    </member>
    <member name="F:DriveWorks.Forms.StoreValueType.TableValue">
      <summary>The value is a table of values.</summary>
    </member>
    <member name="F:DriveWorks.Forms.StoreValueType.StringValue">
      <summary>The value is a string.</summary>
    </member>
    <member name="F:DriveWorks.Forms.StoreValueType.DoubleValue">
      <summary>The value is a double.</summary>
    </member>
    <member name="F:DriveWorks.Forms.StoreValueType.DateTimeValue">
      <summary>The value is a date and time.</summary>
    </member>
    <member name="F:DriveWorks.Forms.StoreValueType.BooleanValue">
      <summary>The value is a boolean.</summary>
    </member>
    <member name="T:DriveWorks.Forms.TextAlignment">
      <summary>Controls the alignment of a piece of text.</summary>
    </member>
    <member name="F:DriveWorks.Forms.TextAlignment.Left">
      <summary>The text is aligned to the left.</summary>
    </member>
    <member name="F:DriveWorks.Forms.TextAlignment.Right">
      <summary>The text is aligned to the right.</summary>
    </member>
    <member name="F:DriveWorks.Forms.TextAlignment.Center">
      <summary>The text is centrally aligned.</summary>
    </member>
    <member name="T:DriveWorks.Forms.VerticalTextAlignment">
      <summary>Controls the vertical alignment of a piece of text.</summary>
    </member>
    <member name="F:DriveWorks.Forms.VerticalTextAlignment.Top">
      <summary>The text is aligned to the top.</summary>
    </member>
    <member name="F:DriveWorks.Forms.VerticalTextAlignment.Bottom">
      <summary>The text is aligned to the bottom.</summary>
    </member>
    <member name="F:DriveWorks.Forms.VerticalTextAlignment.Center">
      <summary>The text is centrally aligned.</summary>
    </member>
    <member name="T:DriveWorks.Forms.ButtonBase">
      <summary>Provides a base for button controls in DriveWorks.</summary>
    </member>
    <member name="T:DriveWorks.Forms.CaptionControlBase">
      <summary>Provides a base class for controls which have a caption.</summary>
    </member>
    <member name="T:DriveWorks.Forms.CheckBox">
      <summary>Implements a check box.</summary>
    </member>
    <member name="T:DriveWorks.Forms.ChildSpecificationList">
      <summary>Implements a child specification list control (known as the subproject control in DriveWorks 6).</summary>
    </member>
    <member name="T:DriveWorks.Forms.ChildSpecificationRequestEventArgs">
      <summary>Provides data for opening up a child specification form.</summary>
    </member>
    <member name="T:DriveWorks.Forms.ComboBox">
      <summary>Implements a combo box.</summary>
    </member>
    <member name="T:DriveWorks.Forms.ContainerControlBase">
      <summary>The base class for controls which contain other controls.</summary>
    </member>
    <member name="T:DriveWorks.Forms.ControlBase">
      <summary>The base class for all controls.</summary>
    </member>
    <member name="T:DriveWorks.Forms.ControlCollection">
      <summary>Implements a collection of controls managed by an instance of a type derived from the  class.</summary>
    </member>
    <member name="T:DriveWorks.Forms.ControlDynamicPropertyRule">
      <summary>Provides a wrapper around the rule of a control's dynamic property.</summary>
    </member>
    <member name="T:DriveWorks.Forms.ControlEventArgs">
      <summary>Provides the event data for events which involves a control.</summary>
    </member>
    <member name="T:DriveWorks.Forms.ControlsEventArgs">
      <summary>Provides the event data for events which involve one or more controls.</summary>
    </member>
    <member name="T:DriveWorks.Forms.CreatingControlEventArgs">
      <summary>Provides the event data for control creation events, allows for control creation to be cancelled.</summary>
    </member>
    <member name="T:DriveWorks.Forms.DataGrid">
      <summary>Implements a data grid control.</summary>
    </member>
    <member name="T:DriveWorks.Forms.DataTableControl">
      <summary>Implements a data table control.</summary>
    </member>
    <member name="T:DriveWorks.Forms.DatePicker">
      <summary>Provides an implementation of a date picker control.</summary>
    </member>
    <member name="T:DriveWorks.Forms.DefaultRuleAttribute">
      <summary>Specifies the default rule to apply to a control.</summary>
    </member>
    <member name="T:DriveWorks.Forms.DialogButton">
      <summary>Implements a dialog button control.</summary>
    </member>
    <member name="T:DriveWorks.Forms.EffectivePreviewResult">
      <summary>Represents the result of requesting a preview from a preview control. If the preview control has a static file, then the static file name will be returned.</summary>
    </member>
    <member name="T:DriveWorks.Forms.Form">
      <summary>A form which contains controls</summary>
    </member>
    <member name="T:DriveWorks.Forms.FrameControl">
      <summary>Represents a control which can display a form inside another form.</summary>
    </member>
    <member name="T:DriveWorks.Forms.Hyperlink">
      <summary>Implements a hyperlink control.</summary>
    </member>
    <member name="T:DriveWorks.Forms.ItemList">
      <summary>Implements a list of items created using a dialog form.</summary>
    </member>
    <member name="T:DriveWorks.Forms.Label">
      <summary>Implements a label control.</summary>
    </member>
    <member name="T:DriveWorks.Forms.ListBox">
      <summary>Implements a list box control.</summary>
    </member>
    <member name="T:DriveWorks.Forms.ListControlBase">
      <summary>Provides base functionality to all list controls</summary>
    </member>
    <member name="T:DriveWorks.Forms.MacroButton">
      <summary>Implements a macro button control.</summary>
    </member>
    <member name="T:DriveWorks.Forms.MeasurementTextBox">
      <summary>Implements a text box designed for input of distances.</summary>
    </member>
    <member name="T:DriveWorks.Forms.NumericTextBox">
      <summary>Provides an implementation of a numeric text box control.</summary>
    </member>
    <member name="T:DriveWorks.Forms.OptionGroup">
      <summary>Implements an option group control.</summary>
    </member>
    <member name="T:DriveWorks.Forms.PictureBox">
      <summary>Implements a picture box control.</summary>
    </member>
    <member name="T:DriveWorks.Forms.PreviewControl">
      <summary>Represents a control which can display a 3D preview.</summary>
    </member>
    <member name="T:DriveWorks.Forms.PreviewFailureFault">
      <summary>Represents a failure due to a general error when previewing.</summary>
    </member>
    <member name="T:DriveWorks.Forms.PreviewRequest">
      <summary>Represents the information needed to request a 3D Preview.</summary>
    </member>
    <member name="T:DriveWorks.Forms.PreviewResult">
      <summary>Represents the result of a 3D Preview.</summary>
    </member>
    <member name="T:DriveWorks.Forms.RenameItem">
      <summary>Provides data for rename operations.</summary>
    </member>
    <member name="T:DriveWorks.Forms.RuleTechnologyAttribute">
      <summary>Provides support for filtering a control's applicability to a given rule technology.</summary>
    </member>
    <member name="T:DriveWorks.Forms.SimpleColor">
      <summary>Represents a 24-bit color.</summary>
    </member>
    <member name="T:DriveWorks.Forms.SimpleFont">
      <summary>Represents a font.</summary>
    </member>
    <member name="T:DriveWorks.Forms.Slider">
      <summary>Provides an implementation of a slider control.</summary>
    </member>
    <member name="T:DriveWorks.Forms.SpecificationHostControl">
      <summary>A control that can host specifications.</summary>
    </member>
    <member name="T:DriveWorks.Forms.SpinButton">
      <summary>Provides an implementation of a spin button control.</summary>
    </member>
    <member name="T:DriveWorks.Forms.TextBox">
      <summary>Provides an implementation of a text box control.</summary>
    </member>
    <member name="T:DriveWorks.Forms.UploadControl">
      <summary>Provides an implementation of a file uploading control.</summary>
    </member>
    <member name="T:DriveWorks.Forms.WebFrameControl">
      <summary>Represents a control that can display a web page.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ButtonBase.Text">
      <summary>Gets/sets the text shown in the button.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ButtonBase.TextColor">
      <summary>Gets/sets the color used for the button's text.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ButtonBase.TextFont">
      <summary>Gets/sets the font used for the button's text.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ButtonBase.TextHorizontalAlignment">
      <summary>Gets/Sets the horizontal alignment of text on this button.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ButtonBase.EffectiveTextFontProperty">
      <summary>Provides the property store for the effective text font.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ButtonBase.TextColorProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ButtonBase.TextFontProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ButtonBase.TextHorizontalAlignmentProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ButtonBase.TextProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="P:DriveWorks.Forms.CaptionControlBase.Caption">
      <summary>Gets/sets the control's caption.</summary>
    </member>
    <member name="P:DriveWorks.Forms.CaptionControlBase.CaptionColor">
      <summary>Gets/sets the color used for the control's caption.</summary>
    </member>
    <member name="P:DriveWorks.Forms.CaptionControlBase.CaptionFont">
      <summary>Gets/sets the font used for the control's caption.</summary>
    </member>
    <member name="P:DriveWorks.Forms.CaptionControlBase.CaptionHorizontalAlignment">
      <summary>Gets/sets the horizontal alignment used on the control's caption.</summary>
    </member>
    <member name="P:DriveWorks.Forms.CaptionControlBase.CaptionWidth">
      <summary>Gets/sets the width of the control's caption.</summary>
    </member>
    <member name="F:DriveWorks.Forms.CaptionControlBase.CaptionColorProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.CaptionControlBase.CaptionFontProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.CaptionControlBase.CaptionHorizontalAlignmentProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.CaptionControlBase.CaptionProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.CaptionControlBase.CaptionWidthProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.CaptionControlBase.EffectiveCaptionFontProperty">
      <summary>Provides the property store for the effective caption font.</summary>
    </member>
    <member name="M:DriveWorks.Forms.CheckBox.#ctor">
      <summary>Initializes a new instance of the  type.</summary>
    </member>
    <member name="M:DriveWorks.Forms.CheckBox.ClearInputValue">
      <summary>Sets the checked state to false.</summary>
    </member>
    <member name="M:DriveWorks.Forms.CheckBox.GetInputValue">
      <summary>Returns the current checked state of the control.</summary>
    </member>
    <member name="M:DriveWorks.Forms.CheckBox.SetInputValue(System.Object)">
      <summary>Sets the checked state of the control.</summary>
      <param name="value">The value to set to the input property.</param>
    </member>
    <member name="P:DriveWorks.Forms.CheckBox.CheckAlignment">
      <summary>Gets/sets the alignment of the check box with respect to its caption.</summary>
    </member>
    <member name="P:DriveWorks.Forms.CheckBox.Checked">
      <summary>Gets/sets whether the check box control is checked.</summary>
    </member>
    <member name="P:DriveWorks.Forms.CheckBox.DefaultValue">
      <summary>Gets/sets the default value of the control.</summary>
    </member>
    <member name="P:DriveWorks.Forms.CheckBox.PictureChecked">
      <summary>Gets/sets the picture location to use as the image for this check box when it is not checked.</summary>
    </member>
    <member name="P:DriveWorks.Forms.CheckBox.PictureDefault">
      <summary>Gets/sets the default location for the picture to use as the image for this check box when it is not checked.</summary>
    </member>
    <member name="P:DriveWorks.Forms.CheckBox.PictureSizeMode">
      <summary>Gets/sets the picture sizing mode for this check box.</summary>
    </member>
    <member name="P:DriveWorks.Forms.CheckBox.PictureStyle">
      <summary>Gets/sets the picture appearance style for this check box.</summary>
    </member>
    <member name="P:DriveWorks.Forms.CheckBox.ShowCheck">
      <summary>Gets/sets whether the check box part of the control should be shown.</summary>
    </member>
    <member name="F:DriveWorks.Forms.CheckBox.CheckAlignmentProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.CheckBox.CheckedProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.CheckBox.CheckedSourceProperty">
      <summary>Provides the property store for the source value for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.CheckBox.DefaultValueProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.CheckBox.PictureCheckedProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.CheckBox.PictureDefaultProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.CheckBox.PictureSizeModeProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.CheckBox.PictureStyleProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.CheckBox.ShowCheckProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="M:DriveWorks.Forms.ChildSpecificationList.#ctor">
      <summary>Initializes a new instance of the  type.</summary>
    </member>
    <member name="M:DriveWorks.Forms.ChildSpecificationList.GetAvailableChildProjects">
      <summary>Gets the available projects that can be used to create child specifications for this definition.</summary>
    </member>
    <member name="M:DriveWorks.Forms.ChildSpecificationList.Rename(System.String)">
      <summary>Renames the control.</summary>
      <param name="newName">The new name of the control.</param>
    </member>
    <member name="M:DriveWorks.Forms.ChildSpecificationList.AddNewItem(DriveWorks.ProjectDetails,System.Boolean)">
      <summary>Creates a new child specification context.</summary>
      <returns>The specification context that was created.</returns>
      <param name="projectDetail">The project to base the child specification context on.</param>
      <param name="showUI">Whether or not the child specification's UI should be shown to the user.</param>
    </member>
    <member name="P:DriveWorks.Forms.ChildSpecificationList.Behavior">
      <summary>Gets/sets the behavior of the child specification list.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ChildSpecificationList.ColumnWidths">
      <summary>Gets/sets the width of the columns.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ChildSpecificationList.Definition">
      <summary>Gets the current definition for this item list.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ChildSpecificationList.HeaderColor">
      <summary>Gets/sets the color used for header items.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ChildSpecificationList.HeaderFont">
      <summary>Gets/sets the font used for header items.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ChildSpecificationList.HiddenResultColumns">
      <summary>Gets/sets the result columns to be hidden from the child specification list.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ChildSpecificationList.ListColor">
      <summary>Gets/sets the color used for list items.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ChildSpecificationList.ListFont">
      <summary>Gets/sets the font used for list items.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ChildSpecificationList.NameColumnVisible">
      <summary>Gets/sets if the name column is visible or not.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ChildSpecificationList.SelectedContext">
      <summary>Gets the specification context for the selected item.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ChildSpecificationList.SelectedIndex">
      <summary>Gets/sets the selected item by its index.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ChildSpecificationList.SelectedItem">
      <summary>Gets the selected item.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ChildSpecificationList.StateColumnVisible">
      <summary>Gets/sets if the state column is visible or not.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ChildSpecificationList.TypeColumnVisible">
      <summary>Gets/sets if the type column is visible or not.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ChildSpecificationList.BehaviorProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ChildSpecificationList.ColumnWidthsProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ChildSpecificationList.EffectiveHeaderFontProperty">
      <summary>Provides the property store for the effective header font.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ChildSpecificationList.EffectiveListFontProperty">
      <summary>Provides the property store for the effective list font.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ChildSpecificationList.HeaderColorProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ChildSpecificationList.HeaderFontProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ChildSpecificationList.HiddenResultColumnsProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ChildSpecificationList.ListColorProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ChildSpecificationList.ListFontProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ChildSpecificationList.NameColumnVisibleProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ChildSpecificationList.StateColumnVisibleProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ChildSpecificationList.TypeColumnVisibleProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="E:DriveWorks.Forms.ChildSpecificationList.SelectedIndexChanged">
      <summary>Raised when the  property changes.</summary>
    </member>
    <member name="E:DriveWorks.Forms.ChildSpecificationList.SpecificationContextStateChanged">
      <summary>Raised when a child specification's state is changed.</summary>
    </member>
    <member name="M:DriveWorks.Forms.ChildSpecificationRequestEventArgs.#ctor(DriveWorks.Specification.SpecificationContext)">
      <summary>Initializes a new instance of the  class.</summary>
      <param name="context">The child specification context.</param>
    </member>
    <member name="P:DriveWorks.Forms.ChildSpecificationRequestEventArgs.ChildSpecificationContext">
      <summary>The child specification context to be used when opening the form.</summary>
    </member>
    <member name="M:DriveWorks.Forms.ComboBox.#ctor">
      <summary>Initializes a new instance of the  type.</summary>
    </member>
    <member name="M:DriveWorks.Forms.ComboBox.ClearInputValue">
      <summary>Sets the selected item to null.</summary>
    </member>
    <member name="M:DriveWorks.Forms.ComboBox.GetInputValue">
      <summary>Returns the current selected item of the control.</summary>
    </member>
    <member name="M:DriveWorks.Forms.ComboBox.SetInputValue(System.Object)">
      <summary>Sets the selected item of the control.</summary>
      <param name="value">The value to set to the input property.</param>
    </member>
    <member name="P:DriveWorks.Forms.ComboBox.ListColor">
      <summary>Gets/sets the color used for items.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ComboBox.ListFont">
      <summary>Gets/sets the font used for items.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ComboBox.EffectiveItemFontProperty">
      <summary>Provides the property store for the effective item font.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ComboBox.ItemColorProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ComboBox.ItemFontProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="M:DriveWorks.Forms.ContainerControlBase.#ctor">
      <summary>Initializes a new instance of the  type.</summary>
    </member>
    <member name="M:DriveWorks.Forms.ContainerControlBase.GetAllControls">
      <summary>Gets collection of all child controls contained by the control. Including the control children's children.</summary>
    </member>
    <member name="M:DriveWorks.Forms.ContainerControlBase.IsValidChild(DriveWorks.Forms.ControlBase)">
      <summary>Validates whether the specified control can be added as a child.</summary>
      <param name="control">The candidate child control.</param>
    </member>
    <member name="M:DriveWorks.Forms.ContainerControlBase.OnDeleted(System.EventArgs)">
      <summary>Raises the  event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:DriveWorks.Forms.ContainerControlBase.SerializeCore(System.Xml.XmlWriter,DriveWorks.Forms.SerializationMode)">
      <summary>Overridden to serialize child controls.</summary>
      <param name="writer">The writer to which to write the serialized control contents.</param>
      <param name="options">Options which configure the serialization process.</param>
    </member>
    <member name="P:DriveWorks.Forms.ContainerControlBase.Controls">
      <summary>Gets the collection of controls contained by the control.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ContainerControlBase.DefaultFont">
      <summary>Gets/sets the default font for all controls on this form.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ContainerControlBase.DefaultFontProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="M:DriveWorks.Forms.ControlBase.AssertInSpecification">
      <summary>Throws an invalid operation exception if there is no active specification.</summary>
    </member>
    <member name="M:DriveWorks.Forms.ControlBase.ClearInputValue">
      <summary>Clears the input value of the control, if it has one.</summary>
    </member>
    <member name="M:DriveWorks.Forms.ControlBase.CreateRefactorProcess(System.String)">
      <summary>Creates an object capable of refactoring all references to the control from its current name, to the given new name.</summary>
      <returns>A rename process.</returns>
    </member>
    <member name="M:DriveWorks.Forms.ControlBase.GetDefaultRule">
      <summary>Gets the default rule for the control's input property.</summary>
    </member>
    <member name="M:DriveWorks.Forms.ControlBase.GetInputValue">
      <summary>Returns the current input value of the control, if has one.</summary>
    </member>
    <member name="M:DriveWorks.Forms.ControlBase.IsValidParent(DriveWorks.Forms.ContainerControlBase)">
      <summary>Validates whether the control can be added to the specified parent.</summary>
      <param name="control">The candidate parent control.</param>
    </member>
    <member name="M:DriveWorks.Forms.ControlBase.OnDataProviderInitialized">
      <summary>Called when the DataProvider for this control has been initialized.</summary>
    </member>
    <member name="M:DriveWorks.Forms.ControlBase.OnDeleted(System.EventArgs)">
      <summary>Raises the  event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:DriveWorks.Forms.ControlBase.OnInitialized(System.EventArgs)">
      <summary>Raises the  event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:DriveWorks.Forms.ControlBase.OnParentDefaultFontChanged(DriveWorks.Forms.SimpleFont)">
      <summary>Gives child controls a chance to update the font properties when the default font changed.</summary>
    </member>
    <member name="M:DriveWorks.Forms.ControlBase.OnValidated(System.EventArgs)">
      <summary>Raises the  event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:DriveWorks.Forms.ControlBase.OnValueChanged(DriveWorks.Forms.DataModel.ValueChangedEventArgs)">
      <summary>Raises the  event.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:DriveWorks.Forms.ControlBase.RaiseLayoutChanged">
      <summary>Raises the  event.</summary>
    </member>
    <member name="M:DriveWorks.Forms.ControlBase.Rename(System.String)">
      <summary>Renames the control.</summary>
      <param name="newName">The new name of the control.</param>
    </member>
    <member name="M:DriveWorks.Forms.ControlBase.Serialize(System.Xml.XmlWriter,DriveWorks.Forms.SerializationMode)">
      <summary>Serializes the control and any contents to the given XML writer.</summary>
      <param name="writer">The XML writer to which to write the serialized control data.</param>
      <param name="options">Options which configure the serialization process.</param>
    </member>
    <member name="M:DriveWorks.Forms.ControlBase.SerializeCore(System.Xml.XmlWriter,DriveWorks.Forms.SerializationMode)">
      <summary>Serializes the contents of the control.</summary>
      <param name="writer">The XML writer to which to write the serialized control data.</param>
      <param name="options">Options which configure the serialization process.</param>
    </member>
    <member name="M:DriveWorks.Forms.ControlBase.Validate">
      <summary>When overridden by a derived control, validates the control's properties after a change.</summary>
    </member>
    <member name="M:DriveWorks.Forms.ControlBase.SetInputValue(System.Object)">
      <summary>Sets the current input value of the control, if it has one.</summary>
      <param name="value">The value to set to the input property.</param>
    </member>
    <member name="M:DriveWorks.Forms.ControlBase.SetInputValue(System.Object,DriveWorks.Forms.InputValueType)">
      <summary>Sets the current input value of the control, if it has one.</summary>
      <param name="value">The value to set to the input property.</param>
      <param name="type">The type of the input value.</param>
    </member>
    <member name="P:DriveWorks.Forms.ControlBase.BackgroundColor">
      <summary>Gets/sets the control background color.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ControlBase.Enabled">
      <summary>Gets/sets whether the control is enabled.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ControlBase.Form">
      <summary>Gets the parent form.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ControlBase.HasInputValue">
      <summary>Returns true if the current control has an input value. A control's input value is the main property of the control, editable through the control's interface.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ControlBase.Height">
      <summary>Gets/sets the control height.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ControlBase.Left">
      <summary>Gets/sets the control left.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ControlBase.MessageCode">
      <summary>Gets/sets the message code shown by the control.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ControlBase.Name">
      <summary>Gets the control name.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ControlBase.Parent">
      <summary>Gets/sets the parent control.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ControlBase.Project">
      <summary>Gets the project to which the form belongs.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ControlBase.SupportsTooltips">
      <summary>Gets whether this control supports tooltips.</summary>
      <returns>True if this control supports tooltips.</returns>
    </member>
    <member name="P:DriveWorks.Forms.ControlBase.TabIndex">
      <summary>Gets/sets the index of the control in the tab order.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ControlBase.Tag">
      <summary>Gets/sets the control tag.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ControlBase.TooltipDuration">
      <summary>Gets/sets the duration in seconds that the tooltip remains visible for.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ControlBase.TooltipText">
      <summary>Gets/sets the text to display in the control's tooltip.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ControlBase.Top">
      <summary>Gets/sets the control top.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ControlBase.Visible">
      <summary>Gets/sets whether the control is visible.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ControlBase.Width">
      <summary>Gets/sets the control width.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ControlBase.BackgroundColorProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ControlBase.EnabledProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ControlBase.HeightProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ControlBase.LeftProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ControlBase.MessageCodeProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ControlBase.TabIndexProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ControlBase.TagProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ControlBase.TooltipDurationProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ControlBase.TooltipTextProperty">
      <summary>Provides the property store for the property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ControlBase.TopProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ControlBase.VisibleProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ControlBase.WidthProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="E:DriveWorks.Forms.ControlBase.Deleted">
      <summary>Raised when the control is deleted.</summary>
    </member>
    <member name="E:DriveWorks.Forms.ControlBase.Initialized">
      <summary>Raised when the control has finished initalizing and is now ready to use.</summary>
    </member>
    <member name="E:DriveWorks.Forms.ControlBase.LayoutChanged">
      <summary>Raised when the top, left, width or height of the control is changed.</summary>
    </member>
    <member name="E:DriveWorks.Forms.ControlBase.NameChanged">
      <summary>Raised when the name of the control changes.</summary>
    </member>
    <member name="E:DriveWorks.Forms.ControlBase.NameValueChanged">
      <summary>Raised when the name of the control changes and provides information on the name change (Old name and new name).</summary>
    </member>
    <member name="E:DriveWorks.Forms.ControlBase.Validated">
      <summary>Raised when the control has had its values validated after one or more value changes.</summary>
    </member>
    <member name="E:DriveWorks.Forms.ControlBase.ValueChanged">
      <summary>Raised when the value of a property on the control changes.</summary>
    </member>
    <member name="M:DriveWorks.Forms.ControlCollection.EnsureNamesAvailable(DriveWorks.Forms.DataModel.Serialization.ControlData[],System.Boolean)">
      <summary>Ensures that the names of the given controls are not taken.</summary>
      <param name="deserialized">The deserialized control information, retrieved by using the  class.</param>
      <param name="renameDuplicates">True if duplicate controls should be renamed, false if an exception should be thrown instead.</param>
    </member>
    <member name="M:DriveWorks.Forms.ControlCollection.Find(System.String,System.Boolean)">
      <summary>Finds a control with the specified name by performing a linear search.</summary>
      <returns>The control that matches the given name, or a null reference (Nothing in Visual Basic) if nothing was found.</returns>
      <param name="name">The name of the control to find.</param>
      <param name="recursive">True to recurse, or false just to search immediate children.</param>
    </member>
    <member name="M:DriveWorks.Forms.ControlCollection.GetEnumerator">
      <summary>Returns an enumerator that can be used to iterate through the items in the collection.</summary>
      <returns>An enumerator for the collection.</returns>
    </member>
    <member name="M:DriveWorks.Forms.ControlCollection.Move(System.Int32,System.Int32)">
      <summary>Move a control from its current index to the specified index, to adjust it's z-index.</summary>
      <param name="oldIndex">The old index of the control.</param>
      <param name="newIndex">The new index of the control.</param>
    </member>
    <member name="M:DriveWorks.Forms.ControlCollection.Add``1(System.String)">
      <summary>Creates and adds a new control with the specified name.</summary>
      <exception caption="" cref="T:System.ArgumentOutOfRangeException">The specified type is either not the type of a control, or else isn't a valid child of the parent.</exception>
      <returns>The new control.</returns>
      <typeparam name="T">The type of the control to create.</typeparam>
      <param name="name">The name of the control to create.</param>
    </member>
    <member name="M:DriveWorks.Forms.ControlCollection.Add(System.Type,System.String)">
      <summary>Creates and adds a new control with the specified name.</summary>
      <exception caption="" cref="T:System.ArgumentOutOfRangeException">The specified type is either not the type of a control, or else isn't a valid child of the parent.</exception>
      <returns>The new control.</returns>
      <param name="controlType">The type of the control to create.</param>
      <param name="name">The name of the control to create.</param>
    </member>
    <member name="M:DriveWorks.Forms.ControlCollection.Add(DriveWorks.Forms.DataModel.Serialization.ControlData[],System.Boolean)">
      <summary>Takes the given deserialized control information, creates new controls, adds them to the collection, and returns them.</summary>
      <returns>An array of the top-level controls that were added.</returns>
      <param name="deserialized">The deserialized control information, retrieved by using the  class.</param>
      <param name="renameDuplicates">True if duplicate controls should be renamed, false if an exception should be thrown instead.</param>
    </member>
    <member name="M:DriveWorks.Forms.ControlCollection.ProposeNewControlName(System.String)">
      <summary>Proposes a new control name, for example in a copy and paste operation.</summary>
      <returns>A new control name, optionally suffixed with an index which makes the name unique.</returns>
      <param name="currentControlName">The current name of the control.</param>
    </member>
    <member name="M:DriveWorks.Forms.ControlCollection.ProposeNewControlName(System.String,System.String[])">
      <summary>Proposes a new control name, for example in a copy and paste operation.</summary>
      <returns>A new control name, optionally suffixed with an index which makes the name unique.</returns>
      <param name="currentControlName">The current name of the control.</param>
      <param name="reservedNames">An array of names which must not be used as the proposed control name.</param>
    </member>
    <member name="P:DriveWorks.Forms.ControlCollection.Item(System.Int32)">
      <summary>Gets the control at the given index.</summary>
      <returns>The item at the specified index.</returns>
      <param name="index">The index of the item to retrieve.</param>
    </member>
    <member name="E:DriveWorks.Forms.ControlCollection.ControlAdded">
      <summary>Raised when a control is added to the collection.</summary>
    </member>
    <member name="E:DriveWorks.Forms.ControlCollection.ControlLayoutChanged">
      <summary>Raised when a control's layout changes.</summary>
    </member>
    <member name="E:DriveWorks.Forms.ControlCollection.ControlMoved">
      <summary>Raised when a control has its index changed.</summary>
    </member>
    <member name="E:DriveWorks.Forms.ControlCollection.ControlRemoved">
      <summary>Raised when a control is removed from the collection.</summary>
    </member>
    <member name="M:DriveWorks.Forms.ControlDynamicPropertyRule.#ctor(DriveWorks.Forms.ControlBase,DriveWorks.Forms.DataModel.DynamicProperty)">
      <summary>Creates a new instance of the  class.</summary>
      <param name="control">The control that the dynamic property belongs to.</param>
      <param name="prop">The dynamic property.</param>
    </member>
    <member name="M:DriveWorks.Forms.ControlDynamicPropertyRule.GetVersionHistory">
      <summary>Gets the version history for this rule.</summary>
    </member>
    <member name="M:DriveWorks.Forms.ControlDynamicPropertyRule.SetRuleAndComment(System.String,System.String)">
      <summary>Sets the formula and comment for this rule.</summary>
      <param name="newRule">The new formula.</param>
      <param name="newComment">The new comment.</param>
    </member>
    <member name="P:DriveWorks.Forms.ControlDynamicPropertyRule.Comment">
      <summary>Gets/sets the comment on the rule.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ControlDynamicPropertyRule.Context">
      <summary>Gets the context that the rule should be evaluated using.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ControlDynamicPropertyRule.DisplayName">
      <summary>Gets the display name for this rule.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ControlDynamicPropertyRule.Id">
      <summary>Gets the unique identifier for this rule.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ControlDynamicPropertyRule.IsWritable">
      <summary>Returns whether this rule is writable. This will always be True.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ControlDynamicPropertyRule.Name">
      <summary>Gets the referencable name of the rule.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ControlDynamicPropertyRule.Rule">
      <summary>Gets/sets the rule's formula.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ControlDynamicPropertyRule.RuleType">
      <summary>Gets an array of type names which qualify this rule.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ControlDynamicPropertyRule.ScopeAddress">
      <summary>Gets the scopes that the rule should be evaluated in.</summary>
    </member>
    <member name="M:DriveWorks.Forms.ControlEventArgs.#ctor(DriveWorks.Forms.ControlBase)">
      <summary>Initializes a new instance of the  class.</summary>
      <param name="control">The control that was affected by the event.</param>
    </member>
    <member name="P:DriveWorks.Forms.ControlEventArgs.Control">
      <summary>Gets the control that was affected by the event.</summary>
    </member>
    <member name="M:DriveWorks.Forms.ControlsEventArgs.#ctor(DriveWorks.Forms.ControlBase[])">
      <summary>Initializes a new instance of the  class.</summary>
      <param name="controls">The controls that were affected by the event.</param>
    </member>
    <member name="P:DriveWorks.Forms.ControlsEventArgs.Controls">
      <summary>Gets the controls that were affected by the event.</summary>
    </member>
    <member name="M:DriveWorks.Forms.CreatingControlEventArgs.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the  class.</summary>
      <param name="controlName">The name of the control that is being created.</param>
      <param name="controlType">The type of control that is being created.</param>
    </member>
    <member name="P:DriveWorks.Forms.CreatingControlEventArgs.Cancel">
      <summary>Whether or not the creation of the control will be cancelled.</summary>
    </member>
    <member name="P:DriveWorks.Forms.CreatingControlEventArgs.ControlName">
      <summary>The name of the control that is being created.</summary>
    </member>
    <member name="P:DriveWorks.Forms.CreatingControlEventArgs.ControlType">
      <summary>The type of control that is being created.</summary>
    </member>
    <member name="M:DriveWorks.Forms.DataGrid.#ctor">
      <summary>Initializes a new instance of the  type.</summary>
    </member>
    <member name="M:DriveWorks.Forms.DataGrid.ExecuteQuery(System.Collections.Generic.IDictionary{System.String,System.Data.Odbc.OdbcConnection})">
      <summary>Executes the query represented by the data grid, and returns the result as a data table.</summary>
      <param name="connectionCache">An optional cache of open connections, represented by a writable dictionary keyed on connection string.</param>
    </member>
    <member name="P:DriveWorks.Forms.DataGrid.ConnectionString">
      <summary>Gets the connection string built from the , <see cref="P:DriveWorks.Forms.DataGrid.UserName" />, and
<see cref="P:DriveWorks.Forms.DataGrid.Password" /> properties.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataGrid.Database">
      <summary>Gets/sets the data source name of the database to query.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataGrid.FieldNames">
      <summary>Gets/sets the names of the fields to retrieve.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataGrid.Password">
      <summary>Gets/sets the password of the user to use when performing the query.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataGrid.QueryString">
      <summary>Gets the query string built from the , <see cref="P:DriveWorks.Forms.DataGrid.TableName" />, and
<see cref="P:DriveWorks.Forms.DataGrid.FieldNames" /> properties.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataGrid.TableName">
      <summary>Gets/sets the name of the table to query.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataGrid.UserName">
      <summary>Gets/sets the name of the user to use when performing the query.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataGrid.WhereClause">
      <summary>Gets/sets the where clause for the database query.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataGrid.DatabaseProperty">
      <summary>Provides the property store the for  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataGrid.FieldNamesProperty">
      <summary>Provides the property store the for  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataGrid.PasswordProperty">
      <summary>Provides the property store the for  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataGrid.TableNameProperty">
      <summary>Provides the property store the for  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataGrid.UserNameProperty">
      <summary>Provides the property store the for  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataGrid.WhereClauseProperty">
      <summary>Provides the property store the for  property.</summary>
    </member>
    <member name="E:DriveWorks.Forms.DataGrid.ConnectionStringChanged">
      <summary>Raised when the value of the  property changes.</summary>
    </member>
    <member name="E:DriveWorks.Forms.DataGrid.QueryStringChanged">
      <summary>Raised when the value of the  property changes.</summary>
    </member>
    <member name="M:DriveWorks.Forms.DataTableControl.#ctor">
      <summary>Initializes a new instance of the  type.</summary>
    </member>
    <member name="M:DriveWorks.Forms.DataTableControl.GetInputValue">
      <summary>Gets the selected index.</summary>
    </member>
    <member name="M:DriveWorks.Forms.DataTableControl.SetInputValue(System.Object)">
      <summary>Sets the selected index.</summary>
      <param name="value">The new selected index.</param>
    </member>
    <member name="P:DriveWorks.Forms.DataTableControl.ColumnWidths">
      <summary>Gets/sets the width of the columns.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataTableControl.DefaultRowIdentity">
      <summary>Gets the current value of the default row identity property which can be used to alter the currently selected row.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataTableControl.DefaultRowIndex">
      <summary>Gets the current value of the default row index property which can be used to alter the currently selected row.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataTableControl.EffectiveSelectedRowFont">
      <summary>Gets the font that will be used for rendering the control's text</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataTableControl.HeaderBackgroundColor">
      <summary>Gets/sets the color used for the control's header background color.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataTableControl.HeaderEffectiveFont">
      <summary>Gets the font that will be used for rendering the control's headers.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataTableControl.HeaderFont">
      <summary>Gets/sets the font used for the control's header text.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataTableControl.HeaderFontColor">
      <summary>Gets/sets the color used for the control's header text.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataTableControl.HeaderTextHorizontalAlignment">
      <summary>Gets/sets the horizontal alignment of the data table's header text.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataTableControl.HeaderTextVerticalAlignment">
      <summary>Gets/sets the vertical alignment of the data table's header text.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataTableControl.HiddenFields">
      <summary>Gets/sets the names of fields that should not be shown in the table.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataTableControl.IdentityFields">
      <summary>Gets/sets the names of fields that should be used as an identity specification for a row.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataTableControl.Items">
      <summary>Gets/sets the items in the table.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataTableControl.RowBackgroundColor">
      <summary>Gets/sets the color used for the background color of all rows.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataTableControl.RowHeight">
      <summary>Gets the height value to apply to all rows in the data table, including the header row.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataTableControl.RowHoverBackgroundColor">
      <summary>Gets/sets the color used for the background of the row the cursor is currently on.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataTableControl.RowHoverTextColor">
      <summary>Gets/sets the color used for the foreground of the row the cursor is currently on.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataTableControl.RowTextHorizontalAlignment">
      <summary>Gets/sets the horizontal alignment of the data table's row text.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataTableControl.RowTextVerticalAlignment">
      <summary>Gets/sets the vertical alignment of the data table's row text.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataTableControl.SelectedRowBackgroundColor">
      <summary>Gets/sets the color used for the background of the selected row.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataTableControl.SelectedRowFont">
      <summary>Gets/sets the font used for the selected row's text.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataTableControl.SelectedRowIdentity">
      <summary>Gets/sets the current value of the selected row identity property which can be used to alter the currently selected row.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataTableControl.SelectedRowIndex">
      <summary>Gets/sets the current value of the selected row index property which can be used to alter the currently selected row.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataTableControl.SelectedRowTextColor">
      <summary>Gets/sets the color used for the text of the selected row.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataTableControl.ShowGridLines">
      <summary>Gets/sets whether the data table's grid lines should be displayed.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataTableControl.TextEffectiveFont">
      <summary>Gets the font that will be used for rendering the control's text.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataTableControl.TextFont">
      <summary>Gets/sets the font used for the control's text.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataTableControl.TextFontColor">
      <summary>Gets/sets the color used for the control's body text.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataTableControl.ColumnWidthsProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataTableControl.DefaultRowIdentityProperty">
      <summary>Provides the property store the for  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataTableControl.DefaultRowIndexProperty">
      <summary>Provides the property store the for  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataTableControl.EffectiveHeaderFontProperty">
      <summary>Provides the property store for the effective header font.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataTableControl.EffectiveSelectedRowFontProperty">
      <summary>Provides the property store for the effective selected row font.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataTableControl.EffectiveTextFontProperty">
      <summary>Provides the property store for the effective text font.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataTableControl.HeaderBackgroundColorProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataTableControl.HeaderFontColorProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataTableControl.HeaderFontProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataTableControl.HeaderTextHorizontalAlignmentProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataTableControl.HeaderTextVerticalAlignmentProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataTableControl.HiddenFieldsProperty">
      <summary>Provides the property store the for  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataTableControl.IdentityFieldsProperty">
      <summary>Provides the property store the for  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataTableControl.ItemsProperty">
      <summary>Provides the property store the for  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataTableControl.RowBackgroundColorProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataTableControl.RowHeightProperty">
      <summary>Provides the property store for the row height.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataTableControl.RowHoverBackgroundColorProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataTableControl.RowHoverTextColorProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataTableControl.RowTextHorizontalAlignmentProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataTableControl.RowTextVerticalAlignmentProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataTableControl.SelectedRowBackgroundColorProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataTableControl.SelectedRowFontProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataTableControl.SelectedRowIdentityProperty">
      <summary>Provides the property store the for  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataTableControl.SelectedRowIndexProperty">
      <summary>Provides the property store the for  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataTableControl.SelectedRowTextColorProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataTableControl.ShowGridLinesProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataTableControl.TextFontColorProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataTableControl.TextFontProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="M:DriveWorks.Forms.DatePicker.#ctor">
      <summary>Initializes a new instance of the  type.</summary>
    </member>
    <member name="M:DriveWorks.Forms.DatePicker.ClearInputValue">
      <summary>Sets the date value to an empty string.</summary>
    </member>
    <member name="M:DriveWorks.Forms.DatePicker.GetInputValue">
      <summary>Returns the date picker's date value.</summary>
    </member>
    <member name="M:DriveWorks.Forms.DatePicker.SetInputValue(System.Object)">
      <summary>Sets the date picker's date value.</summary>
      <param name="value">The value to set to the input property.</param>
    </member>
    <member name="P:DriveWorks.Forms.DatePicker.DateFormat">
      <summary>Gets/sets the format which the date value will be converted into.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DatePicker.DateValue">
      <summary>Gets/sets the date that will be used within the date picker.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DatePicker.DefaultValue">
      <summary>Gets/sets the default value of the control.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DatePicker.EffectiveMaximum">
      <summary>Gets the effective maximum date, adjusted for empty values and if the minimum is greater than it.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DatePicker.EffectiveMinimum">
      <summary>Gets the effective minimum date.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DatePicker.FormattedValue">
      <summary>Gets the selected date, formatted using the specified  value.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DatePicker.Maximum">
      <summary>Gets/sets the date picker's maximum selectable value.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DatePicker.Minimum">
      <summary>Gets/sets the date picker's minimum selectable value.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DatePicker.TextColor">
      <summary>Gets/sets the color used for the control's text.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DatePicker.TextFont">
      <summary>Gets/sets the font used for the control's text.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DatePicker.TextHorizontalAlignment">
      <summary>Gets/sets the horizontal alignment of the control's text.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DatePicker.DateFormatProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DatePicker.DateProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DatePicker.DateSourceProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DatePicker.DefaultValueProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DatePicker.EffectiveTextFontProperty">
      <summary>Provides the property store for the effective text font.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DatePicker.FormattedValueProperty">
      <summary>Provides the property store for the formatted date string.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DatePicker.MaximumProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DatePicker.MinimumProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DatePicker.TextColorProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DatePicker.TextFontProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DatePicker.TextHorizontalAlignmentProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="M:DriveWorks.Forms.DefaultRuleAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the  class.</summary>
      <param name="defaultRuleInvariant">The default rule for the control in the invariant language (US English) and with a leading equals sign.</param>
    </member>
    <member name="P:DriveWorks.Forms.DefaultRuleAttribute.DefaultRuleInvariant">
      <summary>Gets the default rule.</summary>
    </member>
    <member name="M:DriveWorks.Forms.DialogButton.#ctor">
      <summary>Initializes a new instance of the  type.</summary>
    </member>
    <member name="M:DriveWorks.Forms.DialogButton.Invoke">
      <summary>Shows the dialog named by the  property.</summary>
      <exception caption="" cref="T:System.InvalidOperationException">No specification is active.The dialog doesn't exist.</exception>
      <returns>True if the dialog was activated. The only time false will be returned is if the dialog is found, but a preexecution macro closes the specification, forcing
the dialog not to be activated.</returns>
    </member>
    <member name="M:DriveWorks.Forms.DialogButton.Invoke(System.Boolean)">
      <summary>Shows the dialog named by the  property.</summary>
      <exception caption="" cref="T:System.InvalidOperationException">No specification is active.The dialog doesn't exist.</exception>
      <returns>True if the dialog was activated. The only time false will be returned is if the dialog is found, but a preexecution macro closes the specification, forcing
the dialog not to be activated.</returns>
      <param name="showUserInterface">Whether or not to show the user interface.</param>
    </member>
    <member name="P:DriveWorks.Forms.DialogButton.DialogName">
      <summary>Gets/sets the name of the dialog to show when the button is clicked.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DialogButton.PictureDefault">
      <summary>Gets/sets the location of the default picture to use as the default image for this dialog button.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DialogButton.PictureHover">
      <summary>Gets/sets the location of the picture to use as the image for this dialog button when it's in a hover state.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DialogButton.PicturePressed">
      <summary>Gets/sets the location of the picture to use as the image for this dialog button when it's in a pressed state.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DialogButton.PictureSizeMode">
      <summary>Gets/sets the picture sizing mode for this dialog button.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DialogButton.PictureStyle">
      <summary>Gets/sets the picture appearance style for this dialog button.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DialogButton.TaskListEnabled">
      <summary>Gets/sets the enabled state of the dialog task list.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DialogButton.DialogNameProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DialogButton.PictureDefaultProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DialogButton.PictureHoverProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DialogButton.PicturePressedProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DialogButton.PictureSizeModeProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DialogButton.PictureStyleProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DialogButton.TaskListEnabledProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="M:DriveWorks.Forms.EffectivePreviewResult.#ctor(System.String)">
      <summary>Initializes a new instance of an effective preview result.</summary>
      <param name="previewFilePath">The fully qualified path to the preview file.</param>
    </member>
    <member name="M:DriveWorks.Forms.EffectivePreviewResult.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Initializes a new instance of an effective preview result.</summary>
      <param name="previewFilePath">The fully qualified path to the preview file.</param>
      <param name="supportingFilePaths">A collection of fully qualified paths to additional files that belong to the preview and may be requested.</param>
    </member>
    <member name="P:DriveWorks.Forms.EffectivePreviewResult.PreviewFilePath">
      <summary>Gets the fully qualified path to the preview file.</summary>
    </member>
    <member name="P:DriveWorks.Forms.EffectivePreviewResult.SupportingFilePaths">
      <summary>Gets a collection of fully qualified paths to additional files that belong to the preview and may be requested.</summary>
    </member>
    <member name="M:DriveWorks.Forms.Form.IsValidParent(DriveWorks.Forms.ContainerControlBase)">
      <summary>Overridden to prevent parenting the form to any other control.</summary>
      <returns>Overridden to return false in all cases.</returns>
      <param name="control">The candidate parent control.</param>
    </member>
    <member name="M:DriveWorks.Forms.Form.DeleteControls(DriveWorks.Forms.ControlBase)">
      <summary>Deletes the specified control from the form.</summary>
      <returns>True if the control was found and deleted.</returns>
      <param name="control">The control to delete.</param>
    </member>
    <member name="M:DriveWorks.Forms.Form.DeleteControls(DriveWorks.Forms.ControlBase[])">
      <summary>Deletes the specified controls from the form.</summary>
      <returns>True if the controls were found and deleted.</returns>
      <param name="controls">The controls to delete.</param>
    </member>
    <member name="P:DriveWorks.Forms.Form.BackgroundColor">
      <summary>Gets/sets the background color of the form.</summary>
    </member>
    <member name="P:DriveWorks.Forms.Form.OnEnter">
      <summary>Gets/sets the name of the macro to run before switching to this form.</summary>
    </member>
    <member name="P:DriveWorks.Forms.Form.OnNext">
      <summary>Gets/sets the name of the macro to run before switching to the next form.</summary>
    </member>
    <member name="P:DriveWorks.Forms.Form.OnPrevious">
      <summary>Gets/sets the name of the macro to run before switching to the previous form.</summary>
    </member>
    <member name="P:DriveWorks.Forms.Form.ShowStandardNavigation">
      <summary>Gets/Sets whether the default form navigation is shown.</summary>
    </member>
    <member name="P:DriveWorks.Forms.Form.ShowTaskList">
      <summary>Gets/sets whether the form will display a task list.</summary>
    </member>
    <member name="F:DriveWorks.Forms.Form.BackgroundColorProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.Form.OnEnterProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.Form.OnNextProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.Form.OnPreviousProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.Form.ShowStandardNavigationProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.Form.ShowTaskListProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="E:DriveWorks.Forms.Form.ControlsCreated">
      <summary>Raised when one or more controls are created.</summary>
    </member>
    <member name="E:DriveWorks.Forms.Form.ControlsDeleted">
      <summary>Raised when one or more controls are deleted.</summary>
    </member>
    <member name="E:DriveWorks.Forms.Form.CreatingControl">
      <summary>Raised when a control is being created.</summary>
    </member>
    <member name="M:DriveWorks.Forms.FrameControl.GetForm">
      <summary>Gets the an instance of a form that matches the  property.</summary>
    </member>
    <member name="P:DriveWorks.Forms.FrameControl.FormName">
      <summary>Gets/sets the form to display inline.</summary>
    </member>
    <member name="P:DriveWorks.Forms.FrameControl.HorizontalScrollBarVisibility">
      <summary>Gets/sets the horizontal visibility of the scroll bar for the frame's content.</summary>
    </member>
    <member name="P:DriveWorks.Forms.FrameControl.VerticalScrollBarVisibility">
      <summary>Gets/sets the vertical visibility of the scroll bar for the frame's content.</summary>
    </member>
    <member name="F:DriveWorks.Forms.FrameControl.FormNameProperty">
      <summary>Provides the backing store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.FrameControl.HorizontalScrollVisibilityProperty">
      <summary>Provides the backing store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.FrameControl.VerticalScrollVisibilityProperty">
      <summary>Provides the backing store for the  property.</summary>
    </member>
    <member name="M:DriveWorks.Forms.Hyperlink.#ctor">
      <summary>Initializes a new instance of the  type.</summary>
    </member>
    <member name="P:DriveWorks.Forms.Hyperlink.HoverColor">
      <summary>Gets/sets the hyperlink's hover color.</summary>
    </member>
    <member name="P:DriveWorks.Forms.Hyperlink.HoverUnderline">
      <summary>Gets/sets whether the link text should be underlined when in hover state.</summary>
    </member>
    <member name="P:DriveWorks.Forms.Hyperlink.Link">
      <summary>Gets/sets the hyperlink's link value.</summary>
    </member>
    <member name="P:DriveWorks.Forms.Hyperlink.LinkBehavior">
      <summary>Gets/sets whether the link, when clicked on the web, should be opened in the current window or in a new window/tab.</summary>
    </member>
    <member name="P:DriveWorks.Forms.Hyperlink.PictureDefault">
      <summary>Gets/sets the default location for the picture to use as the image for this hyperlink when it's not in its hover state.</summary>
    </member>
    <member name="P:DriveWorks.Forms.Hyperlink.PictureHover">
      <summary>Gets/sets the picture location to use as the image for this hyperlink when it is in its hover state.</summary>
    </member>
    <member name="P:DriveWorks.Forms.Hyperlink.PictureSizeMode">
      <summary>Gets/sets the picture sizing mode for this hyperlink.</summary>
    </member>
    <member name="P:DriveWorks.Forms.Hyperlink.PictureStyle">
      <summary>Gets/sets the picture appearance style for this hyperlink.</summary>
    </member>
    <member name="P:DriveWorks.Forms.Hyperlink.Text">
      <summary>Gets/sets the label's text.</summary>
    </member>
    <member name="P:DriveWorks.Forms.Hyperlink.TextColor">
      <summary>Gets/sets the color used for the control's text.</summary>
    </member>
    <member name="P:DriveWorks.Forms.Hyperlink.TextFont">
      <summary>Gets/sets the font used for the control's text.</summary>
    </member>
    <member name="P:DriveWorks.Forms.Hyperlink.TextHorizontalAlignment">
      <summary>Gets/Sets the horizontal alignment of the control's text.</summary>
    </member>
    <member name="P:DriveWorks.Forms.Hyperlink.TextUnderline">
      <summary>Gets/sets whether the link text should be underlined.</summary>
    </member>
    <member name="F:DriveWorks.Forms.Hyperlink.EffectiveTextFontProperty">
      <summary>Provides the property store for the effective text font.</summary>
    </member>
    <member name="F:DriveWorks.Forms.Hyperlink.HoverColorProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.Hyperlink.HoverUnderlineProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.Hyperlink.LinkBehaviorProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.Hyperlink.LinkProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.Hyperlink.PictureDefaultProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.Hyperlink.PictureHoverProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.Hyperlink.PictureSizeModeProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.Hyperlink.PictureStyleProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.Hyperlink.TextColorProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.Hyperlink.TextFontProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.Hyperlink.TextHorizontalAlignmentProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.Hyperlink.TextProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.Hyperlink.TextUnderlineProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="M:DriveWorks.Forms.ItemList.#ctor">
      <summary>Initializes a new instance of the  type.</summary>
    </member>
    <member name="M:DriveWorks.Forms.ItemList.Delete">
      <summary>Removes the item at the specified index. This works off of the Selected Index property.</summary>
    </member>
    <member name="M:DriveWorks.Forms.ItemList.MoveItemDown">
      <summary>Invokes the move item down command. This works off of the Selected Index property.</summary>
    </member>
    <member name="M:DriveWorks.Forms.ItemList.MoveItemUp">
      <summary>Invokes the move item up command. This works off of the Selected Index property.</summary>
    </member>
    <member name="M:DriveWorks.Forms.ItemList.Rename(System.String)">
      <summary>Renames the control.</summary>
      <param name="newName">The new name of the control.</param>
    </member>
    <member name="M:DriveWorks.Forms.ItemList.BeginAdd(System.String)">
      <summary>Starts the adding process for this item list. Informs the specification context that a dialog is being opened etc.</summary>
      <exception caption="" cref="T:System.InvalidOperationException">
 Thrown when not in a Specification.
 </exception>
      <param name="formName">The name of the form to use in the adding process.</param>
    </member>
    <member name="M:DriveWorks.Forms.ItemList.BeginAdd(System.String,System.Boolean)">
      <summary>Starts the adding process for this item list. Informs the specification context that a dialog is being opened etc.</summary>
      <exception caption="" cref="T:System.InvalidOperationException">
 Thrown when not in a Specification.
 </exception>
      <param name="showUserInterface">Whether or not to show the user interface.</param>
    </member>
    <member name="M:DriveWorks.Forms.ItemList.BeginCopy(System.String)">
      <summary>Starts the copying process for this item list. Informs the specification context that a dialog is being opened etc.</summary>
      <exception caption="" cref="T:System.InvalidOperationException">
 Thrown when not in a Specification.
 </exception>
      <param name="formName">The name of the form to use in the copying process.</param>
    </member>
    <member name="M:DriveWorks.Forms.ItemList.BeginCopy(System.String,System.Boolean)">
      <summary>Starts the copying process for this item list. Informs the specification context that a dialog is being opened etc.</summary>
      <exception caption="" cref="T:System.InvalidOperationException">
 Thrown when not in a Specification.
 </exception>
      <param name="formName">The name of the form to use in the copying process.</param>
      <param name="showUserInterface">Whether or not to show the user interface.</param>
    </member>
    <member name="M:DriveWorks.Forms.ItemList.BeginEdit(System.String)">
      <summary>Starts the editing process for this item list. Informs the specification context that a dialog is being opened etc.</summary>
      <exception caption="" cref="T:System.InvalidOperationException">
 Thrown when not in a Specification.
 </exception>
      <param name="formName">The name of the form to use in the editing process.</param>
    </member>
    <member name="M:DriveWorks.Forms.ItemList.BeginEdit(System.String,System.Boolean)">
      <summary>Starts the editing process for this item list. Informs the specification context that a dialog is being opened etc.</summary>
      <exception caption="" cref="T:System.InvalidOperationException">
 Thrown when not in a Specification.
 </exception>
      <param name="formName">The name of the form to use in the editing process.</param>
      <param name="showUserInterface">Whether or not to show the user interface.</param>
    </member>
    <member name="P:DriveWorks.Forms.ItemList.ColumnWidths">
      <summary>Gets/sets the width of the columns.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ItemList.Definition">
      <summary>Gets the current defintion for this item list.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ItemList.HeaderColor">
      <summary>Gets/sets the color used for header items.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ItemList.HeaderFont">
      <summary>Gets/sets the font used for header items.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ItemList.HiddenItemValues">
      <summary>Gets/sets the item values to be hidden from the Item List.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ItemList.Items">
      <summary>Gets/sets the names of the dialogs which can create items.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ItemList.ListColor">
      <summary>Gets/sets the color used for list items.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ItemList.ListFont">
      <summary>Gets/sets the font used for list items.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ItemList.NameColumnVisible">
      <summary>Gets/sets if the Name column is visible or not.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ItemList.SelectedIndex">
      <summary>Gets/sets the selected item by its index</summary>
    </member>
    <member name="P:DriveWorks.Forms.ItemList.TaskListEnabled">
      <summary>Gets/sets whether the dialog task list should be enabled.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ItemList.TypeColumnVisible">
      <summary>Gets/sets if the type column is visible or not.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ItemList.ColumnWidthsProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ItemList.EffectiveHeaderFontProperty">
      <summary>Provides the property store for the effective list font.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ItemList.EffectiveListFontProperty">
      <summary>Provides the property store for the effective list font.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ItemList.HeaderColorProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ItemList.HeaderFontProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ItemList.HiddenItemValuesProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ItemList.ItemsProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ItemList.ListColorProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ItemList.ListFontProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ItemList.NameColumnVisibleProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ItemList.TaskListEnabledProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ItemList.TypeColumnVisibleProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="M:DriveWorks.Forms.Label.#ctor">
      <summary>Initializes a new instance of the  type.</summary>
    </member>
    <member name="P:DriveWorks.Forms.Label.Text">
      <summary>Gets/sets the label's text.</summary>
    </member>
    <member name="P:DriveWorks.Forms.Label.TextColor">
      <summary>Gets/sets the color used for the control's text.</summary>
    </member>
    <member name="P:DriveWorks.Forms.Label.TextEffectiveFont">
      <summary>Gets the font that will be used for rendering the control's text</summary>
    </member>
    <member name="P:DriveWorks.Forms.Label.TextFont">
      <summary>Gets/sets the font used for the control's text.</summary>
    </member>
    <member name="P:DriveWorks.Forms.Label.TextHorizontalAlignment">
      <summary>Gets/sets the horizontal alignment of the labels text.</summary>
    </member>
    <member name="F:DriveWorks.Forms.Label.EffectiveTextFontProperty">
      <summary>Provides the property store for the effective text font.</summary>
    </member>
    <member name="F:DriveWorks.Forms.Label.TextColorProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.Label.TextFontProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.Label.TextHorizontalAlignmentProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.Label.TextProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="M:DriveWorks.Forms.ListBox.#ctor">
      <summary>Initializes a new instance of the  type.</summary>
    </member>
    <member name="M:DriveWorks.Forms.ListBox.ClearInputValue">
      <summary>Sets the selected item to null.</summary>
    </member>
    <member name="M:DriveWorks.Forms.ListBox.GetInputValue">
      <summary>Returns the current selected item of the control.</summary>
    </member>
    <member name="M:DriveWorks.Forms.ListBox.SetInputValue(System.Object)">
      <summary>Sets the selected item of the control.</summary>
      <param name="value">The value to set to the input property.</param>
    </member>
    <member name="P:DriveWorks.Forms.ListBox.ListColor">
      <summary>Gets/sets the color used for list items.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ListBox.ListFont">
      <summary>Gets/sets the font used for list items.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ListBox.EffectiveListFontProperty">
      <summary>Provides the property store for the effective list font.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ListBox.ListColorProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ListBox.ListFontProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="M:DriveWorks.Forms.ListControlBase.Validate">
      <summary>Overridden to validate the selected item.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ListControlBase.AllowClearSelection">
      <summary>Gets/sets whether users are given the option of clearing the selection.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ListControlBase.DefaultValue">
      <summary>Gets/sets the default value of the list control.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ListControlBase.Items">
      <summary>Gets/sets the available items in the list control.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ListControlBase.SelectedItem">
      <summary>Gets/sets the selected item in the list control.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ListControlBase.SelectedItemRemovedBehavior">
      <summary>Controls the behavior of the selection when the selected item is removed from the list of selectable items.</summary>
    </member>
    <member name="P:DriveWorks.Forms.ListControlBase.SelectionIsValid">
      <summary>Gets a value indicating whether the current selection is valid.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ListControlBase.AllowClearSelectionProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ListControlBase.DefaultValueProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ListControlBase.ItemsProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ListControlBase.SelectedItemProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ListControlBase.SelectedItemRemovedBehaviorProperty">
      <summary>Provides the property store the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.ListControlBase.SelectedItemSourceProperty">
      <summary>Provides the property store for the source value for the  property.</summary>
    </member>
    <member name="M:DriveWorks.Forms.MacroButton.#ctor">
      <summary>Initializes a new instance of the  type.</summary>
    </member>
    <member name="M:DriveWorks.Forms.MacroButton.Invoke">
      <summary>Invokes the macro specified in the  property.</summary>
    </member>
    <member name="M:DriveWorks.Forms.MacroButton.Invoke(System.Drawing.Point)">
      <summary>Invokes the macro specified in the  property with the provided click position.</summary>
    </member>
    <member name="P:DriveWorks.Forms.MacroButton.MacroArgument">
      <summary>Gets/sets the argument to the macro invoked by the button when it is clicked.</summary>
    </member>
    <member name="P:DriveWorks.Forms.MacroButton.MacroName">
      <summary>Gets/sets the name of the macro invoked by the button when it is clicked.</summary>
    </member>
    <member name="P:DriveWorks.Forms.MacroButton.PictureDefault">
      <summary>Gets/sets the location of the default picture to use as the default image for this macro button.</summary>
    </member>
    <member name="P:DriveWorks.Forms.MacroButton.PictureHover">
      <summary>Gets/sets the location of the picture to use as the image for this macro button when it's in a hover state.</summary>
    </member>
    <member name="P:DriveWorks.Forms.MacroButton.PicturePressed">
      <summary>Gets/sets the location of the picture to use as the image for this macro button when it's in a pressed state.</summary>
    </member>
    <member name="P:DriveWorks.Forms.MacroButton.PictureSizeMode">
      <summary>Gets/sets the picture sizing mode for this macro button.</summary>
    </member>
    <member name="P:DriveWorks.Forms.MacroButton.PictureStyle">
      <summary>Gets/sets the picture appearance style for this macro button.</summary>
    </member>
    <member name="F:DriveWorks.Forms.MacroButton.MacroArgumentProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.MacroButton.MacroNameProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.MacroButton.PictureDefaultProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.MacroButton.PictureHoverProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.MacroButton.PicturePressedProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.MacroButton.PictureSizeModeProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.MacroButton.PictureStyleProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="M:DriveWorks.Forms.MeasurementTextBox.ClearInputValue">
      <summary>Sets the display value to zero.</summary>
    </member>
    <member name="M:DriveWorks.Forms.MeasurementTextBox.GetInputValue">
      <summary>Returns the current display value of the control.</summary>
    </member>
    <member name="M:DriveWorks.Forms.MeasurementTextBox.SetInputValue(System.Object,DriveWorks.Forms.InputValueType)">
      <summary>Sets the current input value of the control, if it has one.</summary>
      <param name="value">The value to set to the input property.</param>
      <param name="type">The type of the input value.</param>
    </member>
    <member name="P:DriveWorks.Forms.MeasurementTextBox.DecimalPlaces">
      <summary>Gets/Sets the maximum decimal places the measurement text box can have</summary>
    </member>
    <member name="P:DriveWorks.Forms.MeasurementTextBox.DisplayUnits">
      <summary>Gets/sets the measurement text box's display units.</summary>
    </member>
    <member name="P:DriveWorks.Forms.MeasurementTextBox.DisplayValue">
      <summary>Gets/sets the display value of the control.</summary>
    </member>
    <member name="P:DriveWorks.Forms.MeasurementTextBox.EffectiveDecimalPlaces">
      <summary>Gets the effective decimal places value for the measurement text box</summary>
    </member>
    <member name="P:DriveWorks.Forms.MeasurementTextBox.Maximum">
      <summary>Gets/sets the measurement text box's maximum value.</summary>
    </member>
    <member name="P:DriveWorks.Forms.MeasurementTextBox.Minimum">
      <summary>Gets/sets the measurement text box's minimum value.</summary>
    </member>
    <member name="P:DriveWorks.Forms.MeasurementTextBox.NativeUnits">
      <summary>Gets/sets the measurement text box's native units.</summary>
    </member>
    <member name="P:DriveWorks.Forms.MeasurementTextBox.NativeValue">
      <summary>Gets the native value of the control.</summary>
    </member>
    <member name="P:DriveWorks.Forms.MeasurementTextBox.TextColor">
      <summary>Gets/sets the color used for the control's text.</summary>
    </member>
    <member name="P:DriveWorks.Forms.MeasurementTextBox.TextFont">
      <summary>Gets/sets the font used for the control's text.</summary>
    </member>
    <member name="P:DriveWorks.Forms.MeasurementTextBox.TextHorizontalAlignment">
      <summary>Gets/sets the horizontal alignment used for the text in the control.</summary>
    </member>
    <member name="P:DriveWorks.Forms.MeasurementTextBox.UnitColor">
      <summary>Gets/sets the color used for the unit's text.</summary>
    </member>
    <member name="P:DriveWorks.Forms.MeasurementTextBox.UnitFont">
      <summary>Gets/sets the font used in the units dropdown.</summary>
    </member>
    <member name="F:DriveWorks.Forms.MeasurementTextBox.DecimalPlacesProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.MeasurementTextBox.DisplayUnitsProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.MeasurementTextBox.DisplayValueProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.MeasurementTextBox.EffectiveTextFontProperty">
      <summary>Provides the property store for the effective  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.MeasurementTextBox.EffectiveUnitFontProperty">
      <summary>Provides the property store for the effective  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.MeasurementTextBox.MaximumProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.MeasurementTextBox.MinimumProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.MeasurementTextBox.NativeUnitsProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.MeasurementTextBox.NativeValueProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.MeasurementTextBox.TextColorProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.MeasurementTextBox.TextFontProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.MeasurementTextBox.TextHorizontalAlignmentProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.MeasurementTextBox.UnitColorProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.MeasurementTextBox.UnitFontProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="M:DriveWorks.Forms.NumericTextBox.#ctor">
      <summary>Initializes a new instance of the  type.</summary>
    </member>
    <member name="M:DriveWorks.Forms.NumericTextBox.ClearInputValue">
      <summary>Sets the current value to zero.</summary>
    </member>
    <member name="M:DriveWorks.Forms.NumericTextBox.GetInputValue">
      <summary>Returns the current value of the control.</summary>
    </member>
    <member name="M:DriveWorks.Forms.NumericTextBox.SetInputValue(System.Object)">
      <summary>Sets the current value of the control.</summary>
      <param name="value">The value to set to the input property.</param>
    </member>
    <member name="P:DriveWorks.Forms.NumericTextBox.DecimalPlaces">
      <summary>Gets/Sets the maximum decimal places the numeric text box can have</summary>
    </member>
    <member name="P:DriveWorks.Forms.NumericTextBox.DefaultValue">
      <summary>Gets/sets the default value of the control.</summary>
    </member>
    <member name="P:DriveWorks.Forms.NumericTextBox.EffectiveDecimalPlaces">
      <summary>Gets the effective decimal places value for the numeric text box</summary>
    </member>
    <member name="P:DriveWorks.Forms.NumericTextBox.EffectiveMaximum">
      <summary>Gets the effective maximum value of the numeric text box.</summary>
    </member>
    <member name="P:DriveWorks.Forms.NumericTextBox.EffectiveMinimum">
      <summary>Gets the effective minimum value of the numeric text box.</summary>
    </member>
    <member name="P:DriveWorks.Forms.NumericTextBox.EffectiveValue">
      <summary>Gets the effective value of the numeric text box.</summary>
    </member>
    <member name="P:DriveWorks.Forms.NumericTextBox.InputBackgroundColor">
      <summary>Gets/sets the color used for the background of the input area.</summary>
    </member>
    <member name="P:DriveWorks.Forms.NumericTextBox.Maximum">
      <summary>Gets/sets the text box's maximum value.</summary>
    </member>
    <member name="P:DriveWorks.Forms.NumericTextBox.Minimum">
      <summary>Gets/sets the text box's minimum value.</summary>
    </member>
    <member name="P:DriveWorks.Forms.NumericTextBox.ShowBorder">
      <summary>Gets/sets whether the border of the text box is shown.</summary>
    </member>
    <member name="P:DriveWorks.Forms.NumericTextBox.TextColor">
      <summary>Gets/sets the color used for the control's text.</summary>
    </member>
    <member name="P:DriveWorks.Forms.NumericTextBox.TextFont">
      <summary>Gets/sets the font used for the control's text.</summary>
    </member>
    <member name="P:DriveWorks.Forms.NumericTextBox.TextHorizontalAlignment">
      <summary>Gets/sets the horizontal alignment of the control's text</summary>
    </member>
    <member name="P:DriveWorks.Forms.NumericTextBox.Value">
      <summary>Gets the native value of the control.</summary>
    </member>
    <member name="F:DriveWorks.Forms.NumericTextBox.DecimalPlacesProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.NumericTextBox.DefaultValueProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.NumericTextBox.EffectiveTextFontProperty">
      <summary>Provides the property store for the effective text font.</summary>
    </member>
    <member name="F:DriveWorks.Forms.NumericTextBox.InputBackgroundColorProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.NumericTextBox.MaximumProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.NumericTextBox.MinimumProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.NumericTextBox.ShowBorderProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.NumericTextBox.TextColorProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.NumericTextBox.TextFontProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.NumericTextBox.TextHorizontalAlignmentProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.NumericTextBox.ValueProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="M:DriveWorks.Forms.OptionButton.#ctor">
      <summary>Initializes a new instance of the  type.</summary>
    </member>
    <member name="M:DriveWorks.Forms.OptionButton.ClearInputValue">
      <summary>Clears the selection of the current control's option group.</summary>
    </member>
    <member name="M:DriveWorks.Forms.OptionButton.GetInputValue">
      <summary>Returns the current selection of the current control's option group.</summary>
    </member>
    <member name="M:DriveWorks.Forms.OptionButton.SetInputValue(System.Object)">
      <summary>Sets the selection of the current control's option group.</summary>
      <param name="value">The value to set to the input property.</param>
    </member>
    <member name="P:DriveWorks.Forms.OptionButton.AllowClearSelection">
      <summary>Gets/sets whether users are given the option of clearing the selection.</summary>
    </member>
    <member name="P:DriveWorks.Forms.OptionButton.GroupName">
      <summary>Gets/sets the name of the group to which this option belongs.</summary>
    </member>
    <member name="P:DriveWorks.Forms.OptionButton.OptionAlignment">
      <summary>Gets/sets whether options are left or right aligned.</summary>
    </member>
    <member name="P:DriveWorks.Forms.OptionButton.PictureDefault">
      <summary>Gets/sets the default location of the picture to be displayed on this option when this option is not selected.</summary>
    </member>
    <member name="P:DriveWorks.Forms.OptionButton.PictureSelected">
      <summary>Gets/sets the location of the picture to be displayed on this option when this option is selected.</summary>
    </member>
    <member name="P:DriveWorks.Forms.OptionButton.PictureSizeMode">
      <summary>Gets/sets the picture sizing mode for this option control.</summary>
    </member>
    <member name="P:DriveWorks.Forms.OptionButton.PictureStyle">
      <summary>Gets/sets the picture appearance style for this option control.</summary>
    </member>
    <member name="P:DriveWorks.Forms.OptionButton.SelectedOption">
      <summary>Gets/sets the selected option within this option's group.</summary>
    </member>
    <member name="P:DriveWorks.Forms.OptionButton.ShowCheck">
      <summary>Gets/sets the radio button's visiblity.</summary>
    </member>
    <member name="F:DriveWorks.Forms.OptionButton.AllowClearSelectionProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.OptionButton.GroupNameProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.OptionButton.OptionAlignmentProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.OptionButton.PictureDefaultProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.OptionButton.PictureSelectedProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.OptionButton.PictureSizeModeProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.OptionButton.PictureStyleProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.OptionButton.SelectedOptionProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.OptionButton.SelectedOptionSourceProperty">
      <summary>Provides the property store for the source value for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.OptionButton.ShowCheckProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="M:DriveWorks.Forms.OptionGroup.#ctor">
      <summary>Initializes a new instance of the  type.</summary>
    </member>
    <member name="M:DriveWorks.Forms.OptionGroup.ClearInputValue">
      <summary>Sets the selected item to null.</summary>
    </member>
    <member name="M:DriveWorks.Forms.OptionGroup.GetInputValue">
      <summary>Returns the current selected item of the control.</summary>
    </member>
    <member name="M:DriveWorks.Forms.OptionGroup.SetInputValue(System.Object)">
      <summary>Sets the selected item of the control.</summary>
      <param name="value">The value to set to the input property.</param>
    </member>
    <member name="P:DriveWorks.Forms.OptionGroup.MaximumRows">
      <summary>Gets/sets the maximum number of rows that options can be added to before spilling into another column, where zero means that there is no limit.</summary>
    </member>
    <member name="P:DriveWorks.Forms.OptionGroup.OptionAlignment">
      <summary>Gets/sets whether options are left or right aligned.</summary>
    </member>
    <member name="P:DriveWorks.Forms.OptionGroup.OptionColor">
      <summary>Gets/sets the color used for option items.</summary>
    </member>
    <member name="P:DriveWorks.Forms.OptionGroup.OptionFont">
      <summary>Gets/sets the font used for option items.</summary>
    </member>
    <member name="P:DriveWorks.Forms.OptionGroup.OptionTextHorizontalAlignment">
      <summary>Gets/Sets the horizontal alignment of the option text.</summary>
    </member>
    <member name="P:DriveWorks.Forms.OptionGroup.PictureDefault">
      <summary>Gets/sets the default location of the picture to be displayed on an option when that option is not selected.</summary>
    </member>
    <member name="P:DriveWorks.Forms.OptionGroup.PictureSelected">
      <summary>Gets/sets the location of the picture to be displayed on an option when that option is selected.</summary>
    </member>
    <member name="P:DriveWorks.Forms.OptionGroup.PictureSizeMode">
      <summary>Gets/sets the picture sizing mode for this option group.</summary>
    </member>
    <member name="P:DriveWorks.Forms.OptionGroup.PictureStyle">
      <summary>Gets/sets the picture appearance style for this option group.</summary>
    </member>
    <member name="P:DriveWorks.Forms.OptionGroup.ShowBorder">
      <summary>Gets/Sets whether the border of the option group is shown.</summary>
    </member>
    <member name="P:DriveWorks.Forms.OptionGroup.ShowOption">
      <summary>Gets/sets the radio button's visibility.</summary>
    </member>
    <member name="F:DriveWorks.Forms.OptionGroup.EffectiveOptionFontProperty">
      <summary>Provides the property store for the effective option font.</summary>
    </member>
    <member name="F:DriveWorks.Forms.OptionGroup.MaximumRowsProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.OptionGroup.OptionAlignmentProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.OptionGroup.OptionColorProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.OptionGroup.OptionFontProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.OptionGroup.OptionTextHorizontalAlignmentProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.OptionGroup.PictureDefaultProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.OptionGroup.PictureSelectedProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.OptionGroup.PictureSizeModeProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.OptionGroup.PictureStyleProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.OptionGroup.ShowBorderProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.OptionGroup.ShowOptionProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="M:DriveWorks.Forms.PictureBox.#ctor">
      <summary>Initializes a new instance of the  type.</summary>
    </member>
    <member name="P:DriveWorks.Forms.PictureBox.BorderStyle">
      <summary>Gets/sets the style of the border around the picture box.</summary>
    </member>
    <member name="P:DriveWorks.Forms.PictureBox.FileName">
      <summary>Gets/sets the file name of the picture to be shown.</summary>
    </member>
    <member name="P:DriveWorks.Forms.PictureBox.SizeMode">
      <summary>Gets/sets the sizing mode of the picture in the picture box.</summary>
    </member>
    <member name="F:DriveWorks.Forms.PictureBox.BorderStyleProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.PictureBox.FileNameProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.PictureBox.SizeModeProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="M:DriveWorks.Forms.PreviewControl.ClearPreview">
      <summary>Clears the preview result from memory.</summary>
    </member>
    <member name="M:DriveWorks.Forms.PreviewControl.CreatePreviewFromServerAsync">
      <summary>Creates a preview from the server asynchronously.</summary>
      <returns>A task that can be awaited in order to get information from the server as to the status of the preview.</returns>
    </member>
    <member name="M:DriveWorks.Forms.PreviewControl.GetPreview">
      <summary>Gets the preview for the control.</summary>
      <returns>A disposable object that contains the preview for this control.</returns>
    </member>
    <member name="M:DriveWorks.Forms.PreviewControl.GetPreviewForExport">
      <summary>Gets the preview for a form export.</summary>
      <returns>A disposable object that contains the preview for this control.</returns>
    </member>
    <member name="M:DriveWorks.Forms.PreviewControl.CreatePreviewFromServer">
      <summary>Creates a preview from the server.</summary>
    </member>
    <member name="M:DriveWorks.Forms.PreviewControl.CreatePreviewImage(System.String,System.Int32,System.Int32,System.String)">
      <summary>Generates a preview screenshot from the preview control</summary>
      <param name="outputPath">Path to save the image out to.</param>
      <param name="width">Pixel width of image to save out.</param>
      <param name="height">Pixel height of image to save out.</param>
    </member>
    <member name="M:DriveWorks.Forms.PreviewControl.CreatePreviewImage(System.String,System.Int32,System.Int32,DriveWorks.Support.RotationZoom)">
      <summary>Generates a preview screenshot from the preview control</summary>
      <param name="outputPath">Path to save the image out to.</param>
      <param name="width">Pixel width of image to save out.</param>
      <param name="height">Pixel height of image to save out.</param>
      <param name="rotationZoom">Orientation to set the camera to.</param>
    </member>
    <member name="P:DriveWorks.Forms.PreviewControl.AutoCenter">
      <summary>Gets/sets whether to make panning relative to the scene center rather than the origin.</summary>
    </member>
    <member name="P:DriveWorks.Forms.PreviewControl.AutopilotPreviewRequestedMacroName">
      <summary>Gets/sets the name of the macro to run before we start previewing the model via Autopilot.</summary>
    </member>
    <member name="P:DriveWorks.Forms.PreviewControl.BackgroundClickedMacroName">
      <summary>Gets/sets the name of the macro invoked by the control when the background is clicked.</summary>
    </member>
    <member name="P:DriveWorks.Forms.PreviewControl.BorderStyle">
      <summary>Gets/sets the style of the border around the picture box.</summary>
    </member>
    <member name="P:DriveWorks.Forms.PreviewControl.CurrentScene">
      <summary>Gets a Json string version of the current scene.</summary>
      <returns>A Json string version of the current scene.</returns>
    </member>
    <member name="P:DriveWorks.Forms.PreviewControl.DefaultRotationZoom">
      <summary>Gets/sets the default rotation and zoom as a struct.</summary>
    </member>
    <member name="P:DriveWorks.Forms.PreviewControl.DefaultRotationZoomValue">
      <summary>Gets/sets the default rotation and zoom as a string.</summary>
    </member>
    <member name="P:DriveWorks.Forms.PreviewControl.EnableImageMode">
      <summary>Gets/sets whether to force image mode for the PreviewControl when viewed in a browser.</summary>
    </member>
    <member name="P:DriveWorks.Forms.PreviewControl.EnableMenu">
      <summary>Gets/sets the availability of the control menu.</summary>
    </member>
    <member name="P:DriveWorks.Forms.PreviewControl.EnableOrthographic">
      <summary>Gets/sets whether the default camera's projection mode is orthographic or not(perspective).</summary>
    </member>
    <member name="P:DriveWorks.Forms.PreviewControl.EnablePan">
      <summary>Gets/sets whether to enable panning on the PreviewControl.</summary>
    </member>
    <member name="P:DriveWorks.Forms.PreviewControl.FileName">
      <summary>Gets/sets the absolute path, or path relative to the project file, of a supported static 3D file to show, if this is set, the preview functionality is
disabled.</summary>
    </member>
    <member name="P:DriveWorks.Forms.PreviewControl.GenerationMethod">
      <summary>Gets/sets the generation method that should be used to preview the model.</summary>
    </member>
    <member name="P:DriveWorks.Forms.PreviewControl.Lighting">
      <summary>Gets/sets the lighting preset to be used for 3D rendering.</summary>
    </member>
    <member name="P:DriveWorks.Forms.PreviewControl.ModelClickedMacroName">
      <summary>Gets/sets the name of the macro invoked by the control when the model is clicked.</summary>
    </member>
    <member name="P:DriveWorks.Forms.PreviewControl.PanMaxRadius">
      <summary>Gets/sets the limits for panning from the default pan position.</summary>
    </member>
    <member name="P:DriveWorks.Forms.PreviewControl.PreviewCompleteMacroName">
      <summary>Gets/sets the name of the macro invoked by the control when preview generation is finished.</summary>
    </member>
    <member name="P:DriveWorks.Forms.PreviewControl.PreviewDocument">
      <summary>Gets the  specified by the <see cref="P:DriveWorks.Forms.PreviewControl.PreviewDocumentName" /> property.</summary>
    </member>
    <member name="P:DriveWorks.Forms.PreviewControl.PreviewDocumentName">
      <summary>Gets/sets the name of the document to use.</summary>
    </member>
    <member name="P:DriveWorks.Forms.PreviewControl.PreviewEngine">
      <summary>Gets/sets the preview engine to use.</summary>
    </member>
    <member name="P:DriveWorks.Forms.PreviewControl.RotationLimits">
      <summary>Gets/sets the default rotation limits as a struct.</summary>
    </member>
    <member name="P:DriveWorks.Forms.PreviewControl.RotationLimitsValue">
      <summary>Gets/sets the limits for the default-camera's rotation from the default rotation.</summary>
    </member>
    <member name="P:DriveWorks.Forms.PreviewControl.Tags">
      <summary>Gets/sets the tags associated with the models previewed through Autopilot.</summary>
    </member>
    <member name="P:DriveWorks.Forms.PreviewControl.Timeout">
      <summary>Gets/sets the number of seconds to wait for a queued preview to finish before timing out.</summary>
    </member>
    <member name="P:DriveWorks.Forms.PreviewControl.UseRelativePathRules">
      <summary>Gets/sets whether to store the .drive3d files created when using Autopilot Mode in the location specified by the relative path rules in Model Rules or in the
group content folder (legacy).</summary>
    </member>
    <member name="P:DriveWorks.Forms.PreviewControl.UseSWExtensionSuffix">
      <summary>Gets/sets whether to include the SOLIDWORKS file type extension in the file name that will be created when using Autopilot mode.</summary>
    </member>
    <member name="P:DriveWorks.Forms.PreviewControl.ZoomLimits">
      <summary>Gets/sets the default zoom limits as a struct.</summary>
    </member>
    <member name="P:DriveWorks.Forms.PreviewControl.ZoomLimitsValue">
      <summary>Gets/sets the limits for the default-camera's zoom distance.</summary>
    </member>
    <member name="F:DriveWorks.Forms.PreviewControl.AutoCenterProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.PreviewControl.AutopilotPreviewRequestedMacroNameProperty">
      <summary>Provides the proprety store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.PreviewControl.BackgroundClickedMacroNameProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.PreviewControl.BorderStyleProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.PreviewControl.DefaultRotationZoomProperty">
      <summary>Provides the property store for the  property. A pipe delimited value of horizontal rotation (in
degrees), vertical pitch (in degrees) and zoom amount. e.g. 90|45|20</summary>
    </member>
    <member name="F:DriveWorks.Forms.PreviewControl.EnableImageModeProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.PreviewControl.EnableOrthographicProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.PreviewControl.EnablePanProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.PreviewControl.FileNameProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.PreviewControl.GenerationMethodProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.PreviewControl.HARD_LIGHTING_PRESET_NAME">
      <summary>Gets the name of the Hard lighting preset.</summary>
    </member>
    <member name="F:DriveWorks.Forms.PreviewControl.LightingProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.PreviewControl.ModelClickedMacroNameProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.PreviewControl.NONE_LIGHTING_PRESET_NAME">
      <summary>Gets the name of the None lighting preset.</summary>
    </member>
    <member name="F:DriveWorks.Forms.PreviewControl.PanMaxRadiusProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.PreviewControl.PreviewCompleteMacroNameProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.PreviewControl.PreviewDocumentNameProperty">
      <summary>Provides the backing store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.PreviewControl.PreviewEngineProperty">
      <summary>Provides the backing store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.PreviewControl.RotationLimitsProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.PreviewControl.SIMPLE_LIGHTING_PRESET_NAME">
      <summary>Gets the name of the Simple lighting preset.</summary>
    </member>
    <member name="F:DriveWorks.Forms.PreviewControl.SOFT_LIGHTING_PRESET_NAME">
      <summary>Gets the name of the Soft lighting preset.</summary>
    </member>
    <member name="F:DriveWorks.Forms.PreviewControl.TagsProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.PreviewControl.THREE_POINT_LIGHTING_PRESET_NAME">
      <summary>Gets the name of the Three Point lighting preset.</summary>
    </member>
    <member name="F:DriveWorks.Forms.PreviewControl.TimeoutProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.PreviewControl.UseRelativePathRulesProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.PreviewControl.UseSWExtensionSuffixProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.PreviewControl.ZoomLimitsProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="E:DriveWorks.Forms.PreviewControl.PreviewFailed">
      <summary>Event for when model generation fails.</summary>
    </member>
    <member name="E:DriveWorks.Forms.PreviewControl.PreviewInvalidated">
      <summary>Raised whenever the result of  has changed significantly.</summary>
    </member>
    <member name="E:DriveWorks.Forms.PreviewControl.PreviewStarting">
      <summary>Event for when model generation starts</summary>
    </member>
    <member name="E:DriveWorks.Forms.PreviewControl.PreviewSuccess">
      <summary>Event for when model generation finishes successfully.</summary>
    </member>
    <member name="P:DriveWorks.Forms.PreviewRequest.IncludeSWExtensionSuffix">
      <summary>Gets/sets whether to include the SOLIDWORKS file type extension as a suffix in the created file.</summary>
    </member>
    <member name="P:DriveWorks.Forms.PreviewRequest.OutputToRootModelTargetPath">
      <summary>Gets/sets whether to save the result to the same location as the root model's target path. By default this is False and the group content folder will be used
instead.</summary>
    </member>
    <member name="P:DriveWorks.Forms.PreviewRequest.ReleaseDataXml">
      <summary>Gets/sets the XML containing the release data to use to perform the preview.</summary>
    </member>
    <member name="P:DriveWorks.Forms.PreviewResult.AdditionalFilePaths">
      <summary>Gets/sets a list of locations to find supporting files for the 3D Preview.</summary>
    </member>
    <member name="P:DriveWorks.Forms.PreviewResult.PrimaryFilePath">
      <summary>Gets/sets the output location of the .drive3d file.</summary>
    </member>
    <member name="M:DriveWorks.Forms.RenameItem.#ctor(System.String,System.String)">
      <summary>Creates a new instance of the  class.</summary>
      <param name="oldName">Name to replace.</param>
      <param name="newName">Replacement name.</param>
    </member>
    <member name="P:DriveWorks.Forms.RenameItem.NewName">
      <summary>Replacement name.</summary>
    </member>
    <member name="P:DriveWorks.Forms.RenameItem.OldName">
      <summary>Name to replace.</summary>
    </member>
    <member name="M:DriveWorks.Forms.RuleTechnologyAttribute.#ctor(DriveWorks.ProjectRuleTechnology)">
      <summary>Initializes a new instance of the  class.</summary>
      <param name="technology">The technology which is enabled.</param>
    </member>
    <member name="P:DriveWorks.Forms.RuleTechnologyAttribute.Technology">
      <summary>Gets the technology which is enabled.</summary>
    </member>
    <member name="M:DriveWorks.Forms.SimpleColor.FromArgb(System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>Initializes a new instance of the  class.</summary>
      <param name="alpha">The alpha component of the color.</param>
      <param name="red">The red component of the color.</param>
      <param name="green">The green component of the color.</param>
      <param name="blue">The blue component of the color.</param>
    </member>
    <member name="M:DriveWorks.Forms.SimpleColor.FromColor(System.Drawing.Color)">
      <summary>Initializes a new instance of the  class.</summary>
      <param name="color">The GDI color on which to base the simple color.</param>
    </member>
    <member name="M:DriveWorks.Forms.SimpleColor.FromName(System.String)">
      <summary>Initializes a new instance of the  class.</summary>
      <param name="name">The name of the color.</param>
    </member>
    <member name="M:DriveWorks.Forms.SimpleColor.ToColor">
      <summary>Converts the simple color to its GDI representation.</summary>
    </member>
    <member name="M:DriveWorks.Forms.SimpleColor.ToInt32">
      <summary>Converts the color to an integer in the order ARGB.</summary>
    </member>
    <member name="M:DriveWorks.Forms.SimpleColor.ToString">
      <summary>Returns the string version of the color.</summary>
    </member>
    <member name="M:DriveWorks.Forms.SimpleColor.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current object.</summary>
      <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
    </member>
    <member name="M:DriveWorks.Forms.SimpleColor.FromRgb(System.Byte,System.Byte,System.Byte)">
      <summary>Initializes a new instance of the  class.</summary>
      <param name="red">The red component of the color.</param>
      <param name="green">The green component of the color.</param>
      <param name="blue">The blue component of the color.</param>
    </member>
    <member name="M:DriveWorks.Forms.SimpleColor.FromRgb(System.Int32)">
      <summary>Initializes a new instance of the  class.</summary>
      <param name="rgb">An integer containing the red, green, and blue color information.</param>
    </member>
    <member name="P:DriveWorks.Forms.SimpleColor.Alpha">
      <summary>Gets the alpha component of the color.</summary>
    </member>
    <member name="P:DriveWorks.Forms.SimpleColor.Blue">
      <summary>Gets the blue component of the color.</summary>
    </member>
    <member name="P:DriveWorks.Forms.SimpleColor.Green">
      <summary>Gets the green component of the color.</summary>
    </member>
    <member name="P:DriveWorks.Forms.SimpleColor.Name">
      <summary>Gets the display name of the color.</summary>
    </member>
    <member name="P:DriveWorks.Forms.SimpleColor.Red">
      <summary>Gets the red component of the color.</summary>
    </member>
    <member name="M:DriveWorks.Forms.SimpleFont.#ctor(System.String,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="family">The family name of the font.</param>
      <param name="size">The size of the font in points.</param>
      <param name="isBold">Whether the font is displayed in bold face.</param>
      <param name="isItalic">Whether the font is displayed in italics.</param>
      <param name="hasUnderline">Whether the font has an underline.</param>
      <param name="hasStrikethrough">Whether the font has a strikethrough.</param>
    </member>
    <member name="M:DriveWorks.Forms.SimpleFont.ToString">
      <summary>Returns the string version of the font.</summary>
    </member>
    <member name="P:DriveWorks.Forms.SimpleFont.Family">
      <summary>Gets the family name of the font.</summary>
    </member>
    <member name="P:DriveWorks.Forms.SimpleFont.HasStrikethrough">
      <summary>Gets whether the font has a strikethrough.</summary>
    </member>
    <member name="P:DriveWorks.Forms.SimpleFont.HasUnderline">
      <summary>Gets whether the font has an underline.</summary>
    </member>
    <member name="P:DriveWorks.Forms.SimpleFont.IsBold">
      <summary>Gets whether the font is bold.</summary>
    </member>
    <member name="P:DriveWorks.Forms.SimpleFont.IsItalic">
      <summary>Gets whether the font is displayed in italics.</summary>
    </member>
    <member name="P:DriveWorks.Forms.SimpleFont.Size">
      <summary>Gets the size, in points, of the font.</summary>
    </member>
    <member name="M:DriveWorks.Forms.Slider.#ctor">
      <summary>Initializes a new instance of the  type.</summary>
    </member>
    <member name="M:DriveWorks.Forms.Slider.ClearInputValue">
      <summary>Sets the current value to zero.</summary>
    </member>
    <member name="M:DriveWorks.Forms.Slider.GetInputValue">
      <summary>Returns the current value of the control.</summary>
    </member>
    <member name="M:DriveWorks.Forms.Slider.SetInputValue(System.Object)">
      <summary>Sets the current value of the control.</summary>
      <param name="value">The value to set to the input property.</param>
    </member>
    <member name="P:DriveWorks.Forms.Slider.DefaultValue">
      <summary>Gets/sets the default value of the control.</summary>
    </member>
    <member name="P:DriveWorks.Forms.Slider.EffectiveMaximum">
      <summary>Gets the effective maximum value of the spin button.</summary>
    </member>
    <member name="P:DriveWorks.Forms.Slider.EffectiveMinimum">
      <summary>Gets the effective minimum value of the spin button.</summary>
    </member>
    <member name="P:DriveWorks.Forms.Slider.EffectiveValue">
      <summary>Gets the effective value of the spin button.</summary>
    </member>
    <member name="P:DriveWorks.Forms.Slider.Increment">
      <summary>Gets/sets the slider's increment value.</summary>
    </member>
    <member name="P:DriveWorks.Forms.Slider.Maximum">
      <summary>Gets/sets the slider's maximum value.</summary>
    </member>
    <member name="P:DriveWorks.Forms.Slider.Minimum">
      <summary>Gets/sets the slider's minimum value.</summary>
    </member>
    <member name="P:DriveWorks.Forms.Slider.Orientation">
      <summary>Gets/sets the slider orientation.</summary>
    </member>
    <member name="P:DriveWorks.Forms.Slider.ReverseDirection">
      <summary>Gets/Sets whether the direction of the slider is reversed.</summary>
    </member>
    <member name="P:DriveWorks.Forms.Slider.ShowLimits">
      <summary>Gets/sets whether to show the value limits on the control.</summary>
    </member>
    <member name="P:DriveWorks.Forms.Slider.Text">
      <summary>Gets/sets the text shown in the control.</summary>
    </member>
    <member name="P:DriveWorks.Forms.Slider.TextColor">
      <summary>Gets/sets the color used for the control's text.</summary>
    </member>
    <member name="P:DriveWorks.Forms.Slider.TextFont">
      <summary>Gets/sets the font used for the control's text.</summary>
    </member>
    <member name="P:DriveWorks.Forms.Slider.ThumbImage">
      <summary>Gets/Sets the Image which will be used instead of the slider's thumb.</summary>
    </member>
    <member name="P:DriveWorks.Forms.Slider.TrackColor">
      <summary>Gets/Sets the color of the slider's track.</summary>
    </member>
    <member name="P:DriveWorks.Forms.Slider.Value">
      <summary>Gets/sets the current value.</summary>
    </member>
    <member name="F:DriveWorks.Forms.Slider.DefaultValueProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.Slider.EffectiveTextFontProperty">
      <summary>Provides the property store for the effective text font.</summary>
    </member>
    <member name="F:DriveWorks.Forms.Slider.IncrementProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.Slider.MaximumProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.Slider.MinimumProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.Slider.OrientationProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.Slider.ReverseDirectionProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.Slider.ShowLimitsProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.Slider.TextColorProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.Slider.TextFontProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.Slider.TextProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.Slider.ThumbImageProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.Slider.TrackColorProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.Slider.ValueProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.Slider.ValueSourceProperty">
      <summary>Provides the property store for the source value for the  property.</summary>
    </member>
    <member name="P:DriveWorks.Forms.SpecificationHostControl.HostedContext">
      <summary>The current specification context that is being hosted or null.</summary>
    </member>
    <member name="P:DriveWorks.Forms.SpecificationHostControl.InputValues">
      <summary>An optional table that has two columns (Name and Value). The values will be driven into the hosted specification based on the name column.</summary>
    </member>
    <member name="P:DriveWorks.Forms.SpecificationHostControl.OnCancelledMacroName">
      <summary>The name of the macro to execute when the hosted specification is cancelled.</summary>
    </member>
    <member name="P:DriveWorks.Forms.SpecificationHostControl.OnTransitionedMacroName">
      <summary>The name of the macro to execute when the hosted specification is transitioned.</summary>
    </member>
    <member name="P:DriveWorks.Forms.SpecificationHostControl.Value">
      <summary>The resulting value of this control. This will be a table of specification details and specification properties.</summary>
    </member>
    <member name="F:DriveWorks.Forms.SpecificationHostControl.InputValuesProperty">
      <summary>Property for the InputValues property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.SpecificationHostControl.OnCancelledMacroNameProperty">
      <summary>Property for the OnCancelledMacroName property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.SpecificationHostControl.OnTransitionedMacroNameProperty">
      <summary>Property for the OnTransitionedMacroName property.</summary>
    </member>
    <member name="E:DriveWorks.Forms.SpecificationHostControl.HostedContextChanged">
      <summary>Raised when the  value changes.</summary>
    </member>
    <member name="M:DriveWorks.Forms.SpinButton.#ctor">
      <summary>Initializes a new instance of the  type.</summary>
    </member>
    <member name="M:DriveWorks.Forms.SpinButton.ClearInputValue">
      <summary>Sets the current value to zero.</summary>
    </member>
    <member name="M:DriveWorks.Forms.SpinButton.GetInputValue">
      <summary>Returns the current value of the control.</summary>
    </member>
    <member name="M:DriveWorks.Forms.SpinButton.SetInputValue(System.Object)">
      <summary>Sets the current value of the control.</summary>
      <param name="value">The value to set to the input property.</param>
    </member>
    <member name="P:DriveWorks.Forms.SpinButton.DecimalPlaces">
      <summary>Gets/sets the number of decimal places to show.</summary>
    </member>
    <member name="P:DriveWorks.Forms.SpinButton.DefaultValue">
      <summary>Gets/sets the default value of the control.</summary>
    </member>
    <member name="P:DriveWorks.Forms.SpinButton.EffectiveMaximum">
      <summary>Gets the effective maximum value of the spin button.</summary>
    </member>
    <member name="P:DriveWorks.Forms.SpinButton.EffectiveMinimum">
      <summary>Gets the effective minimum value of the spin button.</summary>
    </member>
    <member name="P:DriveWorks.Forms.SpinButton.EffectiveValue">
      <summary>Gets the effective value of the spin button.</summary>
    </member>
    <member name="P:DriveWorks.Forms.SpinButton.Increment">
      <summary>Gets/sets the spin button's increment value.</summary>
    </member>
    <member name="P:DriveWorks.Forms.SpinButton.Maximum">
      <summary>Gets/sets the spin button's maximum value.</summary>
    </member>
    <member name="P:DriveWorks.Forms.SpinButton.Minimum">
      <summary>Gets/sets the spin button's minimum value.</summary>
    </member>
    <member name="P:DriveWorks.Forms.SpinButton.TextColor">
      <summary>Gets/sets the color used for the control's text.</summary>
    </member>
    <member name="P:DriveWorks.Forms.SpinButton.TextFont">
      <summary>Gets/sets the font used for the control's text.</summary>
    </member>
    <member name="P:DriveWorks.Forms.SpinButton.TextHorizontalAlignment">
      <summary>Gets/sets the horizontal alignment of the control's text.</summary>
    </member>
    <member name="P:DriveWorks.Forms.SpinButton.Value">
      <summary>Gets/sets the spin button's current value.</summary>
    </member>
    <member name="F:DriveWorks.Forms.SpinButton.DecimalPlacesProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.SpinButton.DefaultValueProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.SpinButton.EffectiveTextFontProperty">
      <summary>Provides the property store for the effective</summary>
    </member>
    <member name="F:DriveWorks.Forms.SpinButton.IncrementProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.SpinButton.MaximumProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.SpinButton.MinimumProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.SpinButton.TextColorProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.SpinButton.TextFontProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.SpinButton.TextHorizontalAlignmentProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.SpinButton.ValueProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.SpinButton.ValueSourceProperty">
      <summary>Provides the property store for the source value for the  property.</summary>
    </member>
    <member name="M:DriveWorks.Forms.TextBox.#ctor">
      <summary>Initializes a new instance of the  type.</summary>
    </member>
    <member name="M:DriveWorks.Forms.TextBox.ClearInputValue">
      <summary>Sets the control's text to an empty string.</summary>
    </member>
    <member name="M:DriveWorks.Forms.TextBox.GetInputValue">
      <summary>Returns the text value of the control.</summary>
    </member>
    <member name="M:DriveWorks.Forms.TextBox.SetInputValue(System.Object)">
      <summary>Sets the text value of the control.</summary>
      <param name="value">The value to set to the input property.</param>
    </member>
    <member name="P:DriveWorks.Forms.TextBox.CharacterLimit">
      <summary>Gets/sets the number of characters that can appear in the TextBox.</summary>
    </member>
    <member name="P:DriveWorks.Forms.TextBox.DefaultValue">
      <summary>Gets/sets the default value of the control.</summary>
    </member>
    <member name="P:DriveWorks.Forms.TextBox.EffectiveText">
      <summary>Gets the effective text of the text box.</summary>
    </member>
    <member name="P:DriveWorks.Forms.TextBox.HideCharacters">
      <summary>Gets/sets whether or not the textbox should behave like a password TextBox.</summary>
    </member>
    <member name="P:DriveWorks.Forms.TextBox.InputBackgroundColor">
      <summary>Gets/sets the color used for the background of the input area.</summary>
    </member>
    <member name="P:DriveWorks.Forms.TextBox.IsReadOnly">
      <summary>Gets/sets whether the text box is read only or not.</summary>
    </member>
    <member name="P:DriveWorks.Forms.TextBox.Maximum">
      <summary>Gets/sets the text box's maximum value.</summary>
    </member>
    <member name="P:DriveWorks.Forms.TextBox.Minimum">
      <summary>Gets/sets the text box's minimum value.</summary>
    </member>
    <member name="P:DriveWorks.Forms.TextBox.Multiline">
      <summary>Gets/sets whether the text box spans multiple lines.</summary>
    </member>
    <member name="P:DriveWorks.Forms.TextBox.ShowBorder">
      <summary>Gets/sets whether the border of the text box is shown.</summary>
    </member>
    <member name="P:DriveWorks.Forms.TextBox.Text">
      <summary>Gets/sets the text shown in the text box.</summary>
    </member>
    <member name="P:DriveWorks.Forms.TextBox.TextColor">
      <summary>Gets/sets the color used for the control's text.</summary>
    </member>
    <member name="P:DriveWorks.Forms.TextBox.TextFont">
      <summary>Gets/sets the font used for the control's text.</summary>
    </member>
    <member name="P:DriveWorks.Forms.TextBox.TextHorizontalAlignment">
      <summary>Gets/sets the horizontal alignment used on the control's text.</summary>
    </member>
    <member name="P:DriveWorks.Forms.TextBox.WordWrap">
      <summary>Gets/sets whether the text box text is word wrapped when in multiline mode.</summary>
    </member>
    <member name="F:DriveWorks.Forms.TextBox.CharacterLimitProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.TextBox.DefaultValueProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.TextBox.EffectiveTextFontProperty">
      <summary>Provides the property store for the effective text font.</summary>
    </member>
    <member name="F:DriveWorks.Forms.TextBox.HideCharactersProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.TextBox.InputBackgroundColorProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.TextBox.IsReadOnlyProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.TextBox.MaximumProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.TextBox.MinimumProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.TextBox.MultilineProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.TextBox.ShowBorderProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.TextBox.TextColorProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.TextBox.TextFontProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.TextBox.TextHorizontalAlignmentProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.TextBox.TextProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.TextBox.TextSourceProperty">
      <summary>Provides the property store for the source value for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.TextBox.WordWrapProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="M:DriveWorks.Forms.UploadControl.GetAllowedFileExtensions">
      <summary>Gets a list of extensions for the files that are allowed to be uploaded with this control.</summary>
      <returns>A collection of extensions parsed from the  property.</returns>
    </member>
    <member name="M:DriveWorks.Forms.UploadControl.HandleUploadAsync(System.IO.Stream,System.String)">
      <summary>Takes the specified inputs and completes the upload process for this control asynchronously.</summary>
      <returns>Task that will complete when the process is complete.</returns>
      <param name="inputStream">The stream to read the file information from.</param>
      <param name="uploadingFileName">The name of the file as specified by the client.</param>
    </member>
    <member name="P:DriveWorks.Forms.UploadControl.DefaultFileName">
      <summary>Gets/sets the file path to use for the next uploaded file.</summary>
    </member>
    <member name="P:DriveWorks.Forms.UploadControl.DuplicateFileBehavior">
      <summary>Gets/sets how duplicate file names will be handled.</summary>
    </member>
    <member name="P:DriveWorks.Forms.UploadControl.FileFilter">
      <summary>Gets/sets the filter to use when picking a file to upload.</summary>
    </member>
    <member name="P:DriveWorks.Forms.UploadControl.FileSizeLimit">
      <summary>Gets/sets the limit on the size of the file that can be uploaded.</summary>
    </member>
    <member name="P:DriveWorks.Forms.UploadControl.FinalFileName">
      <summary>Gets the resulting file name of the file after saving.</summary>
    </member>
    <member name="P:DriveWorks.Forms.UploadControl.OriginalFileName">
      <summary>Gets the file name of the uploaded file (on the client's machine).</summary>
    </member>
    <member name="P:DriveWorks.Forms.UploadControl.PictureDefault">
      <summary>Gets/sets the location of the default picture to use as the default image for this macro button.</summary>
    </member>
    <member name="P:DriveWorks.Forms.UploadControl.PictureHover">
      <summary>Gets/sets the location of the picture to use as the image for this macro button when it's in a hover state.</summary>
    </member>
    <member name="P:DriveWorks.Forms.UploadControl.PicturePressed">
      <summary>Gets/sets the location of the picture to use as the image for this macro button when it's in a pressed state.</summary>
    </member>
    <member name="P:DriveWorks.Forms.UploadControl.PictureSizeMode">
      <summary>Gets/sets the picture sizing mode for this macro button.</summary>
    </member>
    <member name="P:DriveWorks.Forms.UploadControl.PictureStyle">
      <summary>Gets/sets the picture appearance style for this macro button.</summary>
    </member>
    <member name="P:DriveWorks.Forms.UploadControl.SupportsTooltips">
      <summary>Gets whether this control supports tooltips.</summary>
      <returns>True if this control supports tooltips.</returns>
    </member>
    <member name="P:DriveWorks.Forms.UploadControl.UploadCompleteMacro">
      <summary>Gets/sets the name of the macro to call when uploading of a file is complete.</summary>
    </member>
    <member name="F:DriveWorks.Forms.UploadControl.DefaultFileNameProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.UploadControl.DuplicateFileBehaviorProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.UploadControl.FileFilterProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.UploadControl.FileSizeLimitProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.UploadControl.PictureDefaultProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.UploadControl.PictureHoverProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.UploadControl.PicturePressedProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.UploadControl.PictureSizeModeProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.UploadControl.PictureStyleProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.UploadControl.UploadCompleteMacroProperty">
      <summary>Provides the property store for the  property.</summary>
    </member>
    <member name="P:DriveWorks.Forms.WebFrameControl.SupportsTooltips">
      <summary>Gets whether this control supports tooltips.</summary>
      <returns>True if this control supports tooltips.</returns>
    </member>
    <member name="P:DriveWorks.Forms.WebFrameControl.Url">
      <summary>Gets/sets the URL of the page to display in the control.</summary>
    </member>
    <member name="F:DriveWorks.Forms.WebFrameControl.UrlProperty">
      <summary>Provides the backing store for the  property.</summary>
    </member>
    <member name="T:DriveWorks.Forms.ChildSpecificationRequestEventHandler">
      <summary>Raised when there is a request to show a child specification dialog.</summary>
    </member>
    <member name="T:DriveWorks.Forms.ControlEventHandler">
      <summary>Represents a method which will handle an event for an operation which affects a control.</summary>
    </member>
    <member name="T:DriveWorks.Forms.ControlsEventHandler">
      <summary>Represents a method which will handle an event for an operation which affects one or more controls.</summary>
    </member>
    <member name="T:DriveWorks.Forms.DataModel.IPropertyValueConverter">
      <summary>Provides a mechanism for converting values to and from their native representations in the backing store.</summary>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.IPropertyValueConverter.ToNative(System.Object)">
      <summary>Takes the value from the backing store and converts it to its native type.</summary>
      <returns>A value of the native type.</returns>
      <param name="value">The value from the backing store.</param>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.IPropertyValueConverter.ToStore(System.Object)">
      <summary>Takes a native value, and converts it to one of the types understood by the backing store.</summary>
      <returns>A value in one of the types understood by the backing store.</returns>
      <param name="value">The native value to convert.</param>
    </member>
    <member name="P:DriveWorks.Forms.DataModel.IPropertyValueConverter.NativeValueType">
      <summary>Gets the type of the value as it is when converted.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataModel.IPropertyValueConverter.StoreValueType">
      <summary>Gets the type of the value as it is in the store.</summary>
    </member>
    <member name="T:DriveWorks.Forms.DataModel.InvalidNumberHandling">
      <summary>Controls the way invalid values such as  and <see cref="T:System.Double" /> will get handled in a <see cref="T:DriveWorks.Forms.DataModel.DynamicProperty" />.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataModel.InvalidNumberHandling.AllowInvalidValues">
      <summary>Invalid numbers are allowed.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataModel.InvalidNumberHandling.ResetToDefault">
      <summary>Invalid values will be set to the default value of the .</summary>
    </member>
    <member name="T:DriveWorks.Forms.DataModel.PropertyBehavior">
      <summary>Controls the dynamic behavior of a property.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataModel.PropertyBehavior.FlagDynamicDefault">
      <summary>Determines whether the default state of the property is to be dynamic.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataModel.PropertyBehavior.FlagDynamicAllowed">
      <summary>Determines whether the property is allowed to be dynamic.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataModel.PropertyBehavior.FlagStaticAllowed">
      <summary>Determines whether the property is allowed to be static.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataModel.PropertyBehavior.FlagNoRuleAllowed">
      <summary>Determines whether the property is allowed to have a rule.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataModel.PropertyBehavior.FlagPreventSourceMerge">
      <summary>Determines whether a property stored in the  store should be merged with the
<see cref="F:DriveWorks.Forms.DataModel.StandardStoreOptions.Source" /> store.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataModel.PropertyBehavior.FlagHideFromDesigners">
      <summary>Determines whether a property should be hidden from designers.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataModel.PropertyBehavior.StandardOptionDynamicDisabled">
      <summary>The property is static and is not allowed to be dynamic.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataModel.PropertyBehavior.StandardOptionDynamicDefault">
      <summary>The property is dynamic by default.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataModel.PropertyBehavior.StandardOptionDynamicManual">
      <summary>The property is static by default, but can be manually set to be dynamic.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataModel.PropertyBehavior.StandardOptionDynamicEnforced">
      <summary>The property is dynamic by default and can not be made static.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataModel.PropertyBehavior.StandardOptionDynamicEnforcedNoRule">
      <summary>The property is dynamic by default, can not be made static, and does not and must not have a rule.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataModel.PropertyBehavior.StandardOptionDynamicEnforcedNoMerge">
      <summary>The property is dynamic by default, can not be made static, and must not be merged with the source value</summary>
    </member>
    <member name="T:DriveWorks.Forms.DataModel.StandardStoreOptions">
      <summary>Standard DriveWorks property stores.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataModel.StandardStoreOptions.Source">
      <summary>Identifies the backing store used for the pre-processed principal value of the control.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataModel.StandardStoreOptions.Value">
      <summary>Identifies the backing store used for the post-processed principal value of the control.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataModel.StandardStoreOptions.Minimum">
      <summary>Identifies the backing store used for the minimum value of the control.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataModel.StandardStoreOptions.Maximum">
      <summary>Identifies the backing store used for the maximum value of the control.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataModel.StandardStoreOptions.Increment">
      <summary>Identifies the backing store used principally for the increment value of the control.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataModel.StandardStoreOptions.Enabled">
      <summary>Identifies the backing store used for the enabled value of the control.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataModel.StandardStoreOptions.Visible">
      <summary>Identifies the backing store used for the visible value of the control.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataModel.StandardStoreOptions.MessageCode">
      <summary>Identifies the backing store used for the message code value of the control.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataModel.StandardStoreOptions.ListData">
      <summary>Identifies the backing store used for the list data for the control.</summary>
    </member>
    <member name="T:DriveWorks.Forms.DataModel.DynamicProperty">
      <summary>Represents a dynamic property on a DriveWorks control.</summary>
    </member>
    <member name="T:DriveWorks.Forms.DataModel.DynamicPropertyData">
      <summary>Additional data that used by an instance of .</summary>
    </member>
    <member name="T:DriveWorks.Forms.DataModel.EnumPropertyValueConverter">
      <summary>Provides support for using enumerated values with form controls.</summary>
    </member>
    <member name="T:DriveWorks.Forms.DataModel.PropertyValueConverterAttribute">
      <summary>Marks a CLR type with a corresponding property value converter.</summary>
    </member>
    <member name="T:DriveWorks.Forms.DataModel.PropertyValueConverterBase">
      <summary>Provides a base class to make implementing the  interface easier.</summary>
    </member>
    <member name="T:DriveWorks.Forms.DataModel.RuleChangedEventArgs">
      <summary>Provides event data for the  event.</summary>
    </member>
    <member name="T:DriveWorks.Forms.DataModel.StandardPropertyValueConverters">
      <summary>Provides access to standard property value converters</summary>
    </member>
    <member name="T:DriveWorks.Forms.DataModel.StoreConverter">
      <summary>Provides methods for converting between different types of store values.</summary>
    </member>
    <member name="T:DriveWorks.Forms.DataModel.ValueChangedEventArgs">
      <summary>Provides event data for the  event.</summary>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.DynamicProperty.CanSetIsExtended(DriveWorks.Forms.ControlBase)">
      <summary>Determines whether the property can be extended.</summary>
      <param name="control">The control to check.</param>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.DynamicProperty.GetConverter(System.Type,System.Boolean)">
      <summary>Gets the property value converter for the given CLR type.</summary>
      <returns>The property value converter for the given CLR type, or a null reference if none is found and <paramref name="throwOnError" /> is false.</returns>
      <param name="clrType">The CLR type for which to get a property value converter.</param>
      <param name="throwOnError">True to throw an  if no converter is found, otherwise false.</param>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.DynamicProperty.GetIsExtended(DriveWorks.Forms.ControlBase)">
      <summary>Gets whether the property is extended on the given control.</summary>
      <param name="control">The control to check whether this property is extended or not.</param>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.DynamicProperty.GetStoreValue(DriveWorks.Forms.ControlBase)">
      <summary>Gets the current unconverted value of the property from the specified control.</summary>
      <param name="control">The control from which to get the property value.</param>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.DynamicProperty.GetVersionHistory(DriveWorks.Forms.ControlBase)">
      <summary>Returns the rule and comment history for given control.</summary>
      <param name="control">The control to get the version history of.</param>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.DynamicProperty.IsDynamic(DriveWorks.Forms.ControlBase)">
      <summary>Determines whether the property is dynamic.</summary>
      <param name="control">The control instance on which to check the property.</param>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.DynamicProperty.IsDynamicNotNoRule(DriveWorks.Forms.ControlBase)">
      <summary>Determines whether the property is dynamic, and doesn't have the  flag set.</summary>
      <param name="control">The control instance on which to check the property.</param>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.DynamicProperty.IsRegisteredToControl(DriveWorks.Forms.ControlBase)">
      <summary>Determines whether the given control has this  registered to it.</summary>
      <param name="control">The control to check</param>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.DynamicProperty.OverrideDefaultValue(System.Type,DriveWorks.Forms.DataModel.DynamicProperty,System.Object)">
      <summary>Overrides the default value of the property for the given type, which derives from the type which defines the property.</summary>
      <param name="controlType">The type of the control for which to override the default value.</param>
      <param name="dynamicProperty">The dynamic property to override.</param>
      <param name="defaultValue">The new default value for the specified control type.</param>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.DynamicProperty.RemoveProperty(System.Type,DriveWorks.Forms.DataModel.DynamicProperty)">
      <summary>Removes a dynamic property from the list of properties for the given control.</summary>
      <param name="controlType">The type of the control from which to remove the property.</param>
      <param name="dynamicProperty">The property to remove from the control property list.</param>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.DynamicProperty.SetIsExtended(DriveWorks.Forms.ControlBase,System.Boolean)">
      <summary>Sets whether the property is extended on the given control.</summary>
      <param name="control">The control on which to set the store name for the property.</param>
      <param name="isExtended">True if the property should be extended, otherwise false.</param>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.DynamicProperty.SetValue(DriveWorks.Forms.ControlBase,System.Object)">
      <summary>Sets the value of the property on the specified control.</summary>
      <param name="control">The control on which to set the property.</param>
      <param name="value">The new value of the property.</param>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.DynamicProperty.GetStandardStoreName(System.String,System.Nullable{DriveWorks.Forms.DataModel.StandardStoreOptions})">
      <summary>Gets the reference name that will be used for the specified control name and store option combination.</summary>
      <exception caption="" cref="T:System.ArgumentOutOfRangeException">Thrown when unknown %opt% value is given.</exception>
      <returns>Returns the store name for the specified combination, when <paramref name="opt" /> has a value, otherwise null.</returns>
      <param name="controlName">The name of the control that has the store option.</param>
      <param name="opt">The standard store option to get the reference for.</param>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.DynamicProperty.GetStandardStoreName(System.String,DriveWorks.Forms.DataModel.StandardStoreOptions)">
      <summary>Gets the reference name that will be used for the specified control name and store option combination.</summary>
      <exception caption="" cref="T:System.ArgumentOutOfRangeException">Thrown when unknown %opt% value is given.</exception>
      <returns>Returns the store name for the specified combination, else throws an exception.</returns>
      <param name="controlName">The name of the control that has the store option.</param>
      <param name="opt">The standard store option to get the reference for.</param>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.DynamicProperty.GetStoreName(DriveWorks.Forms.ControlBase)">
      <summary>Gets the store name for a dynamic extended property.</summary>
      <exception caption="" cref="T:System.ArgumentNullException">The control was not specified.The control isn't initialized.The property isn't supported for the specified control, or the property isn't a dynamic extended property.</exception>
      <returns>The store name for the dynamic extended property on the given control.</returns>
      <param name="control">The control for which to get the property's store name.</param>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.DynamicProperty.GetStoreName(System.String)">
      <summary>Gets the store name for a dynamic extended property.</summary>
      <returns>The store name for the dynamic extended property on the given control.</returns>
      <param name="controlName">The name of the control for which to get the property's store name.</param>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.DynamicProperty.GetValue(DriveWorks.Forms.ControlBase)">
      <summary>Gets the current value of the property from the specified control, and converts it to the proper type.</summary>
      <returns>The value of the property, converted using the Converter specified when the property was registered if one was specified.</returns>
      <param name="control">The control from which to get the property value.</param>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.DynamicProperty.GetValue``1(DriveWorks.Forms.ControlBase)">
      <summary>Gets the current value of the property from the specified control, and converts it to the proper type.</summary>
      <returns>The value of the property, converted using the Converter specified when the property was registered if one was specified.</returns>
      <typeparam name="T">The type to which to cast the return value.</typeparam>
      <param name="control">The control from which to get the property value.</param>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.DynamicProperty.Register(System.Type,DriveWorks.Forms.DataModel.StandardStoreOptions,System.String,System.String,System.String,System.String,System.Object,DriveWorks.Forms.DataModel.PropertyBehavior,System.Type)">
      <summary>Registers a dynamic property for the given type of control.</summary>
      <returns>A dynamic property for the control.</returns>
      <param name="controlType">The type of the control.</param>
      <param name="standardStore">One of a number of predefined property backing stores.</param>
      <param name="serializeAs">The name of the property used to serialize/deserialize the property.</param>
      <param name="displayName">The name of the property as it should be shown in UI.</param>
      <param name="description">The description of the property which should be shown in UI.</param>
      <param name="category">The category of the property when shown in UI.</param>
      <param name="defaultValue">The default value of the property.</param>
      <param name="behavior">The behavior of the property, i.e. whether it is static or dynamic.</param>
      <param name="clrType">The CLR type of the value stored by the property.</param>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.DynamicProperty.Register(System.Type,DriveWorks.Forms.DataModel.StandardStoreOptions,System.String,System.Object,DriveWorks.Forms.DataModel.PropertyBehavior,System.Type,DriveWorks.Forms.DataModel.DynamicPropertyData)">
      <summary>Registers a dynamic property for the given type of control.</summary>
      <returns>A dynamic property for the control.</returns>
      <param name="controlType">The type of the control.</param>
      <param name="standardStore">One of a number of predefined property backing stores.</param>
      <param name="serializeAs">The name of the property used to serialize/deserialize the property.</param>
      <param name="defaultValue">The default value of the property.</param>
      <param name="behavior">The behavior of the property, i.e. whether it is static or dynamic.</param>
      <param name="clrType">The CLR type of the value stored by the property.</param>
      <param name="data">Additional settings for the property.</param>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.DynamicProperty.Register(System.Type,System.String,System.String,System.String,System.String,System.Object,DriveWorks.Forms.DataModel.PropertyBehavior,System.Type)">
      <summary>Registers a dynamic property, which has the same backing store name as serialization name, for the given type of control.</summary>
      <returns>A dynamic property for the control.</returns>
      <param name="controlType">The type of the control.</param>
      <param name="storeName">The name of a custom backing data store.</param>
      <param name="displayName">The name of the property as it should be shown in UI.</param>
      <param name="description">The description of the property which should be shown in UI.</param>
      <param name="category">The category of the property when shown in UI.</param>
      <param name="defaultValue">The default value of the property.</param>
      <param name="behavior">The behavior of the property, i.e. whether it is static or dynamic.</param>
      <param name="clrType">The CLR type of the value stored by the property.</param>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.DynamicProperty.Register(System.Type,System.String,System.Object,DriveWorks.Forms.DataModel.PropertyBehavior,System.Type,DriveWorks.Forms.DataModel.DynamicPropertyData)">
      <summary>Registers a dynamic property, which has the same backing store name as serialization name, for the given type of control.</summary>
      <returns>A dynamic property for the control.</returns>
      <param name="controlType">The type of the control.</param>
      <param name="storeName">The name of a custom backing data store.</param>
      <param name="defaultValue">The default value of the property.</param>
      <param name="behavior">The behavior of the property, i.e. whether it is static or dynamic.</param>
      <param name="clrType">The CLR type of the value stored by the property.</param>
      <param name="data">Additional settings for the property.</param>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.DynamicProperty.Register(System.Type,System.String,System.String,System.String,System.String,System.String,System.Object,DriveWorks.Forms.DataModel.PropertyBehavior,System.Type)">
      <summary>Registers a dynamic property for the given type of control.</summary>
      <returns>A dynamic property for the control.</returns>
      <param name="controlType">The type of the control.</param>
      <param name="storeName">The name of a custom backing data store.</param>
      <param name="serializeAs">The name of the property used to serialize/deserialize the property.</param>
      <param name="displayName">The name of the property as it should be shown in UI.</param>
      <param name="description">The description of the property which should be shown in UI.</param>
      <param name="category">The category of the property when shown in UI.</param>
      <param name="defaultValue">The default value of the property.</param>
      <param name="behavior">The behavior of the property, i.e. whether it is static or dynamic.</param>
      <param name="clrType">The CLR type of the value stored by the property.</param>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.DynamicProperty.Register(System.Type,System.String,System.String,System.Object,DriveWorks.Forms.DataModel.PropertyBehavior,System.Type,DriveWorks.Forms.DataModel.DynamicPropertyData)">
      <summary>Registers a dynamic property for the given type of control.</summary>
      <returns>A dynamic property for the control.</returns>
      <param name="controlType">The type of the control.</param>
      <param name="storeName">The name of a custom backing data store.</param>
      <param name="serializeAs">The name of the property used to serialize/deserialize the property.</param>
      <param name="defaultValue">The default value of the property.</param>
      <param name="behavior">The behavior of the property, i.e. whether it is static or dynamic.</param>
      <param name="clrType">The CLR type of the value stored by the property.</param>
      <param name="data">Additional settings for the property.</param>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.DynamicProperty.RegisterStatic(System.Type,System.String,System.String,System.String,System.String,System.String,System.Object,System.Type)">
      <summary>Registers a static property, which has the same backing store name as serialization name, for the given type of control.</summary>
      <returns>A dynamic property for the control.</returns>
      <param name="controlType">The type of the control.</param>
      <param name="storeName">The name of a custom backing data store.</param>
      <param name="serializeAs">The name of the property used to serialize/deserialize the property.</param>
      <param name="displayName">The name of the property as it should be shown in UI.</param>
      <param name="description">The description of the property which should be shown in UI.</param>
      <param name="category">The category of the property when shown in UI.</param>
      <param name="defaultValue">The default value of the property.</param>
      <param name="clrType">The CLR type of the value stored by the property.</param>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.DynamicProperty.RegisterStatic(System.Type,System.String,System.String,System.String,System.String,System.Object,System.Type)">
      <summary>Registers a static property, which has the same backing store name as serialization name, for the given type of control.</summary>
      <returns>A dynamic property for the control.</returns>
      <param name="controlType">The type of the control.</param>
      <param name="storeName">The name of a custom backing data store.</param>
      <param name="displayName">The name of the property as it should be shown in UI.</param>
      <param name="description">The description of the property which should be shown in UI.</param>
      <param name="category">The category of the property when shown in UI.</param>
      <param name="defaultValue">The default value of the property.</param>
      <param name="clrType">The CLR type of the value stored by the property.</param>
    </member>
    <member name="P:DriveWorks.Forms.DataModel.DynamicProperty.Behavior">
      <summary>Controls the dynamic behavior of the property.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataModel.DynamicProperty.Category">
      <summary>Gets the category associated with the property.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataModel.DynamicProperty.Converter">
      <summary>Gets the converter which handles moving the property value between the store and the control.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataModel.DynamicProperty.CustomStoreName">
      <summary>Gets the name of the property in a custom store if the property isn't mapped on to a standard store.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataModel.DynamicProperty.DefaultValue">
      <summary>Gets the default value of the property.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataModel.DynamicProperty.Description">
      <summary>Gets a localized description of the property.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataModel.DynamicProperty.DisplayName">
      <summary>Gets a localized display name for the property.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataModel.DynamicProperty.InvalidNumberHandling">
      <summary>Gets how invalid values (such as ) are treated in this property.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataModel.DynamicProperty.LegacyBehaviorDefault">
      <summary>Gets the default value to use if this is a legacy behaviour that is now being exposed in a property.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataModel.DynamicProperty.PropertyTypes">
      <summary>The semantic types of this property.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataModel.DynamicProperty.SerializeAs">
      <summary>Gets the name of the property used for XML serialization/deserialization.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataModel.DynamicProperty.StandardStoreOption">
      <summary>Gets the standard store to which the property is mapped if it is mapped to a standard store.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataModel.DynamicPropertyData.Category">
      <summary>Gets and sets the category associated with the property.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataModel.DynamicPropertyData.Description">
      <summary>Gets and sets a localized description of the property.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataModel.DynamicPropertyData.DisplayName">
      <summary>Gets and sets a localized display name for the property.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataModel.DynamicPropertyData.InvalidNumberHandling">
      <summary>Gets/sets whether  values are allowed in this property (only applies to <see cref="T:System.Double" /> values).</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataModel.DynamicPropertyData.IsLocked">
      <summary>Determines if the object has been locked.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataModel.DynamicPropertyData.PropertyTypes">
      <summary>The semantic types that apply to the property.</summary>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.EnumPropertyValueConverter.#ctor(System.Type)">
      <summary>Initializes a new instance of the  class.</summary>
      <param name="nativeType">The type of the enumeration supported by the instance.</param>
    </member>
    <member name="P:DriveWorks.Forms.DataModel.EnumPropertyValueConverter.NativeValueType">
      <summary>Gets the type of the value as it is when converted.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataModel.EnumPropertyValueConverter.StoreValueType">
      <summary>Gets the type of the value as it is when converted.</summary>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.PropertyValueConverterAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the .</summary>
      <param name="converterType">The type of the property value converter which handles the marked CLR type.</param>
    </member>
    <member name="P:DriveWorks.Forms.DataModel.PropertyValueConverterAttribute.ConverterType">
      <summary>Gets the type of the property value converter which handles the marked CLR type.</summary>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.RuleChangedEventArgs.#ctor(DriveWorks.Forms.DataModel.DynamicProperty,System.String,System.String)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="dp">The property which has changed.</param>
      <param name="oldRule">The rule for the property before it was changed.</param>
      <param name="newRule">The rule for the property after it was changed.</param>
    </member>
    <member name="P:DriveWorks.Forms.DataModel.RuleChangedEventArgs.NewRule">
      <summary>Gets the rule for the property as it after the change.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataModel.RuleChangedEventArgs.OldRule">
      <summary>Gets the rule for the property as it was before the change.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataModel.RuleChangedEventArgs.Property">
      <summary>Gets the property that was changed.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataModel.StandardPropertyValueConverters.BooleanConverter">
      <summary>Gets a converter suitable for use with boolean properties.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataModel.StandardPropertyValueConverters.DateTimeConverter">
      <summary>Gets a converter suitable for use with date/time properties.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataModel.StandardPropertyValueConverters.DoubleConverter">
      <summary>Gets a converter suitable for use with numeric properties.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataModel.StandardPropertyValueConverters.IntegerConverter">
      <summary>Gets a converter suitable for use with interger properties.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataModel.StandardPropertyValueConverters.SimpleColorConverter">
      <summary>Gets a converter suitable for use with color properties.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataModel.StandardPropertyValueConverters.SimpleFontConverter">
      <summary>Gets a converter suitable for use with font properties.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataModel.StandardPropertyValueConverters.StringArrayConverter">
      <summary>Gets a converter suitable for use with properties which get and set arrays of strings.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataModel.StandardPropertyValueConverters.StringConverter">
      <summary>Gets a converter suitable for use with string properties.</summary>
    </member>
    <member name="F:DriveWorks.Forms.DataModel.StandardPropertyValueConverters.TableValueConverter">
      <summary>Gets a converter suitable for use with properties which get and set tables of values.</summary>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.StoreConverter.ConvertBooleanToDateTime(System.Object)">
      <summary>Converts a boolean to a date/time.</summary>
      <returns>A date/time.</returns>
      <param name="value">The source value.</param>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.StoreConverter.ConvertBooleanToDouble(System.Object)">
      <summary>Converts a boolean to a double.</summary>
      <returns>A double.</returns>
      <param name="value">The source value.</param>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.StoreConverter.ConvertBooleanToString(System.Object)">
      <summary>Converts a boolean to a string.</summary>
      <returns>A string.</returns>
      <param name="value">The source value.</param>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.StoreConverter.ConvertDateTimeToBoolean(System.Object)">
      <summary>Converts a date/time to a boolean.</summary>
      <returns>A boolean.</returns>
      <param name="value">The source value.</param>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.StoreConverter.ConvertDateTimeToDouble(System.Object)">
      <summary>Converts a date/time to a double.</summary>
      <returns>A double.</returns>
      <param name="value">The source value.</param>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.StoreConverter.ConvertDateTimeToString(System.Object)">
      <summary>Converts a date/time to a string.</summary>
      <returns>A date/time.</returns>
      <param name="value">The source value.</param>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.StoreConverter.ConvertDoubleToBoolean(System.Object)">
      <summary>Converts a double to a boolean.</summary>
      <returns>A boolean.</returns>
      <param name="value">The value to convert.</param>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.StoreConverter.ConvertDoubleToDateTime(System.Object)">
      <summary>Converts a double to a date/time.</summary>
      <returns>A date/time.</returns>
      <param name="value">The source value.</param>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.StoreConverter.ConvertDoubleToString(System.Object)">
      <summary>Converts a double to a string.</summary>
      <returns>A string.</returns>
      <param name="value">The source value.</param>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.StoreConverter.ConvertStringToBoolean(System.Object)">
      <summary>Converts the specified string to a boolean.</summary>
      <returns>A boolean.</returns>
      <param name="value">The source value.</param>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.StoreConverter.ConvertStringToDateTime(System.Object)">
      <summary>Converts the specified string to a date-time.</summary>
      <returns>A date/time.</returns>
      <param name="value">The source value.</param>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.StoreConverter.ConvertStringToDouble(System.Object)">
      <summary>Converts the specified string to a double.</summary>
      <returns>A double.</returns>
      <param name="value">The source value.</param>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.StoreConverter.ConvertStringToTableValue(System.Object)">
      <summary>Converts the specified string to a table.</summary>
      <returns>A table.</returns>
      <param name="value">The source value.</param>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.StoreConverter.ConvertTableToBoolean(System.Object)">
      <summary>Converts a table to a boolean.</summary>
      <returns>A table.</returns>
      <param name="value">The source value.</param>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.StoreConverter.ConvertTableToDateTime(System.Object)">
      <summary>Converts a table to a date/time.</summary>
      <returns>A table.</returns>
      <param name="value">The source value.</param>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.StoreConverter.ConvertTableToDouble(System.Object)">
      <summary>Converts a table to a double.</summary>
      <returns>A table.</returns>
      <param name="value">The source value.</param>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.StoreConverter.ConvertTableToString(System.Object)">
      <summary>Converts a table to a string.</summary>
      <returns>A table.</returns>
      <param name="value">The source value.</param>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.StoreConverter.ConvertToArrayValue(System.String)">
      <summary>Converts the specified string to a IArrayValue.</summary>
      <returns>A IArrayValue.</returns>
      <param name="value">The source value.</param>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.StoreConverter.ConvertToString(Titan.Rules.Execution.IArrayValue)">
      <summary>Converts a IArrayValue to a string.</summary>
      <returns>A string.</returns>
      <param name="value">The source value.</param>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.StoreConverter.ConvertTypeForDriveWorks(System.Object)">
      <summary>Converts the specified value to a DriveWorks safe value.</summary>
      <returns>The safe version of the value.</returns>
      <param name="value">The value to convert.</param>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.StoreConverter.GetValueType(System.Object,System.Boolean)">
      <summary>Gets the store value type for the specified value.</summary>
      <returns>The store value type of the specified value.</returns>
      <param name="value">The value whose type is to be determined.</param>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.StoreConverter.Convert(System.Object,DriveWorks.Forms.StoreValueType)">
      <summary>Converts the specified value from its current type to the specified type.</summary>
      <returns>The converted value.</returns>
      <param name="value">The value to convert.</param>
      <param name="destinationType">The destination type.</param>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.StoreConverter.Convert(System.Object,DriveWorks.Forms.StoreValueType,DriveWorks.Forms.StoreValueType)">
      <summary>Converts the specified value from its current type to the specified type.</summary>
      <returns>The converted value.</returns>
      <param name="value">The value to convert.</param>
      <param name="sourceType">The source type of the value.</param>
      <param name="destinationType">The destination type.</param>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.ValueChangedEventArgs.#ctor(DriveWorks.Forms.DataModel.DynamicProperty,System.Object,System.Object)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="dp">The property which has changed.</param>
      <param name="oldValue">The value of the property before it was changed.</param>
      <param name="newValue">The value of the property after it was changed.</param>
    </member>
    <member name="P:DriveWorks.Forms.DataModel.ValueChangedEventArgs.NewValue">
      <summary>Gets the value of the property as it after the change.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataModel.ValueChangedEventArgs.OldValue">
      <summary>Gets the value of the property as it was before the change.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataModel.ValueChangedEventArgs.Property">
      <summary>Gets the property that was changed.</summary>
    </member>
    <member name="T:DriveWorks.Forms.DataModel.RuleChangedEventHandler">
      <summary>Represents the method that will handle a rule changed event.</summary>
    </member>
    <member name="T:DriveWorks.Forms.DataModel.ValueChangedEventHandler">
      <summary>Represents the method that will handle a value changed event.</summary>
    </member>
    <member name="T:DriveWorks.Forms.DataModel.Serialization.ControlData">
      <summary>Provides the data required to build a control.</summary>
    </member>
    <member name="T:DriveWorks.Forms.DataModel.Serialization.ControlDeserializer">
      <summary>Provides support for deserializing controls from their XML representation.</summary>
    </member>
    <member name="T:DriveWorks.Forms.DataModel.Serialization.PropertyData">
      <summary>Provides the data required by a property on a control.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataModel.Serialization.ControlData.Index">
      <summary>Index of the control.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataModel.Serialization.ControlData.Name">
      <summary>The name of the control.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataModel.Serialization.ControlData.Properties">
      <summary>Information about the data assigned to properties of the instantiated control.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataModel.Serialization.ControlData.Type">
      <summary>The type of the control.</summary>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.Serialization.ControlDeserializer.Deserialize(System.Xml.XmlReader,DriveWorks.Forms.DataModel.Serialization.ControlTypeResolverDelegate,System.Boolean)">
      <summary>Deserializes the control in the specified XML reader.</summary>
      <returns>The deserialized control data.</returns>
      <param name="reader">The XML reader which is positioned before the start of the control element.</param>
      <param name="typeResolver">The type resolver used to retrieve CLR types for controls.</param>
      <param name="deserializeInvariant">True to deserialize the control property values invariantly, otherwise False to deserialize them using the current culture.</param>
    </member>
    <member name="M:DriveWorks.Forms.DataModel.Serialization.PropertyData.#ctor(System.String,DriveWorks.Forms.DataModel.DynamicProperty)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="name">The name of the property.</param>
      <param name="dp">The instance of the property.</param>
    </member>
    <member name="P:DriveWorks.Forms.DataModel.Serialization.PropertyData.Comment">
      <summary>The comment assigned to the property, if applicable.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataModel.Serialization.PropertyData.DynamicProperty">
      <summary>A reference to the control property itself.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataModel.Serialization.PropertyData.IsStatic">
      <summary>Whether or not the property is marked as static (no rule)</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataModel.Serialization.PropertyData.PropertyName">
      <summary>The name of the property.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataModel.Serialization.PropertyData.Rule">
      <summary>The rule assigned to the property, if applicable.</summary>
    </member>
    <member name="P:DriveWorks.Forms.DataModel.Serialization.PropertyData.Value">
      <summary>The value of the property, if applicable.</summary>
    </member>
    <member name="T:DriveWorks.Forms.DataModel.Serialization.ControlTypeResolverDelegate">
      <summary>Represents a method which can resolve a control type based on its plugin-assembly qualified type name.</summary>
      <returns>The type of the control or a null reference if no control was found.</returns>
    </member>
    <member name="T:DriveWorks.GroupMaintenance.AddGroupUserToTeamAction.AddGroupUserToTeamStatus">
      <summary>Presents the status of a .</summary>
    </member>
    <member name="T:DriveWorks.GroupMaintenance.CopyCapturedComponentAction.CopyCapturedComponentStatus">
      <summary>Presents the status of a .</summary>
    </member>
    <member name="T:DriveWorks.GroupMaintenance.CopyFileAction.CopyFileActionStatus">
      <summary>Presents the status of a .</summary>
    </member>
    <member name="T:DriveWorks.GroupMaintenance.CopyGroupConnectorAction.CopyConnectorStatus">
      <summary>Presents the status of a .</summary>
    </member>
    <member name="T:DriveWorks.GroupMaintenance.CopyGroupTableAction.CopyGroupTableStatus">
      <summary>Presents the status of a .</summary>
    </member>
    <member name="T:DriveWorks.GroupMaintenance.CopyGroupTeamAction.CopyGroupTeamStatus">
      <summary>Presents the status of a .</summary>
    </member>
    <member name="T:DriveWorks.GroupMaintenance.CopyGroupTeamGroupTablePermissionAction.CopyGroupTablePermisionStatus">
      <summary>Presents the status of a .</summary>
    </member>
    <member name="T:DriveWorks.GroupMaintenance.CopyGroupTeamProjectPermissionAction.CopyProjectPermisionStatus">
      <summary>Presents the status of a .</summary>
    </member>
    <member name="T:DriveWorks.GroupMaintenance.CopyGroupUserAction.CopyUserStatus">
      <summary>Presents the status of a .</summary>
    </member>
    <member name="T:DriveWorks.GroupMaintenance.CopyProjectDetailsAction.CopyProjectDetailsStatus">
      <summary>Presents the status of a .</summary>
    </member>
    <member name="T:DriveWorks.GroupMaintenance.CopySpecificationsAction.CopySpecificationsStatus">
      <summary>Presents the status of a .</summary>
    </member>
    <member name="T:DriveWorks.GroupMaintenance.CreateDirectoryAction.CreateDirectoryStatus">
      <summary>Presents the status of a .</summary>
    </member>
    <member name="T:DriveWorks.GroupMaintenance.RemapComponentsAction.RemapComponentsStatus">
      <summary>Presents the status of a .</summary>
    </member>
    <member name="T:DriveWorks.GroupMaintenance.RemapGroupFoldersAction.RemapGroupFoldersStatus">
      <summary>Presents the status of a .</summary>
    </member>
    <member name="T:DriveWorks.GroupMaintenance.AddGroupUserToTeamAction">
      <summary>Action that will add a user to a team.</summary>
    </member>
    <member name="T:DriveWorks.GroupMaintenance.ClearTempPackAndGoSecurityAction">
      <summary>Action that will clean up pack and go security information that was added as part of the process.</summary>
    </member>
    <member name="T:DriveWorks.GroupMaintenance.CopyCapturedComponentAction">
      <summary>Action that will copy a captured component.</summary>
    </member>
    <member name="T:DriveWorks.GroupMaintenance.CopyFileAction">
      <summary>Action that will copy a file.</summary>
    </member>
    <member name="T:DriveWorks.GroupMaintenance.CopyGroupConnectorAction">
      <summary>Action that will copy a group connector.</summary>
    </member>
    <member name="T:DriveWorks.GroupMaintenance.CopyGroupOptions">
      <summary>Provides a set of options to be used in  and <see cref="T:DriveWorks.GroupMaintenance.PackageGroupProcess" />.</summary>
    </member>
    <member name="T:DriveWorks.GroupMaintenance.CopyGroupProcess">
      <summary>Provides a mechanism for copying information from one group to another.</summary>
    </member>
    <member name="T:DriveWorks.GroupMaintenance.CopyGroupTableAction">
      <summary>Action that will copy a group table.</summary>
    </member>
    <member name="T:DriveWorks.GroupMaintenance.CopyGroupTeamAction">
      <summary>Action that will copy a team.</summary>
    </member>
    <member name="T:DriveWorks.GroupMaintenance.CopyGroupTeamGroupTablePermissionAction">
      <summary>Action that will copy a team table permission.</summary>
    </member>
    <member name="T:DriveWorks.GroupMaintenance.CopyGroupTeamProjectPermissionAction">
      <summary>Action that will team project permission.</summary>
    </member>
    <member name="T:DriveWorks.GroupMaintenance.CopyGroupUserAction">
      <summary>Action that will copy a user.</summary>
    </member>
    <member name="T:DriveWorks.GroupMaintenance.CopyProjectDetailsAction">
      <summary>Action that will copy project registration information.</summary>
    </member>
    <member name="T:DriveWorks.GroupMaintenance.CopyProjectRuleHistoryAction">
      <summary>Action that will copy rule history.</summary>
    </member>
    <member name="T:DriveWorks.GroupMaintenance.CopyReleasedComponents">
      <summary>Action that will copy component release information.</summary>
    </member>
    <member name="T:DriveWorks.GroupMaintenance.CopySpecificationsAction">
      <summary>Action that will copy specification information.</summary>
    </member>
    <member name="T:DriveWorks.GroupMaintenance.CreateDirectoryAction">
      <summary>Action that will create a directory.</summary>
    </member>
    <member name="T:DriveWorks.GroupMaintenance.DirectoryStorageItemModel">
      <summary>Represents a directory in a file system.</summary>
    </member>
    <member name="T:DriveWorks.GroupMaintenance.FilePickingOptions">
      <summary>Represents a set of choices for selecting files.</summary>
    </member>
    <member name="T:DriveWorks.GroupMaintenance.PackageGroupDirectoryAction">
      <summary>Action that will create a drivepkg from a directory.</summary>
    </member>
    <member name="T:DriveWorks.GroupMaintenance.PackageGroupProcess">
      <summary>Contains the implemented code for packaging a group.</summary>
    </member>
    <member name="T:DriveWorks.GroupMaintenance.ProcessActionBase">
      <summary>Provides a base for all actions used in maintenance processes.</summary>
    </member>
    <member name="T:DriveWorks.GroupMaintenance.RemapComponentsAction">
      <summary>Action that will remap component paths.</summary>
    </member>
    <member name="T:DriveWorks.GroupMaintenance.RemapGroupFoldersAction">
      <summary>Action that will remap group folder paths.</summary>
    </member>
    <member name="T:DriveWorks.GroupMaintenance.StatusMessageEventArgs">
      <summary>Event args that describe a status message.</summary>
    </member>
    <member name="T:DriveWorks.GroupMaintenance.StorageItemModel">
      <summary>Represents a file or folder on disk.</summary>
    </member>
    <member name="M:DriveWorks.GroupMaintenance.AddGroupUserToTeamAction.Execute(DriveWorks.GroupMaintenance.ReportMethod)">
      <summary>Executes this action.</summary>
      <returns>False if there is a critical error that means the entire transfer process should end.</returns>
      <param name="report">A method that can be used for reporting status.</param>
    </member>
    <member name="M:DriveWorks.GroupMaintenance.AddGroupUserToTeamAction.GetCanExecute(System.Boolean)">
      <summary>Checks to see if the action can be executed or not.</summary>
      <returns>True if it can execute.</returns>
      <param name="useCache">Whether or not he value needs to be re-evaluated from a last attempt.</param>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.AddGroupUserToTeamAction.Status">
      <summary>The current status of the action.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.AddGroupUserToTeamAction.StatusMessage">
      <summary>The current human readable status of this action.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.AddGroupUserToTeamAction.WillExecute">
      <summary>Returns whether or not this action wants to execute.</summary>
      <returns>True if it this action wants to execute.</returns>
    </member>
    <member name="M:DriveWorks.GroupMaintenance.ClearTempPackAndGoSecurityAction.Execute(DriveWorks.GroupMaintenance.ReportMethod)">
      <summary>Executes this action.</summary>
      <returns>False if there is a critical error that means the entire transfer process should end.</returns>
      <param name="report">A method that can be used for reporting status.</param>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.ClearTempPackAndGoSecurityAction.StatusMessage">
      <summary>The current human readable status of this action.</summary>
    </member>
    <member name="M:DriveWorks.GroupMaintenance.CopyCapturedComponentAction.Execute(DriveWorks.GroupMaintenance.ReportMethod)">
      <summary>Executes this action.</summary>
      <returns>False if there is a critical error that means the entire transfer process should end.</returns>
      <param name="report">A method that can be used for reporting status.</param>
    </member>
    <member name="M:DriveWorks.GroupMaintenance.CopyCapturedComponentAction.GetCanExecute(System.Boolean)">
      <summary>Checks to see if the action can be executed or not.</summary>
      <returns>True if it can execute.</returns>
      <param name="useCache">Whether or not he value needs to be re-evaluated from a last attempt.</param>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.CopyCapturedComponentAction.Status">
      <summary>The current status of the action.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.CopyCapturedComponentAction.StatusMessage">
      <summary>The current human readable status of this action.</summary>
    </member>
    <member name="M:DriveWorks.GroupMaintenance.CopyFileAction.Execute(DriveWorks.GroupMaintenance.ReportMethod)">
      <summary>Executes this action.</summary>
      <returns>False if there is a critical error that means the entire transfer process should end.</returns>
      <param name="report">A method that can be used for reporting status.</param>
    </member>
    <member name="M:DriveWorks.GroupMaintenance.CopyFileAction.GetCanExecute(System.Boolean)">
      <summary>Checks to see if the action can be executed or not.</summary>
      <returns>True if it can execute.</returns>
      <param name="useCache">Whether or not he value needs to be re-evaluated from a last attempt.</param>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.CopyFileAction.ErrorMessage">
      <summary>An error message from attempting to read / copy the file.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.CopyFileAction.SourceFile">
      <summary>The file to be copied.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.CopyFileAction.Status">
      <summary>The current status of the action.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.CopyFileAction.StatusMessage">
      <summary>The current human readable status of this action.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.CopyFileAction.TargetFile">
      <summary>The path to place the file.</summary>
    </member>
    <member name="M:DriveWorks.GroupMaintenance.CopyGroupConnectorAction.Execute(DriveWorks.GroupMaintenance.ReportMethod)">
      <summary>Executes this action.</summary>
      <returns>False if there is a critical error that means the entire transfer process should end.</returns>
      <param name="report">A method that can be used for reporting status.</param>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.CopyGroupConnectorAction.Status">
      <summary>The current status of the action.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.CopyGroupConnectorAction.StatusMessage">
      <summary>The current human readable status of this action.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.CopyGroupOptions.CapturedComponents">
      <summary>A collection of captured components that will be copied.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.CopyGroupOptions.CopyGroupConnectors">
      <summary>Whether or not all group connectors will be copied over.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.CopyGroupOptions.CopyNewSecurityObjects">
      <summary>Whether or not new users and teams will be copied over.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.CopyGroupOptions.CopyReleaseData">
      <summary>Whether or not release data will be copied.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.CopyGroupOptions.CopyReleaseDataReports">
      <summary>Whether or not release reports will be copied.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.CopyGroupOptions.CopySpecificationReports">
      <summary>Whether or not specification's reports will be copied.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.CopyGroupOptions.CopySpecifications">
      <summary>Whether or not specifications will be copied.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.CopyGroupOptions.CopyTasks">
      <summary>Whether or not specification tasks will be copied.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.CopyGroupOptions.FileOptions">
      <summary>Gets/sets file copying options.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.CopyGroupOptions.GroupTables">
      <summary>A collection of group tables that will be copied.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.CopyGroupOptions.ProjectRuleRevisions">
      <summary>A collection projects for which rule revisions will be copied.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.CopyGroupOptions.Projects">
      <summary>A collection of projects to copy.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.CopyGroupOptions.TargetFolder">
      <summary>The target folder to copy the group and it's files to.</summary>
    </member>
    <member name="M:DriveWorks.GroupMaintenance.CopyGroupProcess.CheckStopped">
      <summary>Checks to see if the process is canceled.</summary>
      <returns>If the process is canceled.</returns>
    </member>
    <member name="M:DriveWorks.GroupMaintenance.CopyGroupProcess.CreateCopyGroupProcess(DriveWorks.Group,DriveWorks.Group,DriveWorks.GroupMaintenance.CopyGroupOptions)">
      <summary>Creates a new instance of the .</summary>
      <param name="sourceGroup">The source group.</param>
      <param name="targetGroup">The target group.</param>
      <param name="options">The options to use.</param>
    </member>
    <member name="M:DriveWorks.GroupMaintenance.CopyGroupProcess.GetActions">
      <summary>Gets a collection of all actions.</summary>
    </member>
    <member name="M:DriveWorks.GroupMaintenance.CopyGroupProcess.Start">
      <summary>Starts the process of copying a group.</summary>
    </member>
    <member name="M:DriveWorks.GroupMaintenance.CopyGroupProcess.StopCopy">
      <summary>Stops the process from executing (if it was).</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.CopyGroupProcess.Actions">
      <summary>The current actions to be executed.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.CopyGroupProcess.IsStopped">
      <summary>Whether or no the process has been stopped.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.CopyGroupProcess.SourceGroup">
      <summary>The source group to copy from.</summary>
    </member>
    <member name="E:DriveWorks.GroupMaintenance.CopyGroupProcess.StatusMessage">
      <summary>Raised whenever there is a status message event from the process.</summary>
    </member>
    <member name="M:DriveWorks.GroupMaintenance.CopyGroupTableAction.Execute(DriveWorks.GroupMaintenance.ReportMethod)">
      <summary>Executes this action.</summary>
      <returns>False if there is a critical error that means the entire transfer process should end.</returns>
      <param name="report">A method that can be used for reporting status.</param>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.CopyGroupTableAction.Status">
      <summary>The current status of the action.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.CopyGroupTableAction.StatusMessage">
      <summary>The current human readable status of this action.</summary>
    </member>
    <member name="M:DriveWorks.GroupMaintenance.CopyGroupTeamAction.Execute(DriveWorks.GroupMaintenance.ReportMethod)">
      <summary>Executes this action.</summary>
      <returns>False if there is a critical error that means the entire transfer process should end.</returns>
      <param name="report">A method that can be used for reporting status.</param>
    </member>
    <member name="M:DriveWorks.GroupMaintenance.CopyGroupTeamAction.GetCanExecute(System.Boolean)">
      <summary>Checks to see if the action can be executed or not.</summary>
      <returns>True if it can execute.</returns>
      <param name="useCache">Whether or not he value needs to be re-evaluated from a last attempt.</param>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.CopyGroupTeamAction.Status">
      <summary>The current status of the action.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.CopyGroupTeamAction.StatusMessage">
      <summary>The current human readable status of this action.</summary>
    </member>
    <member name="M:DriveWorks.GroupMaintenance.CopyGroupTeamGroupTablePermissionAction.Execute(DriveWorks.GroupMaintenance.ReportMethod)">
      <summary>Executes this action.</summary>
      <returns>False if there is a critical error that means the entire transfer process should end.</returns>
      <param name="report">A method that can be used for reporting status.</param>
    </member>
    <member name="M:DriveWorks.GroupMaintenance.CopyGroupTeamGroupTablePermissionAction.GetCanExecute(System.Boolean)">
      <summary>Checks to see if the action can be executed or not.</summary>
      <returns>True if it can execute.</returns>
      <param name="useCache">Whether or not he value needs to be re-evaluated from a last attempt.</param>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.CopyGroupTeamGroupTablePermissionAction.Status">
      <summary>The current status of the action.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.CopyGroupTeamGroupTablePermissionAction.StatusMessage">
      <summary>The current human readable status of this action.</summary>
    </member>
    <member name="M:DriveWorks.GroupMaintenance.CopyGroupTeamProjectPermissionAction.Execute(DriveWorks.GroupMaintenance.ReportMethod)">
      <summary>Executes this action.</summary>
      <returns>False if there is a critical error that means the entire transfer process should end.</returns>
      <param name="report">A method that can be used for reporting status.</param>
    </member>
    <member name="M:DriveWorks.GroupMaintenance.CopyGroupTeamProjectPermissionAction.GetCanExecute(System.Boolean)">
      <summary>Checks to see if the action can be executed or not.</summary>
      <returns>True if it can execute.</returns>
      <param name="useCache">Whether or not he value needs to be re-evaluated from a last attempt.</param>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.CopyGroupTeamProjectPermissionAction.Status">
      <summary>The current status of the action.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.CopyGroupTeamProjectPermissionAction.StatusMessage">
      <summary>The current human readable status of this action.</summary>
    </member>
    <member name="M:DriveWorks.GroupMaintenance.CopyGroupUserAction.Execute(DriveWorks.GroupMaintenance.ReportMethod)">
      <summary>Executes this action.</summary>
      <returns>False if there is a critical error that means the entire transfer process should end.</returns>
      <param name="report">A method that can be used for reporting status.</param>
    </member>
    <member name="M:DriveWorks.GroupMaintenance.CopyGroupUserAction.GetCanExecute(System.Boolean)">
      <summary>Checks to see if the action can be executed or not.</summary>
      <returns>True if it can execute.</returns>
      <param name="useCache">Whether or not he value needs to be re-evaluated from a last attempt.</param>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.CopyGroupUserAction.Status">
      <summary>The current status of the action.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.CopyGroupUserAction.StatusMessage">
      <summary>The current human readable status of this action.</summary>
    </member>
    <member name="M:DriveWorks.GroupMaintenance.CopyProjectDetailsAction.Execute(DriveWorks.GroupMaintenance.ReportMethod)">
      <summary>Executes this action.</summary>
      <returns>False if there is a critical error that means the entire transfer process should end.</returns>
      <param name="report">A method that can be used for reporting status.</param>
    </member>
    <member name="M:DriveWorks.GroupMaintenance.CopyProjectDetailsAction.GetCanExecute(System.Boolean)">
      <summary>Checks to see if the action can be executed or not.</summary>
      <returns>True if it can execute.</returns>
      <param name="useCache">Whether or not he value needs to be re-evaluated from a last attempt.</param>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.CopyProjectDetailsAction.Status">
      <summary>The current status of the action.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.CopyProjectDetailsAction.StatusMessage">
      <summary>The current human readable status of this action.</summary>
    </member>
    <member name="M:DriveWorks.GroupMaintenance.CopyProjectRuleHistoryAction.Execute(DriveWorks.GroupMaintenance.ReportMethod)">
      <summary>Executes this action.</summary>
      <returns>False if there is a critical error that means the entire transfer process should end.</returns>
      <param name="report">A method that can be used for reporting status.</param>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.CopyProjectRuleHistoryAction.StatusMessage">
      <summary>The current human readable status of this action.</summary>
    </member>
    <member name="M:DriveWorks.GroupMaintenance.CopyReleasedComponents.Execute(DriveWorks.GroupMaintenance.ReportMethod)">
      <summary>Executes this action.</summary>
      <returns>False if there is a critical error that means the entire transfer process should end.</returns>
      <param name="report">A method that can be used for reporting status.</param>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.CopyReleasedComponents.StatusMessage">
      <summary>The current human readable status of this action.</summary>
    </member>
    <member name="M:DriveWorks.GroupMaintenance.CopySpecificationsAction.Execute(DriveWorks.GroupMaintenance.ReportMethod)">
      <summary>Executes this action.</summary>
      <returns>False if there is a critical error that means the entire transfer process should end.</returns>
      <param name="report">A method that can be used for reporting status.</param>
    </member>
    <member name="M:DriveWorks.GroupMaintenance.CopySpecificationsAction.GetCanExecute(System.Boolean)">
      <summary>Checks to see if the action can be executed or not.</summary>
      <returns>True if it can execute.</returns>
      <param name="useCache">Whether or not he value needs to be re-evaluated from a last attempt.</param>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.CopySpecificationsAction.Status">
      <summary>The current status of the action.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.CopySpecificationsAction.StatusMessage">
      <summary>The current human readable status of this action.</summary>
    </member>
    <member name="M:DriveWorks.GroupMaintenance.CreateDirectoryAction.Execute(DriveWorks.GroupMaintenance.ReportMethod)">
      <summary>Executes this action.</summary>
      <returns>False if there is a critical error that means the entire transfer process should end.</returns>
      <param name="report">A method that can be used for reporting status.</param>
    </member>
    <member name="M:DriveWorks.GroupMaintenance.CreateDirectoryAction.GetCanExecute(System.Boolean)">
      <summary>Checks to see if the action can be executed or not.</summary>
      <returns>True if it can execute.</returns>
      <param name="useCache">Whether or not he value needs to be re-evaluated from a last attempt.</param>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.CreateDirectoryAction.Directory">
      <summary>The directory path that will be made.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.CreateDirectoryAction.ErrorMessage">
      <summary>The error message from attempting to view the target directory.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.CreateDirectoryAction.StatusMessage">
      <summary>The current human readable status of this action.</summary>
    </member>
    <member name="M:DriveWorks.GroupMaintenance.DirectoryStorageItemModel.#ctor(System.String)">
      <summary>Creates a new instance of .</summary>
      <param name="path">The full path of the directory.</param>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.DirectoryStorageItemModel.Children">
      <summary>An aggregate collection of files and folders in this directory.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.DirectoryStorageItemModel.ErrorMessage">
      <summary>Gets and sets any error messages that were encountered whilst interacting with this directory.</summary>
    </member>
    <member name="M:DriveWorks.GroupMaintenance.FilePickingOptions.#ctor(System.String)">
      <summary>Creates a new instance of .</summary>
      <param name="rootFolder">The top most directory to select files from.</param>
    </member>
    <member name="M:DriveWorks.GroupMaintenance.FilePickingOptions.GetFiles">
      <summary>Gets an effective collection of all files that are included based on the current options.</summary>
    </member>
    <member name="M:DriveWorks.GroupMaintenance.FilePickingOptions.GetModel">
      <summary>Creates a new representation of all files and folders within the root and their inclusion state.</summary>
    </member>
    <member name="M:DriveWorks.GroupMaintenance.FilePickingOptions.UpdateModel(DriveWorks.GroupMaintenance.DirectoryStorageItemModel)">
      <summary>Takes an existing model and updates it to match the current file system.</summary>
      <param name="root">The folder to start from.</param>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.FilePickingOptions.ExcludeFiles">
      <summary>Collection of files that should not be included.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.FilePickingOptions.ExcludeFolders">
      <summary>Collection of directories that should not be included.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.FilePickingOptions.IncludeFiles">
      <summary>Designed to negate exclude folders, not include files outside the root.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.FilePickingOptions.IncludeFolders">
      <summary>Designed to negate excluded folders, not add folders outside the root.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.FilePickingOptions.RootFolder">
      <summary>The top most directory to select files from.</summary>
    </member>
    <member name="M:DriveWorks.GroupMaintenance.PackageGroupDirectoryAction.Execute(DriveWorks.GroupMaintenance.ReportMethod)">
      <summary>Executes this action.</summary>
      <returns>False if there is a critical error that means the entire transfer process should end.</returns>
      <param name="report">A method that can be used for reporting status.</param>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.PackageGroupDirectoryAction.StatusMessage">
      <summary>The current human readable status of this action.</summary>
    </member>
    <member name="M:DriveWorks.GroupMaintenance.PackageGroupProcess.CreatePackageGroupProcess(DriveWorks.Group,System.String,System.String,DriveWorks.GroupMaintenance.CopyGroupOptions)">
      <summary>Creates a new instance of the  class.</summary>
      <param name="sourceGroup">The group to copy from.</param>
      <param name="packagePath">the path of the package file to create.</param>
      <param name="targetGroupName">The name of the group to create inside the package.</param>
      <param name="options">The options to use to pack the group.</param>
    </member>
    <member name="M:DriveWorks.GroupMaintenance.ProcessActionBase.Execute(DriveWorks.GroupMaintenance.ReportMethod)">
      <summary>Executes this action.</summary>
      <returns>False if there is a critical error that means the entire transfer process should end.</returns>
      <param name="report">A method that can be used for reporting status.</param>
    </member>
    <member name="M:DriveWorks.GroupMaintenance.ProcessActionBase.GetCanExecute(System.Boolean)">
      <summary>Checks to see if the action can be executed or not.</summary>
      <returns>True if it can execute.</returns>
      <param name="useCache">Whether or not he value needs to be re-evaluated from a last attempt.</param>
    </member>
    <member name="M:DriveWorks.GroupMaintenance.ProcessActionBase.RaisePropertyChanged(System.String)">
      <summary>Raises the  event.</summary>
      <param name="propertyName">The name of the property that has changed.</param>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.ProcessActionBase.DependentActions">
      <summary>All actions that are required to have executed for this action to run.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.ProcessActionBase.HasExecuted">
      <summary>Whether or not this action has executed.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.ProcessActionBase.StatusMessage">
      <summary>The current human readable status of this action.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.ProcessActionBase.WillExecute">
      <summary>Returns whether or not this action wants to execute.</summary>
      <returns>True if it this action wants to execute.</returns>
    </member>
    <member name="E:DriveWorks.GroupMaintenance.ProcessActionBase.PropertyChanged">
      <summary>Raised when a property on this object changes.</summary>
    </member>
    <member name="M:DriveWorks.GroupMaintenance.RemapComponentsAction.Execute(DriveWorks.GroupMaintenance.ReportMethod)">
      <summary>Executes this action.</summary>
      <returns>False if there is a critical error that means the entire transfer process should end.</returns>
      <param name="report">A method that can be used for reporting status.</param>
    </member>
    <member name="M:DriveWorks.GroupMaintenance.RemapComponentsAction.GetCanExecute(System.Boolean)">
      <summary>Checks to see if the action can be executed or not.</summary>
      <returns>True if it can execute.</returns>
      <param name="useCache">Whether or not he value needs to be re-evaluated from a last attempt.</param>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.RemapComponentsAction.Status">
      <summary>The current status of the action.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.RemapComponentsAction.StatusMessage">
      <summary>The current human readable status of this action.</summary>
    </member>
    <member name="M:DriveWorks.GroupMaintenance.RemapGroupFoldersAction.Execute(DriveWorks.GroupMaintenance.ReportMethod)">
      <summary>Executes this action.</summary>
      <returns>False if there is a critical error that means the entire transfer process should end.</returns>
      <param name="report">A method that can be used for reporting status.</param>
    </member>
    <member name="M:DriveWorks.GroupMaintenance.RemapGroupFoldersAction.GetCanExecute(System.Boolean)">
      <summary>Checks to see if the action can be executed or not.</summary>
      <returns>True if it can execute.</returns>
      <param name="useCache">Whether or not he value needs to be re-evaluated from a last attempt.</param>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.RemapGroupFoldersAction.ContentFolder">
      <summary>The new content folder.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.RemapGroupFoldersAction.SpecificationsFolder">
      <summary>The new specification folder.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.RemapGroupFoldersAction.Status">
      <summary>The current status of the action.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.RemapGroupFoldersAction.StatusMessage">
      <summary>The current human readable status of this action.</summary>
    </member>
    <member name="M:DriveWorks.GroupMaintenance.StatusMessageEventArgs.#ctor(System.String,System.Boolean)">
      <summary>Creates a new instance of the  class.</summary>
      <param name="message">The message for this status event.</param>
      <param name="isError">Whether or not this message is an error.</param>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.StatusMessageEventArgs.CreatedAt">
      <summary>Gets the creation date of this event in a localized local long time string.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.StatusMessageEventArgs.CreationTime">
      <summary>Gets the creation time of this event in UTC.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.StatusMessageEventArgs.IsError">
      <summary>Whether or not this message is an error.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.StatusMessageEventArgs.Message">
      <summary>Gets the message for this status event.</summary>
    </member>
    <member name="M:DriveWorks.GroupMaintenance.StorageItemModel.#ctor(System.String)">
      <summary>Creates a new instance of .</summary>
      <param name="path">The location of the item on disk.</param>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.StorageItemModel.FullPath">
      <summary>The location of the item on disk.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.StorageItemModel.IsExplicitlyExcluded">
      <summary>Whether or not this item is specifically excluded from selection.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.StorageItemModel.IsExplicitlyIncluded">
      <summary>Whether or not this item is specifically included in selection.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.StorageItemModel.IsIncluded">
      <summary>Whether or not this item will effectively be included in selection.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.StorageItemModel.IsIncludedCheckState">
      <summary>A combination of the included state, distinguishing between explicitly included (true) or just included (nothing) or not included at all (false)</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.StorageItemModel.IsLocked">
      <summary>Whether or not this item can change its inclusion/exclusion state.</summary>
    </member>
    <member name="P:DriveWorks.GroupMaintenance.StorageItemModel.Name">
      <summary>The file name of this item.</summary>
    </member>
    <member name="T:DriveWorks.GroupMaintenance.ReportMethod">
      <summary>Signature for a delegate that is used for reporting.</summary>
    </member>
    <member name="T:DriveWorks.GroupTables.SimpleGroupTable">
      <summary>Provides access to a data store that is stored and synced throughout a DriveWorks group.</summary>
    </member>
    <member name="T:DriveWorks.Localization.RuleUpdateResult">
      <summary>Indicates the result of a method which changes a rule.</summary>
    </member>
    <member name="F:DriveWorks.Localization.RuleUpdateResult.Success">
      <summary>The rule was updated successfully.</summary>
    </member>
    <member name="F:DriveWorks.Localization.RuleUpdateResult.NotRule">
      <summary>The specified value wasn't a rule.</summary>
    </member>
    <member name="F:DriveWorks.Localization.RuleUpdateResult.Invalid">
      <summary>The rule couldn't be parsed successfully.</summary>
    </member>
    <member name="F:DriveWorks.Localization.RuleUpdateResult.NotApplicable">
      <summary>There were no changes to be made.</summary>
    </member>
    <member name="T:DriveWorks.Localization.RuleLocalizationHelper">
      <summary>Provides routines which help when building up rules in localized environments.</summary>
    </member>
    <member name="M:DriveWorks.Localization.RuleLocalizationHelper.#ctor(System.Globalization.CultureInfo,System.String,System.String,System.String)">
      <summary>Initializes a new instance of the  type for the given culture.</summary>
      <param name="localizationCulture">The culture for which to initialize the localization helper.</param>
      <param name="listSeparator">The list separator to use for formatting.</param>
      <param name="decimalSeparator">The decimal separator to use for formatting.</param>
      <param name="thousandsSeparator">The thousands separator to use for formatting.</param>
    </member>
    <member name="M:DriveWorks.Localization.RuleLocalizationHelper.#ctor(System.Globalization.CultureInfo,System.Globalization.CultureInfo,System.String,System.String,System.String)">
      <summary>Initializes a new instance of the  type for the given culture.</summary>
      <param name="localizationCulture">The culture for which to initialize the localization helper.</param>
      <param name="formattingCulture">The culture to use for formatting, if a null reference is passed, the current thread culture is used.</param>
      <param name="listSeparator">The list separator to use for formatting.</param>
      <param name="decimalSeparator">The decimal separator to use for formatting.</param>
      <param name="thousandsSeparator">The thousands separator to use for formatting.</param>
    </member>
    <member name="M:DriveWorks.Localization.RuleLocalizationHelper.CreateFunction(System.String,System.String[])">
      <summary>Creates a localized function call.</summary>
      <param name="functionName">The English function name which will be localized.</param>
      <param name="arguments">The arguments to be passed to the function.</param>
    </member>
    <member name="M:DriveWorks.Localization.RuleLocalizationHelper.CreateFunctionInvariant(System.String,System.String[])">
      <summary>Creates a function call without localizing the function name.</summary>
      <param name="functionName">The function name.</param>
      <param name="arguments">The arguments to be passed to the function.</param>
    </member>
    <member name="M:DriveWorks.Localization.RuleLocalizationHelper.GetLocalizedName(System.String)">
      <summary>Gets the localized version of the specified name.</summary>
      <returns>The localized version of the name or the invariant version if no localized version could be found.</returns>
      <param name="invariantName">The invariant name to localize.</param>
    </member>
    <member name="M:DriveWorks.Localization.RuleLocalizationHelper.TranslateRule(System.String,System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
      <summary>Translates the given rule from the provided language into the language represented by the instance.</summary>
      <returns>The translated rule.</returns>
      <param name="originalRuleText">The rule to translate.</param>
      <param name="sourceLanguage">The culture which defines the language the rule was written in.</param>
      <param name="sourceFormatting">The culture which defines the formatting used for the rule was written in.</param>
    </member>
    <member name="M:DriveWorks.Localization.RuleLocalizationHelper.TryTranslateRule(System.String,System.String@,System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
      <summary>Translates the given rule from the provided language into the language represented by the instance.</summary>
      <returns>A value indicating whether the translation was successful.</returns>
      <param name="originalRuleText">The rule to translate.</param>
      <param name="translatedRuleText">Receives the translated rule.</param>
      <param name="sourceLanguage">The culture which defines the language the rule was written in.</param>
      <param name="sourceFormatting">The culture which defines the formatting used for the rule was written in.</param>
    </member>
    <member name="P:DriveWorks.Localization.RuleLocalizationHelper.CultureInfo">
      <summary>Gets the culture for which the localization helper was constructed.</summary>
    </member>
    <member name="P:DriveWorks.Localization.RuleLocalizationHelper.DecimalSeparator">
      <summary>Gets the separator used to decimals.</summary>
    </member>
    <member name="P:DriveWorks.Localization.RuleLocalizationHelper.ListSeparator">
      <summary>Gets the separator used to delimit lists of values, for example, function arguments.</summary>
    </member>
    <member name="P:DriveWorks.Localization.RuleLocalizationHelper.LocalFalse">
      <summary>Gets the localized version of the "FALSE" identifier.</summary>
    </member>
    <member name="P:DriveWorks.Localization.RuleLocalizationHelper.LocalTrue">
      <summary>Gets the localized version of the "TRUE" identifier.</summary>
    </member>
    <member name="P:DriveWorks.Localization.RuleLocalizationHelper.ThousandsSeparator">
      <summary>Gets the separator used to delimit groups of numbers.</summary>
    </member>
    <member name="T:DriveWorks.Messaging.AgentMessage">
      <summary>Provides information about a received agent message.</summary>
    </member>
    <member name="T:DriveWorks.Messaging.GetAgentSettingMessage">
      <summary>Provides a message object for requesting an agent's setting value.</summary>
    </member>
    <member name="T:DriveWorks.Messaging.NotificationEventArgs">
      <summary>Provides event data for events involving an agent notification.</summary>
    </member>
    <member name="T:DriveWorks.Messaging.RequestEventArgs">
      <summary>Provides event data for events involving an agent request.</summary>
    </member>
    <member name="T:DriveWorks.Messaging.SetAgentSettingMessage">
      <summary>Provides a message object for requesting an agent's setting value to be changed.</summary>
    </member>
    <member name="T:DriveWorks.Messaging.StandardAgentSettingNames">
      <summary>Provides a collection of standard agent settings that can be retrieved or set with the use of  and
<see cref="T:DriveWorks.Messaging.SetAgentSettingMessage" /> via <see cref="M:DriveWorks.Group.SendAgentNotification(System.String,System.Object)" /> and
<see cref="M:DriveWorks.Group.SendAgentRequest(System.String,System.Object)" />.</summary>
    </member>
    <member name="T:DriveWorks.Messaging.StartAgentNotification">
      <summary>Serves as a notification message specifying that an agent should start.</summary>
    </member>
    <member name="T:DriveWorks.Messaging.StopAgentNotification">
      <summary>Serves as a notification message specifying that an agent should stop.</summary>
    </member>
    <member name="P:DriveWorks.Messaging.AgentMessage.Data">
      <summary>Gets the message that was sent by the user.</summary>
    </member>
    <member name="P:DriveWorks.Messaging.AgentMessage.SenderMachineName">
      <summary>Gets the name of the machine that sent this message.</summary>
    </member>
    <member name="P:DriveWorks.Messaging.AgentMessage.SenderUserName">
      <summary>Gets the group login name of the user that sent this message.</summary>
    </member>
    <member name="M:DriveWorks.Messaging.GetAgentSettingMessage.#ctor(System.String)">
      <summary>Creates a new instance of the  class.</summary>
      <param name="settingName">The name of the setting to get the value of.</param>
    </member>
    <member name="P:DriveWorks.Messaging.GetAgentSettingMessage.SettingName">
      <summary>Gets the name of the requested setting.</summary>
    </member>
    <member name="P:DriveWorks.Messaging.NotificationEventArgs.Message">
      <summary>Gets the notification message.</summary>
    </member>
    <member name="P:DriveWorks.Messaging.RequestEventArgs.Message">
      <summary>Gets the request message.</summary>
    </member>
    <member name="P:DriveWorks.Messaging.RequestEventArgs.ReplyMessageData">
      <summary>Gets/sets the reply message to send back to the sender of this request.</summary>
    </member>
    <member name="M:DriveWorks.Messaging.SetAgentSettingMessage.#ctor(System.String,System.Object)">
      <summary>Creates a new instance of the  class.</summary>
      <param name="settingName">The name of the setting to be changed.</param>
      <param name="value">The new value to set on the setting. This value MUST be serializable.</param>
    </member>
    <member name="P:DriveWorks.Messaging.SetAgentSettingMessage.SettingName">
      <summary>Gets the name of the setting value to be changed.</summary>
    </member>
    <member name="P:DriveWorks.Messaging.SetAgentSettingMessage.Value">
      <summary>Gets the new value to set the specified setting to.</summary>
    </member>
    <member name="F:DriveWorks.Messaging.StandardAgentSettingNames.Is3DPreviewQueueEnabled">
      <summary>The name of the setting that controls whether or the 3D preview processing queue is enabled on an agent.</summary>
    </member>
    <member name="F:DriveWorks.Messaging.StandardAgentSettingNames.IsEmailQueueEnabled">
      <summary>The name of the setting that controls whether or not the email processing queue is enabled on an agent.</summary>
    </member>
    <member name="F:DriveWorks.Messaging.StandardAgentSettingNames.IsModelGenerationQueueEnabled">
      <summary>The name of the setting that controls whether or not the model generation queue is enabled on an agent.</summary>
    </member>
    <member name="F:DriveWorks.Messaging.StandardAgentSettingNames.IsSpecificationQueueEnabled">
      <summary>The name of the setting that controls whether or not the specification processing queue is enabled on an agent.</summary>
    </member>
    <member name="T:DriveWorks.Navigation.ControlNameChangedEventArgs">
      <summary>Provides the event data for events raised when the name of a control changes.</summary>
    </member>
    <member name="T:DriveWorks.Navigation.DecisionNavigationStep">
      <summary>Represents a binary conditional branch in a project's navigation.</summary>
    </member>
    <member name="T:DriveWorks.Navigation.FinishNavigationStep">
      <summary>Represents the final navigation step in a project's navigation.</summary>
    </member>
    <member name="T:DriveWorks.Navigation.FormNavigationStep">
      <summary>Represents a form in a project's navigation.</summary>
    </member>
    <member name="T:DriveWorks.Navigation.NavigationDataCorruptException">
      <summary>Thrown when navigation information cannot be loaded because the underlying data store is in the wrong format.</summary>
    </member>
    <member name="T:DriveWorks.Navigation.NavigationStep">
      <summary>The base class for all steps in a project's navigation.</summary>
    </member>
    <member name="T:DriveWorks.Navigation.NavigationStepEventArgs">
      <summary>Provides the data for the event raised when a navigation step is changed.</summary>
    </member>
    <member name="T:DriveWorks.Navigation.NavigationStepNameChangedEventArgs">
      <summary>Provides the event data for events raised when the name of a navigation step changes.</summary>
    </member>
    <member name="T:DriveWorks.Navigation.ProjectNavigation">
      <summary>Provides access to a project's navigation information.</summary>
    </member>
    <member name="T:DriveWorks.Navigation.StartNavigationStep">
      <summary>Represents the initial step in a project's navigation.</summary>
    </member>
    <member name="P:DriveWorks.Navigation.ControlNameChangedEventArgs.Control">
      <summary>The instance of the control that changed.</summary>
    </member>
    <member name="P:DriveWorks.Navigation.ControlNameChangedEventArgs.NewName">
      <summary>The new name of the control.</summary>
    </member>
    <member name="P:DriveWorks.Navigation.ControlNameChangedEventArgs.OldName">
      <summary>The original name of the control</summary>
    </member>
    <member name="M:DriveWorks.Navigation.DecisionNavigationStep.GetVersionHistory">
      <summary>Gets the rule condition rule history for this decision.</summary>
    </member>
    <member name="M:DriveWorks.Navigation.DecisionNavigationStep.SetRuleAndComment(System.String,System.String)">
      <summary>Sets the rule and the comment for the Decision Step.</summary>
      <param name="newRule">The rule to evaluate.</param>
      <param name="newComment">The comment for the rule</param>
    </member>
    <member name="M:DriveWorks.Navigation.DecisionNavigationStep.SetRuleAndComment(System.String,System.String,DriveWorks.Navigation.NavigationStep,DriveWorks.Navigation.NavigationStep)">
      <summary>Sets the rule and the comment for the Decision Step.</summary>
      <param name="newRule">The rule to evaluate.</param>
      <param name="newComment">The comment for the rule.</param>
      <param name="stepIfTrue">The step to be shown if the condition evaluates to true.</param>
      <param name="stepIfFalse">The step to be shown if the condition evaluates to false.</param>
    </member>
    <member name="P:DriveWorks.Navigation.DecisionNavigationStep.Comment">
      <summary>Gets/sets the comment associated with the Navigation step's rule.</summary>
    </member>
    <member name="P:DriveWorks.Navigation.DecisionNavigationStep.ConditionExpression">
      <summary>Gets/sets an expression which evaluates to either true or false and ultimately determines which navigation step is activated next.</summary>
    </member>
    <member name="P:DriveWorks.Navigation.DecisionNavigationStep.Id">
      <summary>Gets the invariant identifier of the rule.</summary>
    </member>
    <member name="P:DriveWorks.Navigation.DecisionNavigationStep.NextStep">
      <summary>Overridden to throw an exception if it is attempted to change the next step as a decision's next step is governed by the
, <see cref="P:DriveWorks.Navigation.DecisionNavigationStep.NextStepIfTrue" />, and
<see cref="P:DriveWorks.Navigation.DecisionNavigationStep.NextStepIfFalse" /> properties.</summary>
      <returns>The current next step based on the result of calculating the  property.</returns>
    </member>
    <member name="P:DriveWorks.Navigation.DecisionNavigationStep.NextStepIfFalse">
      <summary>Gets the next step to be shown if  evaluates to true.</summary>
    </member>
    <member name="P:DriveWorks.Navigation.DecisionNavigationStep.NextStepIfTrue">
      <summary>Gets the next step to be shown if  evaluates to true.</summary>
    </member>
    <member name="E:DriveWorks.Navigation.DecisionNavigationStep.ConditionExpressionChanged">
      <summary>Raised when the value of the  property changes.</summary>
    </member>
    <member name="E:DriveWorks.Navigation.DecisionNavigationStep.NextStepIfFalseChanged">
      <summary>Raised when the value of the  property changes.</summary>
    </member>
    <member name="E:DriveWorks.Navigation.DecisionNavigationStep.NextStepIfTrueChanged">
      <summary>Raised when the value of the  property changes.</summary>
    </member>
    <member name="M:DriveWorks.Navigation.FinishNavigationStep.DeleteCore">
      <summary>Overridden to throw an instance of  as deletion of the finish step is not allowed.</summary>
    </member>
    <member name="P:DriveWorks.Navigation.FinishNavigationStep.NextStep">
      <summary>Overridden to throw an exception if it is attempted to change the next step as the Finish step cannot have a next step.</summary>
      <exception caption="" cref="T:System.InvalidOperationException">Thrown if it is attempted to modify the property's value.</exception>
    </member>
    <member name="M:DriveWorks.Navigation.FormNavigationStep.DeleteCore">
      <summary>Overridden to remove the form from the form host.</summary>
    </member>
    <member name="P:DriveWorks.Navigation.FormNavigationStep.Form">
      <summary>Gets the actual DriveWorks form represented by this navigation step.</summary>
    </member>
    <member name="P:DriveWorks.Navigation.FormNavigationStep.IsDialog">
      <summary>Gets whether this form step is a dialog form step, i.e. it is not linked into the navigation.</summary>
      <returns>True if the form step is a dialog</returns>
    </member>
    <member name="M:DriveWorks.Navigation.NavigationStep.AssertNotDeleted">
      <summary>Checks to see if the item has been deleted, and if it has, throws an instance of the  exception.</summary>
    </member>
    <member name="M:DriveWorks.Navigation.NavigationStep.ChangeNameCore(System.String)">
      <summary>When overridden by a derived class, changes the name of the navigation step.</summary>
      <param name="newName">The new name to apply.</param>
    </member>
    <member name="M:DriveWorks.Navigation.NavigationStep.Delete">
      <summary>Deletes the step from the navigation.</summary>
    </member>
    <member name="M:DriveWorks.Navigation.NavigationStep.DeleteCore">
      <summary>Performs any derived-type specific deletion.</summary>
    </member>
    <member name="P:DriveWorks.Navigation.NavigationStep.CanRename">
      <summary>Gets a value indicating whether the name of the navigation step can be changed.</summary>
    </member>
    <member name="P:DriveWorks.Navigation.NavigationStep.IsDeleted">
      <summary>Gets whether the navigation step has been deleted.</summary>
      <returns>True if the navigation step has been deleted, otherwise false.</returns>
    </member>
    <member name="P:DriveWorks.Navigation.NavigationStep.Left">
      <summary>Gets the left position of the step in the navigation designer.</summary>
    </member>
    <member name="P:DriveWorks.Navigation.NavigationStep.Name">
      <summary>Gets/sets the name of the navigation step.</summary>
    </member>
    <member name="P:DriveWorks.Navigation.NavigationStep.Navigation">
      <summary>Gets the project navigation.</summary>
    </member>
    <member name="P:DriveWorks.Navigation.NavigationStep.NextStep">
      <summary>Gets/sets the navigation step to be activated after this.</summary>
    </member>
    <member name="P:DriveWorks.Navigation.NavigationStep.OnNextMacroName">
      <summary>Gets the name of the macro to be executed when the next step is activated.</summary>
    </member>
    <member name="P:DriveWorks.Navigation.NavigationStep.OnNextMacroRule">
      <summary>Gets/sets the rule which defines the name of the macro to be executed when the next step is activated.</summary>
    </member>
    <member name="P:DriveWorks.Navigation.NavigationStep.OnPreviousMacroName">
      <summary>Gets the name of the macro to be executed when the previous step is activated.</summary>
    </member>
    <member name="P:DriveWorks.Navigation.NavigationStep.OnPreviousMacroRule">
      <summary>Gets/sets the rule which defines the name of the macro to be executed when the previous step is activated.</summary>
    </member>
    <member name="P:DriveWorks.Navigation.NavigationStep.Top">
      <summary>Gets the top position of the step in the navigation designer.</summary>
    </member>
    <member name="E:DriveWorks.Navigation.NavigationStep.Deleted">
      <summary>Raised when the navigation step is deleted.</summary>
    </member>
    <member name="E:DriveWorks.Navigation.NavigationStep.LeftChanged">
      <summary>Raised when the  property is changed.</summary>
    </member>
    <member name="E:DriveWorks.Navigation.NavigationStep.NameChanged">
      <summary>Raised when the  property changes.</summary>
    </member>
    <member name="E:DriveWorks.Navigation.NavigationStep.NextMacroNameChanged">
      <summary>Raised when the macro to be fired when the next step is activated changes.</summary>
    </member>
    <member name="E:DriveWorks.Navigation.NavigationStep.NextMacroRuleChanged">
      <summary>Raised when the rule, which determines the macro to be fired when the next step is activated, changes.</summary>
    </member>
    <member name="E:DriveWorks.Navigation.NavigationStep.NextStepChanged">
      <summary>Raised when the  property changes.</summary>
    </member>
    <member name="E:DriveWorks.Navigation.NavigationStep.PreviousMacroNameChanged">
      <summary>Raised when the macro to be fired when the previous step is activated changes.</summary>
    </member>
    <member name="E:DriveWorks.Navigation.NavigationStep.PreviousMacroRuleChanged">
      <summary>Raised when the rule, which determines the macro to be fired when the previous step is activated, changes.</summary>
    </member>
    <member name="E:DriveWorks.Navigation.NavigationStep.TopChanged">
      <summary>Raised when the  property is changed.</summary>
    </member>
    <member name="M:DriveWorks.Navigation.NavigationStepEventArgs.#ctor(DriveWorks.Navigation.NavigationStep)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="navigationStep">The navigation step that was changed.</param>
    </member>
    <member name="P:DriveWorks.Navigation.NavigationStepEventArgs.NavigationStep">
      <summary>Gets the navigation step that was changed.</summary>
    </member>
    <member name="M:DriveWorks.Navigation.NavigationStepNameChangedEventArgs.#ctor(DriveWorks.Navigation.NavigationStep,System.String,System.String)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="navigationStep">The navigation step that was changed.</param>
      <param name="oldName">The old name of the navigation step.</param>
      <param name="newName">The new name of the navigation step.</param>
    </member>
    <member name="P:DriveWorks.Navigation.NavigationStepNameChangedEventArgs.NewName">
      <summary>Gets the new name of the navigation step.</summary>
    </member>
    <member name="P:DriveWorks.Navigation.NavigationStepNameChangedEventArgs.OldName">
      <summary>Gets the old name of the navigation step.</summary>
    </member>
    <member name="M:DriveWorks.Navigation.ProjectNavigation.CreateDecision(System.String)">
      <summary>Creates a new decision.</summary>
      <param name="name">The name of the new decision.</param>
    </member>
    <member name="M:DriveWorks.Navigation.ProjectNavigation.CreateForm(System.String)">
      <summary>Creates a new form.</summary>
      <param name="name">The name of the new form.</param>
    </member>
    <member name="M:DriveWorks.Navigation.ProjectNavigation.GetControl(System.String)">
      <summary>Gets a control given its name.</summary>
      <returns>The specified control.</returns>
      <param name="name">The name of the control to get.</param>
    </member>
    <member name="M:DriveWorks.Navigation.ProjectNavigation.GetDecisions">
      <summary>Gets all of the decisions in the navigation.</summary>
    </member>
    <member name="M:DriveWorks.Navigation.ProjectNavigation.GetForms(System.Boolean,System.Boolean)">
      <summary>Gets the project's forms.</summary>
      <param name="includeDialogForms">True to include forms which are not linked into the navigation, false to filter them out of the result.</param>
      <param name="includeStandardForms">True to include forms which are linked into the navigation, false to filter them out of the result.</param>
    </member>
    <member name="M:DriveWorks.Navigation.ProjectNavigation.GetStep(System.String)">
      <summary>Gets the named navigation step.</summary>
      <exception caption="" cref="T:DriveWorks.ItemNotFoundException">Thrown when the named navigation step does not exist.</exception>
      <returns>The named instance of the .</returns>
      <param name="name">The name of the step to retrieve.</param>
    </member>
    <member name="M:DriveWorks.Navigation.ProjectNavigation.GetSteps">
      <summary>Gets all of the steps in the navigation.</summary>
    </member>
    <member name="M:DriveWorks.Navigation.ProjectNavigation.TryGetControl(System.String,DriveWorks.Forms.ControlBase@)">
      <summary>Gets a control given its name.</summary>
      <returns>True if the control was found and returned, otherwise false.</returns>
      <param name="name">The name of the control to get.</param>
      <param name="control">The control.</param>
    </member>
    <member name="M:DriveWorks.Navigation.ProjectNavigation.TryGetControl``1(System.String,``0@)">
      <summary>Gets a control given its name.</summary>
      <returns>True if the control was found and returned, otherwise false.</returns>
      <param name="name">The name of the control to get.</param>
      <param name="control">The control.</param>
    </member>
    <member name="M:DriveWorks.Navigation.ProjectNavigation.TryGetStep``1(System.String,``0@)">
      <summary>Gets the named navigation step.</summary>
      <returns>True if the item was successfully retrieved, otherwise false.</returns>
      <param name="name">The name of the step to retrieve.</param>
      <param name="navigationStep">A reference to a variable which will received the retrieved navigation step.</param>
    </member>
    <member name="M:DriveWorks.Navigation.ProjectNavigation.TryGetStep(System.String,DriveWorks.Navigation.NavigationStep@)">
      <summary>Gets the named navigation step.</summary>
      <returns>True if the item was successfully retrieved, otherwise false.</returns>
      <param name="name">The name of the step to retrieve.</param>
      <param name="navigationStep">A reference to a variable which will received the retrieved navigation step.</param>
    </member>
    <member name="P:DriveWorks.Navigation.ProjectNavigation.Count">
      <summary>Gets the total number of steps in the navigation (including the start and finish steps).</summary>
    </member>
    <member name="P:DriveWorks.Navigation.ProjectNavigation.FinishStep">
      <summary>Gets the final step in the navigation.</summary>
    </member>
    <member name="P:DriveWorks.Navigation.ProjectNavigation.Item(System.Int32)">
      <summary>Gets the navigation step at the given index.</summary>
      <returns>A navigation step.</returns>
      <param name="index">The index of the step to get.</param>
    </member>
    <member name="P:DriveWorks.Navigation.ProjectNavigation.Project">
      <summary>Gets the project.</summary>
    </member>
    <member name="P:DriveWorks.Navigation.ProjectNavigation.StartStep">
      <summary>Gets the first step in the navigation.</summary>
    </member>
    <member name="E:DriveWorks.Navigation.ProjectNavigation.ControlCreated">
      <summary>Raised whenever a control is created on any form or dialog.</summary>
    </member>
    <member name="E:DriveWorks.Navigation.ProjectNavigation.ControlDeleted">
      <summary>Raised whenever any control is deleted.</summary>
    </member>
    <member name="E:DriveWorks.Navigation.ProjectNavigation.ControlNameChanged">
      <summary>Raised whenever any control is renamed.</summary>
    </member>
    <member name="E:DriveWorks.Navigation.ProjectNavigation.NavigationStepCreated">
      <summary>Raised when a navigation step is created.</summary>
    </member>
    <member name="E:DriveWorks.Navigation.ProjectNavigation.NavigationStepDeleted">
      <summary>Raised when a navigation step is deleted.</summary>
    </member>
    <member name="E:DriveWorks.Navigation.ProjectNavigation.NavigationStepNameChanged">
      <summary>Raised when the name of a navigation step is changed.</summary>
    </member>
    <member name="M:DriveWorks.Navigation.StartNavigationStep.DeleteCore">
      <summary>Overridden to throw an instance of  as deletion of the finish step is not allowed.</summary>
    </member>
    <member name="T:DriveWorks.Navigation.NavigationStepChangedEventHandler">
      <summary>Represents the method that will handle the event raised when a navigation step is changed.</summary>
    </member>
    <member name="T:DriveWorks.Navigation.NavigationStepNameChangedEventHandler">
      <summary>Represents the method that will handle the event raised when a navigation step's name is changed.</summary>
    </member>
    <member name="T:DriveWorks.Refactoring.BatchActionOptions">
      <summary>Provides an enumeration of potential batch operations.</summary>
    </member>
    <member name="F:DriveWorks.Refactoring.BatchActionOptions.LoadStore">
      <summary>Store data is about to be/has been loaded.</summary>
    </member>
    <member name="F:DriveWorks.Refactoring.BatchActionOptions.CommitRulesToStore">
      <summary>Store data is about to be/has been committed to the underlying store.</summary>
    </member>
    <member name="T:DriveWorks.Refactoring.BatchActionEventArgs">
      <summary>Provides event data for refactoring operations that affect a batch of rules.</summary>
    </member>
    <member name="T:DriveWorks.Refactoring.RenameFinishedEventArgs">
      <summary>Provides event data for the  event.</summary>
    </member>
    <member name="T:DriveWorks.Refactoring.RenameProcess">
      <summary>Provides support for renaming an identifier safely throughout a project.</summary>
    </member>
    <member name="T:DriveWorks.Refactoring.RenameRuleEventArgs">
      <summary>Provides event data for the  and related events.</summary>
    </member>
    <member name="T:DriveWorks.Refactoring.SearchFinishedEventArgs">
      <summary>Provides event data for the .</summary>
    </member>
    <member name="T:DriveWorks.Refactoring.SearchStartedEventArgs">
      <summary>Provides event data for the .</summary>
    </member>
    <member name="P:DriveWorks.Refactoring.BatchActionEventArgs.Action">
      <summary>Gets the type of batch action.</summary>
    </member>
    <member name="P:DriveWorks.Refactoring.BatchActionEventArgs.TargetName">
      <summary>Gets the name of the target being affected by the action.</summary>
    </member>
    <member name="P:DriveWorks.Refactoring.RenameFinishedEventArgs.TotalReplacements">
      <summary>Gets the total number of references that were replaced.</summary>
    </member>
    <member name="P:DriveWorks.Refactoring.RenameFinishedEventArgs.TotalRules">
      <summary>Gets the total number of actual rules that were scanned.</summary>
    </member>
    <member name="P:DriveWorks.Refactoring.RenameFinishedEventArgs.TotalScans">
      <summary>Gets the total number of potential rules that were scanned.</summary>
    </member>
    <member name="P:DriveWorks.Refactoring.RenameFinishedEventArgs.TotalUnparsedRules">
      <summary>Gets the total number of rules which couldn't be scanned because they were unparseable.</summary>
    </member>
    <member name="M:DriveWorks.Refactoring.RenameProcess.Abort">
      <summary>Aborts the process. Process cannot be aborted after the renaming phase begins.</summary>
    </member>
    <member name="E:DriveWorks.Refactoring.RenameProcess.BatchActionFinished">
      <summary>Raised when an action affecting a batch of related rules is finished, e.g. loading rules for variables.</summary>
    </member>
    <member name="E:DriveWorks.Refactoring.RenameProcess.BatchActionStarted">
      <summary>Raised when an action affecting a batch of related rules is started, e.g. loading rules for variables.</summary>
    </member>
    <member name="E:DriveWorks.Refactoring.RenameProcess.ProcessAborted">
      <summary>Raised when the entire rename process is aborted.</summary>
    </member>
    <member name="E:DriveWorks.Refactoring.RenameProcess.RenameFinished">
      <summary>Raised when the renaming phase of the rename process has finished.</summary>
    </member>
    <member name="E:DriveWorks.Refactoring.RenameProcess.RenameStarted">
      <summary>Raised when the renaming phase of the rename process has started.</summary>
    </member>
    <member name="E:DriveWorks.Refactoring.RenameProcess.RuleRenamingAborted">
      <summary>Raised if the processing of an individual rule is aborted, e.g. because it can't be parsed.</summary>
    </member>
    <member name="E:DriveWorks.Refactoring.RenameProcess.RuleRenamingFinished">
      <summary>Raised when the processing of an individual rule is finished.</summary>
    </member>
    <member name="E:DriveWorks.Refactoring.RenameProcess.RuleRenamingStarted">
      <summary>Raised when an individual rule is about to be processed.</summary>
    </member>
    <member name="E:DriveWorks.Refactoring.RenameProcess.SearchFinished">
      <summary>Raised when the search phase of the rename process has finished.</summary>
    </member>
    <member name="E:DriveWorks.Refactoring.RenameProcess.SearchStarted">
      <summary>Raised when the search phase of the rename process has started.</summary>
    </member>
    <member name="E:DriveWorks.Refactoring.RenameProcess.UsageFound">
      <summary>Raised when a usage of a name we are searching for is found.</summary>
    </member>
    <member name="M:DriveWorks.Refactoring.RenameRuleEventArgs.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the  class.</summary>
      <param name="containerName">The name of the rule container.</param>
      <param name="ruleName">The name of the rule in a format specific to the type of container.</param>
      <param name="ruleText">The rule text.</param>
    </member>
    <member name="P:DriveWorks.Refactoring.RenameRuleEventArgs.ContainerName">
      <summary>Gets the name of the rule container.</summary>
    </member>
    <member name="P:DriveWorks.Refactoring.RenameRuleEventArgs.RuleName">
      <summary>Gets the name of the rule in a format specific to the type of container.</summary>
    </member>
    <member name="P:DriveWorks.Refactoring.RenameRuleEventArgs.RuleText">
      <summary>Gets the text of the rule.</summary>
    </member>
    <member name="M:DriveWorks.Refactoring.SearchFinishedEventArgs.#ctor(System.String[],DriveWorks.Utility.RuleSearchResult[])">
      <summary>Initializes a new instance of the  class.</summary>
      <param name="names">The names we searched for.</param>
      <param name="uses">All uses in rules of the name we searched for.</param>
    </member>
    <member name="P:DriveWorks.Refactoring.SearchFinishedEventArgs.Names">
      <summary>Gets the names that was searched for.</summary>
    </member>
    <member name="P:DriveWorks.Refactoring.SearchFinishedEventArgs.Uses">
      <summary>Gets all uses in rules of the name we searched for.</summary>
    </member>
    <member name="M:DriveWorks.Refactoring.SearchStartedEventArgs.#ctor(System.String[])">
      <summary>Initializes a new instance of the  class.</summary>
      <param name="names">The names we are searching for.</param>
    </member>
    <member name="P:DriveWorks.Refactoring.SearchStartedEventArgs.Names">
      <summary>Gets the names that are being searched for.</summary>
    </member>
    <member name="T:DriveWorks.Reporting.IEventReportWriter">
      <summary>Represents a report writer that raises events.</summary>
    </member>
    <member name="T:DriveWorks.Reporting.IReportWriter">
      <summary>Provides a contract for report writers capable of logging reports for the DriveWorks Engine.</summary>
    </member>
    <member name="T:DriveWorks.Reporting.IReportWriterFactory">
      <summary>Provides a contract for an object which can create instances of implementations of the  interface for a set of related
reports.</summary>
    </member>
    <member name="E:DriveWorks.Reporting.IEventReportWriter.EntryWritten">
      <summary>Raised when an entry is written.</summary>
    </member>
    <member name="E:DriveWorks.Reporting.IEventReportWriter.ProcessBegun">
      <summary>Raised when a process is begun.</summary>
    </member>
    <member name="E:DriveWorks.Reporting.IEventReportWriter.ProcessEnded">
      <summary>Raised when a process is ended.</summary>
    </member>
    <member name="M:DriveWorks.Reporting.IReportWriter.EndProcess">
      <summary>Ends the current process.</summary>
    </member>
    <member name="M:DriveWorks.Reporting.IReportWriter.WriteEntry(DriveWorks.Reporting.ReportingLevel,DriveWorks.Reporting.ReportEntryType,System.String,System.String,System.String,System.String)">
      <summary>Writes a report entry to current process in the report.</summary>
      <param name="entryLevel">The logging level which applies to to entry.</param>
      <param name="entryType">The type of entry to write.</param>
      <param name="entryClass">The class of entry - e.g. "Drive Dimension", useful for filtering.</param>
      <param name="entryTarget">The target of the entry - e.g. "SomeDimension (D1@Sketch1@SomePart)", useful for filtering.</param>
      <param name="entryDescription">The description of the entry - e.g. "Driving 'SomeDimension' to 167.8".</param>
      <param name="entryDetail">Optional additional detail.</param>
    </member>
    <member name="M:DriveWorks.Reporting.IReportWriter.BeginProcess(System.String,System.String,System.String)">
      <summary>Begins a process.</summary>
      <param name="processClass">The class of the process, e.g. "Drive Dimensions", useful for filtering.</param>
      <param name="processTarget">The target of the process, e.g. "SomePart.sldprt", useful for filtering.</param>
      <param name="processDescription">The human-readable description of the process, e.g. "Driving dimensions in part 'SomePart.sldprt'".</param>
    </member>
    <member name="M:DriveWorks.Reporting.IReportWriter.BeginProcess(DriveWorks.IReportProcessItem)">
      <summary>Begins a process using a IReleaseProcessItem structure.</summary>
      <param name="processItem">The  to use to begin the process.</param>
    </member>
    <member name="P:DriveWorks.Reporting.IReportWriter.ProcessDepth">
      <summary>Gets the current depth of processes.</summary>
    </member>
    <member name="M:DriveWorks.Reporting.IReportWriterFactory.CreateReportWriter(System.String)">
      <summary>Creates a new report writer.</summary>
      <returns>The newly created report writer.</returns>
    </member>
    <member name="T:DriveWorks.Reporting.ReportEntryType">
      <summary>Represents the type of an entry in a report.</summary>
    </member>
    <member name="F:DriveWorks.Reporting.ReportEntryType.Information">
      <summary>The entry is informative.</summary>
    </member>
    <member name="F:DriveWorks.Reporting.ReportEntryType.Warning">
      <summary>The entry is a warning.</summary>
    </member>
    <member name="F:DriveWorks.Reporting.ReportEntryType.Error">
      <summary>The entry is an error.</summary>
    </member>
    <member name="T:DriveWorks.Reporting.ReportingLevel">
      <summary>Represents the reporting level.</summary>
    </member>
    <member name="F:DriveWorks.Reporting.ReportingLevel.Minimal">
      <summary>Minimal reporting.</summary>
    </member>
    <member name="F:DriveWorks.Reporting.ReportingLevel.Normal">
      <summary>Normal reporting.</summary>
    </member>
    <member name="F:DriveWorks.Reporting.ReportingLevel.Verbose">
      <summary>Verbose reporting.</summary>
    </member>
    <member name="T:DriveWorks.Reporting.CompositeReportWriter">
      <summary>Implements a report writer which writes to multiple other report writers.</summary>
    </member>
    <member name="T:DriveWorks.Reporting.EntryEventArgs">
      <summary>Provides data for events related to report entries.</summary>
    </member>
    <member name="T:DriveWorks.Reporting.EventProxyReportWriter">
      <summary>Implements a report writer which proxies to another report writer and raises events when processes and entries are written.</summary>
    </member>
    <member name="T:DriveWorks.Reporting.EventReportWriter">
      <summary>Implements a report writer which proxies to another report writer and raises events when processes and entries are written.</summary>
    </member>
    <member name="T:DriveWorks.Reporting.ProcessEventArgs">
      <summary>Provides data for events related to report processes.</summary>
    </member>
    <member name="T:DriveWorks.Reporting.ProxyReportWriter">
      <summary>Implements a report writer which proxies to another report writer.</summary>
    </member>
    <member name="T:DriveWorks.Reporting.ReportPackage">
      <summary>Implements a report writer where each top-level process is treated as a separate report, all of which are saved to a SQL Server CE database file.</summary>
    </member>
    <member name="T:DriveWorks.Reporting.ReportReader">
      <summary>Provides a reader for DriveWorks reports.</summary>
    </member>
    <member name="T:DriveWorks.Reporting.ReportWriterBase">
      <summary>Provides a simple base class from which report writers can inherit.</summary>
    </member>
    <member name="T:DriveWorks.Reporting.TraceReportWriter">
      <summary>Implements a report writer which writes to the tracing framework.</summary>
    </member>
    <member name="M:DriveWorks.Reporting.CompositeReportWriter.#ctor(DriveWorks.Reporting.IReportWriter[])">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="writers">The report writers to compose into a single report writer.</param>
    </member>
    <member name="M:DriveWorks.Reporting.CompositeReportWriter.#ctor(System.Collections.Generic.IEnumerable{DriveWorks.Reporting.IReportWriter})">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="writers">The report writers to compose into a single report writer.</param>
    </member>
    <member name="M:DriveWorks.Reporting.CompositeReportWriter.EndProcess">
      <summary>Ends the current process.</summary>
    </member>
    <member name="M:DriveWorks.Reporting.CompositeReportWriter.Finish">
      <summary>Finishes the report.</summary>
    </member>
    <member name="M:DriveWorks.Reporting.CompositeReportWriter.WriteEntry(DriveWorks.Reporting.ReportingLevel,DriveWorks.Reporting.ReportEntryType,System.String,System.String,System.String,System.String)">
      <summary>Writes a report entry to current process in the report.</summary>
      <param name="entryLevel">The logging level which applies to to entry.</param>
      <param name="entryType">The type of entry to write.</param>
      <param name="entryClass">The class of entry - e.g. "Drive Dimension", useful for filtering.</param>
      <param name="entryTarget">The target of the entry - e.g. "SomeDimension (D1@Sketch1@SomePart)", useful for filtering.</param>
      <param name="entryDescription">The description of the entry - e.g. "Driving 'SomeDimension' to 167.8".</param>
      <param name="entryDetail">Optional additional detail.</param>
    </member>
    <member name="M:DriveWorks.Reporting.CompositeReportWriter.BeginProcess(System.String,System.String,System.String)">
      <summary>Begins a process.</summary>
      <param name="processClass">The class of the process, e.g. "Drive Dimensions", useful for filtering.</param>
      <param name="processTarget">The target of the process, e.g. "SomePart.sldprt", useful for filtering.</param>
      <param name="processDescription">The human-readable description of the process, e.g. "Driving dimensions in part 'SomePart.sldprt'".</param>
    </member>
    <member name="M:DriveWorks.Reporting.CompositeReportWriter.BeginProcess(DriveWorks.IReportProcessItem)">
      <summary>Begins a process.</summary>
      <param name="processItem">The process item to use to start the process</param>
    </member>
    <member name="P:DriveWorks.Reporting.CompositeReportWriter.ProcessDepth">
      <summary>Gets the current depth of processes.</summary>
    </member>
    <member name="M:DriveWorks.Reporting.EntryEventArgs.#ctor(DriveWorks.Reporting.ReportingLevel,DriveWorks.Reporting.ReportEntryType,System.String,System.String,System.String,System.String)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="entryLevel">The logging level which applies to to entry.</param>
      <param name="entryType">The type of entry to write.</param>
      <param name="entryClass">The class of entry - e.g. "Drive Dimension", useful for filtering.</param>
      <param name="entryTarget">The target of the entry - e.g. "SomeDimension (D1@Sketch1@SomePart)", useful for filtering.</param>
      <param name="entryDescription">The description of the entry - e.g. "Driving 'SomeDimension' to 167.8".</param>
      <param name="entryDetail">Optional additional detail.</param>
    </member>
    <member name="P:DriveWorks.Reporting.EntryEventArgs.EntryClass">
      <summary>Gets the entry class.</summary>
    </member>
    <member name="P:DriveWorks.Reporting.EntryEventArgs.EntryDescription">
      <summary>Gets the entry description.</summary>
    </member>
    <member name="P:DriveWorks.Reporting.EntryEventArgs.EntryDetail">
      <summary>Gets optional extra detail about the entry.</summary>
    </member>
    <member name="P:DriveWorks.Reporting.EntryEventArgs.EntryLevel">
      <summary>Gets the reporting level of the entry.</summary>
    </member>
    <member name="P:DriveWorks.Reporting.EntryEventArgs.EntryTarget">
      <summary>Gets the target of the entry.</summary>
    </member>
    <member name="P:DriveWorks.Reporting.EntryEventArgs.EntryType">
      <summary>Gets the type of entry.</summary>
    </member>
    <member name="M:DriveWorks.Reporting.EventProxyReportWriter.#ctor">
      <summary>Initializes a new instance of the  type.</summary>
    </member>
    <member name="M:DriveWorks.Reporting.EventProxyReportWriter.#ctor(DriveWorks.Reporting.IReportWriter)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="writer">The writer to which to proxy reporting calls.</param>
    </member>
    <member name="M:DriveWorks.Reporting.EventProxyReportWriter.EndProcess">
      <summary>Ends the current process.</summary>
    </member>
    <member name="M:DriveWorks.Reporting.EventProxyReportWriter.WriteEntry(DriveWorks.Reporting.ReportingLevel,DriveWorks.Reporting.ReportEntryType,System.String,System.String,System.String,System.String)">
      <summary>Writes a report entry to current process in the report.</summary>
      <param name="entryLevel">The logging level which applies to to entry.</param>
      <param name="entryType">The type of entry to write.</param>
      <param name="entryClass">The class of entry - e.g. "Drive Dimension", useful for filtering.</param>
      <param name="entryTarget">The target of the entry - e.g. "SomeDimension (D1@Sketch1@SomePart)", useful for filtering.</param>
      <param name="entryDescription">The description of the entry - e.g. "Driving 'SomeDimension' to 167.8".</param>
      <param name="entryDetail">Optional additional detail.</param>
    </member>
    <member name="M:DriveWorks.Reporting.EventProxyReportWriter.BeginProcess(System.String,System.String,System.String)">
      <summary>Begins a process.</summary>
      <param name="processClass">The class of the process, e.g. "Drive Dimensions", useful for filtering.</param>
      <param name="processTarget">The target of the process, e.g. "SomePart.sldprt", useful for filtering.</param>
      <param name="processDescription">The human-readable description of the process, e.g. "Driving dimensions in part 'SomePart.sldprt'".</param>
    </member>
    <member name="E:DriveWorks.Reporting.EventProxyReportWriter.EntryWritten">
      <summary>Raised when an entry is written.</summary>
    </member>
    <member name="E:DriveWorks.Reporting.EventProxyReportWriter.ProcessBegun">
      <summary>Raised when a process is begun.</summary>
    </member>
    <member name="E:DriveWorks.Reporting.EventProxyReportWriter.ProcessEnded">
      <summary>Raised when a process is ended.</summary>
    </member>
    <member name="M:DriveWorks.Reporting.EventReportWriter.#ctor">
      <summary>Initializes a new instance of the  type.</summary>
    </member>
    <member name="M:DriveWorks.Reporting.EventReportWriter.EndProcess">
      <summary>Ends the current process.</summary>
    </member>
    <member name="M:DriveWorks.Reporting.EventReportWriter.WriteEntry(DriveWorks.Reporting.ReportingLevel,DriveWorks.Reporting.ReportEntryType,System.String,System.String,System.String,System.String)">
      <summary>Writes a report entry to the report.</summary>
      <param name="entryLevel">The logging level which applies to to entry.</param>
      <param name="entryType">The type of entry to write.</param>
      <param name="entryClass">The class of entry - e.g. "Drive Dimension", useful for filtering.</param>
      <param name="entryTarget">The target of the entry - e.g. "SomeDimension (D1@Sketch1@SomePart)", useful for filtering.</param>
      <param name="entryDescription">The description of the entry - e.g. "Driving 'SomeDimension' to 167.8".</param>
      <param name="entryDetail">Optional additional detail.</param>
    </member>
    <member name="M:DriveWorks.Reporting.EventReportWriter.BeginProcess(System.String,System.String,System.String)">
      <summary>Begins a process.</summary>
      <param name="processClass">The class of the process, e.g. "Drive Dimensions", useful for filtering.</param>
      <param name="processTarget">The target of the process, e.g. "SomePart.sldprt", useful for filtering.</param>
      <param name="processDescription">The human-readable description of the process, e.g. "Driving dimensions in part 'SomePart.sldprt'".</param>
    </member>
    <member name="M:DriveWorks.Reporting.EventReportWriter.BeginProcess(DriveWorks.IReportProcessItem)">
      <summary>Begins a process.</summary>
      <param name="processItem">The process item to use to begin this process.</param>
    </member>
    <member name="E:DriveWorks.Reporting.EventReportWriter.EntryWritten">
      <summary>Raised when an entry is written.</summary>
    </member>
    <member name="E:DriveWorks.Reporting.EventReportWriter.ProcessBegun">
      <summary>Raised when a process is begun.</summary>
    </member>
    <member name="E:DriveWorks.Reporting.EventReportWriter.ProcessEnded">
      <summary>Raised when a process is ended.</summary>
    </member>
    <member name="M:DriveWorks.Reporting.ProcessEventArgs.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="processClass">The class of the process, e.g. "Drive Dimensions", useful for filtering.</param>
      <param name="processTarget">The target of the process, e.g. "SomePart.sldprt", useful for filtering.</param>
      <param name="processDescription">The human-readable description of the process, e.g. "Driving dimensions in part 'SomePart.sldprt'".</param>
    </member>
    <member name="P:DriveWorks.Reporting.ProcessEventArgs.ProcessClass">
      <summary>Gets the process class.</summary>
    </member>
    <member name="P:DriveWorks.Reporting.ProcessEventArgs.ProcessDescription">
      <summary>Gets the process description.</summary>
    </member>
    <member name="P:DriveWorks.Reporting.ProcessEventArgs.ProcessTarget">
      <summary>Gets the process target.</summary>
    </member>
    <member name="M:DriveWorks.Reporting.ProxyReportWriter.#ctor">
      <summary>Initializes a new instance of the  type.</summary>
    </member>
    <member name="M:DriveWorks.Reporting.ProxyReportWriter.#ctor(DriveWorks.Reporting.IReportWriter)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="writer">The writer to which to proxy reporting calls (may be null).</param>
    </member>
    <member name="M:DriveWorks.Reporting.ProxyReportWriter.EndProcess">
      <summary>Ends the current process.</summary>
    </member>
    <member name="M:DriveWorks.Reporting.ProxyReportWriter.Finish">
      <summary>Finishes the report.</summary>
    </member>
    <member name="M:DriveWorks.Reporting.ProxyReportWriter.WriteEntry(DriveWorks.Reporting.ReportingLevel,DriveWorks.Reporting.ReportEntryType,System.String,System.String,System.String,System.String)">
      <summary>Writes a report entry to current process in the report.</summary>
      <param name="entryLevel">The logging level which applies to to entry.</param>
      <param name="entryType">The type of entry to write.</param>
      <param name="entryClass">The class of entry - e.g. "Drive Dimension", useful for filtering.</param>
      <param name="entryTarget">The target of the entry - e.g. "SomeDimension (D1@Sketch1@SomePart)", useful for filtering.</param>
      <param name="entryDescription">The description of the entry - e.g. "Driving 'SomeDimension' to 167.8".</param>
      <param name="entryDetail">Optional additional detail.</param>
    </member>
    <member name="M:DriveWorks.Reporting.ProxyReportWriter.BeginProcess(System.String,System.String,System.String)">
      <summary>Begins a process.</summary>
      <param name="processClass">The class of the process, e.g. "Drive Dimensions", useful for filtering.</param>
      <param name="processTarget">The target of the process, e.g. "SomePart.sldprt", useful for filtering.</param>
      <param name="processDescription">The human-readable description of the process, e.g. "Driving dimensions in part 'SomePart.sldprt'".</param>
    </member>
    <member name="P:DriveWorks.Reporting.ProxyReportWriter.InnerWriter">
      <summary>Gets/sets the inner report writer.</summary>
    </member>
    <member name="P:DriveWorks.Reporting.ProxyReportWriter.ProcessDepth">
      <summary>Gets the current depth of processes.</summary>
    </member>
    <member name="M:DriveWorks.Reporting.ReportPackage.#ctor(DriveWorks.Reporting.ReportingLevel)">
      <summary>Initializes a new instance of the  class.</summary>
      <param name="reportingLevel">The reporting level to use.</param>
    </member>
    <member name="M:DriveWorks.Reporting.ReportPackage.Close">
      <summary>Closes the current package connection.</summary>
    </member>
    <member name="M:DriveWorks.Reporting.ReportPackage.CreateReportWriter(System.String)">
      <summary>Creates a new report with the given title in the package.</summary>
      <returns>A report writer for the given report.</returns>
      <param name="title">The title of the report to create.</param>
    </member>
    <member name="M:DriveWorks.Reporting.ReportPackage.Open(System.String)">
      <summary>Opens a new report package.</summary>
      <param name="filePath">The full path to the report package to create.</param>
    </member>
    <member name="P:DriveWorks.Reporting.ReportPackage.Path">
      <summary>Gets the path to the package, or a null rerefence if the package hasn't been opened.</summary>
    </member>
    <member name="M:DriveWorks.Reporting.ReportReader.#ctor">
      <summary>Initializes a new instance of the  class.</summary>
    </member>
    <member name="M:DriveWorks.Reporting.ReportReader.#ctor(System.String)">
      <summary>Initializes a new instance of the  class and loads in a drivereport file.</summary>
      <param name="reportPath">The location of the drivereport file to load.</param>
    </member>
    <member name="P:DriveWorks.Reporting.ReportReader.Loaded">
      <summary>Value indicating if a any report data has been loaded into the reader.</summary>
    </member>
    <member name="P:DriveWorks.Reporting.ReportReader.Reports">
      <summary>Returns an array of available reports from the loaded report data.</summary>
    </member>
    <member name="M:DriveWorks.Reporting.ReportWriterBase.AssertNotDisposed">
      <summary>Throws an  if the object has been disposed.</summary>
    </member>
    <member name="M:DriveWorks.Reporting.ReportWriterBase.EndProcess">
      <summary>Ends the current process.</summary>
    </member>
    <member name="M:DriveWorks.Reporting.ReportWriterBase.Finalize">
      <summary>Handles object finalization.</summary>
    </member>
    <member name="M:DriveWorks.Reporting.ReportWriterBase.Finish">
      <summary>Finishes the report, flushing any cached contents to the report if necessary.</summary>
    </member>
    <member name="M:DriveWorks.Reporting.ReportWriterBase.WriteEntry(DriveWorks.Reporting.ReportingLevel,DriveWorks.Reporting.ReportEntryType,System.String,System.String,System.String,System.String)">
      <summary>Writes a report entry to the report.</summary>
      <param name="entryLevel">The logging level which applies to to entry.</param>
      <param name="entryType">The type of entry to write.</param>
      <param name="entryClass">The class of entry - e.g. "Drive Dimension", useful for filtering.</param>
      <param name="entryTarget">The target of the entry - e.g. "SomeDimension (D1@Sketch1@SomePart)", useful for filtering.</param>
      <param name="entryDescription">The description of the entry - e.g. "Driving 'SomeDimension' to 167.8".</param>
      <param name="entryDetail">Optional additional detail.</param>
    </member>
    <member name="M:DriveWorks.Reporting.ReportWriterBase.BeginProcess(System.String,System.String,System.String)">
      <summary>Begins a process.</summary>
      <param name="processClass">The class of the process, e.g. "Drive Dimensions", useful for filtering.</param>
      <param name="processTarget">The target of the process, e.g. "SomePart.sldprt", useful for filtering.</param>
      <param name="processDescription">The human-readable description of the process, e.g. "Driving dimensions in part 'SomePart.sldprt'".</param>
    </member>
    <member name="M:DriveWorks.Reporting.ReportWriterBase.BeginProcess(DriveWorks.IReportProcessItem)">
      <summary>Begins a process.</summary>
      <param name="processItem">The process item to use to begin this process.</param>
    </member>
    <member name="M:DriveWorks.Reporting.ReportWriterBase.Dispose(System.Boolean)">
      <summary>Disposes the report writer and flushes its contents to the report.</summary>
      <param name="disposing">True if the object is undergoing explicit finalization, otherwise false.</param>
    </member>
    <member name="P:DriveWorks.Reporting.ReportWriterBase.IsDisposed">
      <summary>Determines whether the report writer has been disposed.</summary>
    </member>
    <member name="P:DriveWorks.Reporting.ReportWriterBase.ProcessDepth">
      <summary>Gets the current depth of processes.</summary>
    </member>
    <member name="M:DriveWorks.Reporting.TraceReportWriter.#ctor(DriveWorks.Reporting.ReportingLevel)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="loggingLevel">The logging level to use.</param>
    </member>
    <member name="M:DriveWorks.Reporting.TraceReportWriter.EndProcess">
      <summary>Ends the current process.</summary>
    </member>
    <member name="M:DriveWorks.Reporting.TraceReportWriter.Finish">
      <summary>Finishes the report.</summary>
    </member>
    <member name="M:DriveWorks.Reporting.TraceReportWriter.WriteEntry(DriveWorks.Reporting.ReportingLevel,DriveWorks.Reporting.ReportEntryType,System.String,System.String,System.String,System.String)">
      <summary>Writes a report entry to current process in the report.</summary>
      <param name="entryLevel">The logging level which applies to to entry.</param>
      <param name="entryType">The type of entry to write.</param>
      <param name="entryClass">The class of entry - e.g. "Drive Dimension", useful for filtering.</param>
      <param name="entryTarget">The target of the entry - e.g. "SomeDimension (D1@Sketch1@SomePart)", useful for filtering.</param>
      <param name="entryDescription">The description of the entry - e.g. "Driving 'SomeDimension' to 167.8".</param>
      <param name="entryDetail">Optional additional detail.</param>
    </member>
    <member name="M:DriveWorks.Reporting.TraceReportWriter.BeginProcess(System.String,System.String,System.String)">
      <summary>Begins a process.</summary>
      <param name="processClass">The class of the process, e.g. "Drive Dimensions", useful for filtering.</param>
      <param name="processTarget">The target of the process, e.g. "SomePart.sldprt", useful for filtering.</param>
      <param name="processDescription">The human-readable description of the process, e.g. "Driving dimensions in part 'SomePart.sldprt'".</param>
    </member>
    <member name="M:DriveWorks.Reporting.TraceReportWriter.BeginProcess(DriveWorks.IReportProcessItem)">
      <summary>Begins a process.</summary>
      <param name="processItem">The process item to use to begin this process.</param>
    </member>
    <member name="P:DriveWorks.Reporting.TraceReportWriter.ProcessDepth">
      <summary>Gets the current depth of processes.</summary>
    </member>
    <member name="T:DriveWorks.Reporting.EntryEventHandler">
      <summary>Represents a method that will handle events related to report entries.</summary>
    </member>
    <member name="T:DriveWorks.Reporting.ProcessEventHandler">
      <summary>Represents a method that will handle events related to report processes.</summary>
    </member>
    <member name="T:DriveWorks.Rules.IFunctionInformation">
      <summary>Provides a contract for an object containing information on a function.</summary>
    </member>
    <member name="T:DriveWorks.Rules.IParseResult">
      <summary>Encapsulates the result of parsing a rule.</summary>
    </member>
    <member name="T:DriveWorks.Rules.IRuleError">
      <summary>Provides a contract for an object containing information on an error from a rule.</summary>
    </member>
    <member name="T:DriveWorks.Rules.IRuleNode">
      <summary>Provides a contract for an object containing information on a parsed rule node.</summary>
    </member>
    <member name="P:DriveWorks.Rules.IFunctionInformation.ArgumentDescriptions">
      <summary>Gets the descriptions for the arguments in the function, in order.</summary>
    </member>
    <member name="P:DriveWorks.Rules.IFunctionInformation.ArgumentNames">
      <summary>Get the names of the arguments for the function, in order.</summary>
    </member>
    <member name="P:DriveWorks.Rules.IFunctionInformation.ArgumentTypes">
      <summary>Gets the descriptions for the arguments in the function, in order.</summary>
    </member>
    <member name="P:DriveWorks.Rules.IFunctionInformation.FunctionCategory">
      <summary>Gets the category that the function belongs to.</summary>
    </member>
    <member name="P:DriveWorks.Rules.IFunctionInformation.FunctionDescription">
      <summary>Gets the description for the function.</summary>
    </member>
    <member name="P:DriveWorks.Rules.IFunctionInformation.FunctionLocalizedName">
      <summary>Gets the localized name of the function.</summary>
    </member>
    <member name="P:DriveWorks.Rules.IFunctionInformation.FunctionName">
      <summary>Gets the name of the function.</summary>
    </member>
    <member name="P:DriveWorks.Rules.IFunctionInformation.HasParameterArray">
      <summary>Determines whether the function has a variable number of arguments.</summary>
    </member>
    <member name="P:DriveWorks.Rules.IFunctionInformation.IsDeprecated">
      <summary>Gets whether or not this function has been deprecated/obsolete.</summary>
    </member>
    <member name="P:DriveWorks.Rules.IParseResult.AstRoot">
      <summary>Gets the root of the AST produced by the parse.</summary>
    </member>
    <member name="P:DriveWorks.Rules.IParseResult.Errors">
      <summary>Gets a collection of all the error nodes found in the rule.</summary>
    </member>
    <member name="P:DriveWorks.Rules.IParseResult.References">
      <summary>Gets a collection of all of the reference nodes.</summary>
    </member>
    <member name="P:DriveWorks.Rules.IRuleError.EndIndex">
      <summary>Gets the end index in the expression text, of the string from which this error was parsed.</summary>
    </member>
    <member name="P:DriveWorks.Rules.IRuleError.ErrorType">
      <summary>The type of error that this represents.</summary>
    </member>
    <member name="P:DriveWorks.Rules.IRuleError.StartIndex">
      <summary>Gets the start index in the expression text, of the string from which this error was parsed.</summary>
    </member>
    <member name="P:DriveWorks.Rules.IRuleNode.Children">
      <summary>The child nodes for this node.</summary>
    </member>
    <member name="P:DriveWorks.Rules.IRuleNode.EndIndex">
      <summary>Gets the inner end index in the expression text, of the string from which this node was parsed.</summary>
    </member>
    <member name="P:DriveWorks.Rules.IRuleNode.NodeType">
      <summary>The type of node that this represents.</summary>
    </member>
    <member name="P:DriveWorks.Rules.IRuleNode.OuterEndIndex">
      <summary>Gets the outer end index in the expression text, of the string from which this node was parsed.</summary>
    </member>
    <member name="P:DriveWorks.Rules.IRuleNode.OuterStartIndex">
      <summary>Gets the outer start index in the expression text, of the string from which this node was parsed.</summary>
    </member>
    <member name="P:DriveWorks.Rules.IRuleNode.OuterText">
      <summary>The outer text value for this node. Same as , but formatted with ideal white spaces.</summary>
    </member>
    <member name="P:DriveWorks.Rules.IRuleNode.RuleText">
      <summary>The entire rule text as it is formatted from the original rule.</summary>
    </member>
    <member name="P:DriveWorks.Rules.IRuleNode.StartIndex">
      <summary>Gets the inner start index in the expression text, of the string from which this node was parsed.</summary>
    </member>
    <member name="P:DriveWorks.Rules.IRuleNode.Text">
      <summary>The inner text value for this node.</summary>
    </member>
    <member name="T:DriveWorks.Rules.RuleNodeType">
      <summary>Represents the type of a node in an abstract syntax tree for a rule.</summary>
    </member>
    <member name="F:DriveWorks.Rules.RuleNodeType.Empty">
      <summary>The node type is not specified.</summary>
    </member>
    <member name="F:DriveWorks.Rules.RuleNodeType.Invalid">
      <summary>The node is invalid.</summary>
    </member>
    <member name="F:DriveWorks.Rules.RuleNodeType.FunctionCall">
      <summary>The node represents a function call.</summary>
    </member>
    <member name="F:DriveWorks.Rules.RuleNodeType.Operation">
      <summary>The node represents an operator.</summary>
    </member>
    <member name="F:DriveWorks.Rules.RuleNodeType.Reference">
      <summary>The node represents a reference to a named item.</summary>
    </member>
    <member name="F:DriveWorks.Rules.RuleNodeType.RelativeReference">
      <summary>The node represents a relative reference to an adjacent item.</summary>
    </member>
    <member name="F:DriveWorks.Rules.RuleNodeType.BooleanValue">
      <summary>The node represents a literal boolean value.</summary>
    </member>
    <member name="F:DriveWorks.Rules.RuleNodeType.StringValue">
      <summary>The node represents a literal string value.</summary>
    </member>
    <member name="F:DriveWorks.Rules.RuleNodeType.NumberValue">
      <summary>The node represents a literal numeric value.</summary>
    </member>
    <member name="F:DriveWorks.Rules.RuleNodeType.OpenParanthesis">
      <summary>The node represents an opening paranthesis.</summary>
    </member>
    <member name="F:DriveWorks.Rules.RuleNodeType.CloseParanthesis">
      <summary>The node represents a closing paranthesis.</summary>
    </member>
    <member name="F:DriveWorks.Rules.RuleNodeType.ArgumentSeparator">
      <summary>The node represents a separator between two arguments to a function call.</summary>
    </member>
    <member name="F:DriveWorks.Rules.RuleNodeType.OpenBrace">
      <summary>The node represents an opening brace.</summary>
    </member>
    <member name="F:DriveWorks.Rules.RuleNodeType.CloseBrace">
      <summary>The node represents a closing brace.</summary>
    </member>
    <member name="F:DriveWorks.Rules.RuleNodeType.ListOfListsSeparator">
      <summary>The node represents a list of lists separator.</summary>
    </member>
    <member name="F:DriveWorks.Rules.RuleNodeType.FormattedString">
      <summary>The node represents a formatted string.</summary>
    </member>
    <member name="F:DriveWorks.Rules.RuleNodeType.FormattedStringRule">
      <summary>The node represents a rule segment of a formatted string node.</summary>
    </member>
    <member name="F:DriveWorks.Rules.RuleNodeType.FormattedStringContent">
      <summary>The node represents a string segment of a formatted string node.</summary>
    </member>
    <member name="F:DriveWorks.Rules.RuleNodeType.LiteralArray">
      <summary>The node represents a literal array or table.</summary>
    </member>
    <member name="T:DriveWorks.Rules.RuleParseErrorType">
      <summary>Represents the type of error from a rule.</summary>
    </member>
    <member name="F:DriveWorks.Rules.RuleParseErrorType.ExpectedBeginParanthesis">
      <summary>A starting paranthesis was not found at an expected location.</summary>
    </member>
    <member name="F:DriveWorks.Rules.RuleParseErrorType.ExpectedEndParanthesis">
      <summary>An ending paranthesis was not found at the expected location.</summary>
    </member>
    <member name="F:DriveWorks.Rules.RuleParseErrorType.ExpectedName">
      <summary>A name was not found at an expected location.</summary>
    </member>
    <member name="F:DriveWorks.Rules.RuleParseErrorType.ExpectedSeperatorOrEndOfFunction">
      <summary>A list separator or ending-paranthesis was not found at the expected location in a function call.</summary>
    </member>
    <member name="F:DriveWorks.Rules.RuleParseErrorType.PrematureEndOfRule">
      <summary>The token stream was empty when more tokens where expected.</summary>
    </member>
    <member name="F:DriveWorks.Rules.RuleParseErrorType.SyntaxError">
      <summary>A syntax error was encountered.</summary>
    </member>
    <member name="F:DriveWorks.Rules.RuleParseErrorType.TailingTokens">
      <summary>The token stream contains unexpected trailing tokens.</summary>
    </member>
    <member name="F:DriveWorks.Rules.RuleParseErrorType.UnexpectedToken">
      <summary>An unexpected token was found.</summary>
    </member>
    <member name="T:DriveWorks.Rules.BasicRuleNode">
      <summary>Provides a basic implementation of </summary>
    </member>
    <member name="M:DriveWorks.Rules.BasicRuleNode.#ctor(System.String,System.String,System.String,DriveWorks.Rules.RuleNodeType,System.Int32,System.Int32,System.Int32,System.Int32,DriveWorks.Rules.IRuleNode[])">
      <summary>Creates a new instance of the  class.</summary>
      <param name="text">The inner text of the rule node.</param>
      <param name="outerText">The outer text of the rule node.</param>
      <param name="ruleText">The full text of the owning rule that this node is part of.</param>
      <param name="nodeType">The type for this rule node.</param>
      <param name="startIndex">The start index of the first character of the inner text of this node.</param>
      <param name="endIndex">The end index of the last character of the inner text of this node.</param>
      <param name="outerStartIndex">The start index of the first character of the outer text of this node.</param>
      <param name="outerEndIndex">The end index of the last character of the outer text of this node.</param>
      <param name="children">A collection of children for this node (can be empty).</param>
    </member>
    <member name="P:DriveWorks.Rules.BasicRuleNode.Children">
      <summary>Gets a collection of children for this node (can be empty).</summary>
    </member>
    <member name="P:DriveWorks.Rules.BasicRuleNode.EndIndex">
      <summary>Gets the end index of the last character of the inner text of this node.</summary>
    </member>
    <member name="P:DriveWorks.Rules.BasicRuleNode.NodeType">
      <summary>Gets the type for this rule node.</summary>
    </member>
    <member name="P:DriveWorks.Rules.BasicRuleNode.OuterEndIndex">
      <summary>Gets the end index of the last character of the outer text of this node.</summary>
    </member>
    <member name="P:DriveWorks.Rules.BasicRuleNode.OuterStartIndex">
      <summary>Gets the start index of the first character of the outer text of this node.</summary>
    </member>
    <member name="P:DriveWorks.Rules.BasicRuleNode.OuterText">
      <summary>Gets the outer text of the rule node.</summary>
    </member>
    <member name="P:DriveWorks.Rules.BasicRuleNode.RuleText">
      <summary>Gets the full text of the owning rule that this node is part of.</summary>
    </member>
    <member name="P:DriveWorks.Rules.BasicRuleNode.StartIndex">
      <summary>Gets the start index of the first character of the inner text of this node.</summary>
    </member>
    <member name="P:DriveWorks.Rules.BasicRuleNode.Text">
      <summary>Gets the inner text of the rule node.</summary>
    </member>
    <member name="T:DriveWorks.Security.IAuthenticationProvider">
      <summary>Provides a contract for pluggable authentication systems in DriveWorks.</summary>
    </member>
    <member name="T:DriveWorks.Security.IProviderCredentials">
      <summary>Represents a set of credentials specific to an authentication provider.</summary>
    </member>
    <member name="T:DriveWorks.Security.IProviderPrincipal">
      <summary>Represents a provider-specific security principal.</summary>
    </member>
    <member name="T:DriveWorks.Security.IProviderRole">
      <summary>Represents a provider-specific security role.</summary>
    </member>
    <member name="M:DriveWorks.Security.IAuthenticationProvider.Authenticate(DriveWorks.Security.IProviderCredentials)">
      <summary>Authenticates the given credentials and returns the relevant principal.</summary>
      <returns>An instance of a type derived from  which represents the authenticated principal, or a null reference if the
credentials are invalid.</returns>
      <param name="credentials">The credentials to authenticate.</param>
    </member>
    <member name="M:DriveWorks.Security.IProviderCredentials.GetPassword">
      <summary>Gets the principal's password if it is available.</summary>
    </member>
    <member name="P:DriveWorks.Security.IProviderCredentials.PrincipalId">
      <summary>A string which identifies the principal to whom the credentials belong.</summary>
    </member>
    <member name="P:DriveWorks.Security.IProviderCredentials.ProviderName">
      <summary>A string which identifies a provider which can authenticate the validity of the credentials.</summary>
    </member>
    <member name="P:DriveWorks.Security.IProviderCredentials.Token">
      <summary>A string which the provider can use to authenticate the validity of the credentials.</summary>
    </member>
    <member name="M:DriveWorks.Security.IProviderPrincipal.GetRoles">
      <summary>Gets the roles to which the principal belongs.</summary>
      <returns>An array of roles which may not be a null reference.</returns>
    </member>
    <member name="P:DriveWorks.Security.IProviderPrincipal.DisplayName">
      <summary>Gets a string which can be used in user interfaces to represent the principle.</summary>
    </member>
    <member name="P:DriveWorks.Security.IProviderPrincipal.EmailAddress">
      <summary>Gets the principal's e-mail address if applicable.</summary>
    </member>
    <member name="P:DriveWorks.Security.IProviderPrincipal.Name">
      <summary>Gets a string which uniquely identifies the principal</summary>
    </member>
    <member name="P:DriveWorks.Security.IProviderPrincipal.Provider">
      <summary>Gets the provider which returned the principal.</summary>
    </member>
    <member name="P:DriveWorks.Security.IProviderPrincipal.Token">
      <summary>Gets a string which is compared by DriveWorks with a stored token in the Group to validate the returned principal.</summary>
    </member>
    <member name="P:DriveWorks.Security.IProviderRole.DisplayName">
      <summary>Gets a string which can be used in user interfaces to represent the role.</summary>
    </member>
    <member name="P:DriveWorks.Security.IProviderRole.Id">
      <summary>Gets a string which uniquely identifies the role</summary>
    </member>
    <member name="P:DriveWorks.Security.IProviderRole.Provider">
      <summary>Gets the provider which returned the role.</summary>
    </member>
    <member name="T:DriveWorks.Security.GroupTablePermission">
      <summary>Provides information about permissions of access to group tables.</summary>
    </member>
    <member name="F:DriveWorks.Security.GroupTablePermission.None">
      <summary>No access or view or edit group table data.</summary>
    </member>
    <member name="F:DriveWorks.Security.GroupTablePermission.View">
      <summary>Access to view table data, not edit.</summary>
    </member>
    <member name="F:DriveWorks.Security.GroupTablePermission.Edit">
      <summary>Access to view and edit group table data.</summary>
    </member>
    <member name="T:DriveWorks.Security.AuthenticationProviderFactory">
      <summary>Provides registration and creation facilities for authentication providers.</summary>
    </member>
    <member name="T:DriveWorks.Security.AuthenticationProviderNameAttribute">
      <summary>Used to markup an authentication provider with its provider name so it can be registered with the .</summary>
    </member>
    <member name="T:DriveWorks.Security.DriveWorksAuthenticationProvider">
      <summary>Implements a provider which authenticates DriveWorks users.</summary>
    </member>
    <member name="T:DriveWorks.Security.DriveWorksCredentials">
      <summary>Represents the credentials required for a DriveWorks user.</summary>
    </member>
    <member name="T:DriveWorks.Security.DriveWorksPrincipal">
      <summary>Represents an authenticated DriveWorks principal.</summary>
    </member>
    <member name="T:DriveWorks.Security.StandardProjectPermissions">
      <summary>Provides quick access to standard project permissions.</summary>
    </member>
    <member name="T:DriveWorks.Security.TeamDetails">
      <summary>Provides information about a registered team of users in a DriveWorks group.</summary>
    </member>
    <member name="T:DriveWorks.Security.TeamGroupTablePermission">
      <summary>Provides information about a permission held by a team on a given group table.</summary>
    </member>
    <member name="T:DriveWorks.Security.TeamProjectPermission">
      <summary>Provides information about a permission held by a team on a given project.</summary>
    </member>
    <member name="T:DriveWorks.Security.UserDetails">
      <summary>Provides information about a registered user in a DriveWorks group.</summary>
    </member>
    <member name="M:DriveWorks.Security.AuthenticationProviderFactory.CreateProvider(System.String)">
      <summary>Creates an instance of the provider which has been registered with the specified providerName.</summary>
      <returns>A provider implementation or a null reference (Nothing in Visual Basic) if the providerName is unknown.</returns>
      <param name="providerName">The name of the provider to instantiate.</param>
    </member>
    <member name="M:DriveWorks.Security.AuthenticationProviderFactory.RegisterProvider(System.Type)">
      <summary>Registers an authentication provider with DriveWorks.</summary>
      <param name="providerType">The type of the provider to register.</param>
    </member>
    <member name="M:DriveWorks.Security.AuthenticationProviderNameAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="providerName">The name of the authentication provider.</param>
    </member>
    <member name="P:DriveWorks.Security.AuthenticationProviderNameAttribute.ProviderName">
      <summary>Gets the authentication provider's name.</summary>
    </member>
    <member name="M:DriveWorks.Security.DriveWorksAuthenticationProvider.Authenticate(DriveWorks.Security.IProviderCredentials)">
      <summary>Authenticates DriveWorks credentials.</summary>
      <exception caption="" cref="T:System.ArgumentOutOfRangeException">The credentials are of the wrong type.</exception>
      <returns>A principal representing a DriveWorks user.</returns>
      <param name="credentials">The credentials to authenticate which must be an instance of the  type.</param>
    </member>
    <member name="M:DriveWorks.Security.DriveWorksCredentials.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the  type.</summary>
    </member>
    <member name="M:DriveWorks.Security.DriveWorksCredentials.Create(System.String,System.String)">
      <summary>Initializes a new instance of the  type.</summary>
      <returns>An initialized instance of the type with the given credentials.</returns>
      <param name="userName">The name of the DriveWorks user.</param>
      <param name="password">The password of the DriveWorks user.</param>
    </member>
    <member name="M:DriveWorks.Security.DriveWorksCredentials.CreateFromHash(System.String,System.String)">
      <summary>Initializes a new instance of the  type.</summary>
      <returns>An initialized instance of the type with the given credentials.</returns>
      <param name="userName">The name of the DriveWorks user.</param>
      <param name="passwordHash">The hashed password of the DriveWorks user.</param>
    </member>
    <member name="M:DriveWorks.Security.DriveWorksCredentials.SetPassword(System.String,System.Boolean)">
      <summary>Hashes and stores the given password.</summary>
      <param name="password">The password to hash and store.</param>
      <param name="preservePassword">True to store the password, false to discard it after the hash has been computed.</param>
    </member>
    <member name="P:DriveWorks.Security.DriveWorksCredentials.PasswordHash">
      <summary>Gets/sets the hashed password of the represented DriveWorks user.</summary>
    </member>
    <member name="P:DriveWorks.Security.DriveWorksCredentials.UserName">
      <summary>Gets/sets the name of the represented DriveWorks user.</summary>
    </member>
    <member name="P:DriveWorks.Security.DriveWorksPrincipal.DisplayName">
      <summary>Always returns a null reference.</summary>
    </member>
    <member name="P:DriveWorks.Security.DriveWorksPrincipal.EmailAddress">
      <summary>Always returns a null reference.</summary>
    </member>
    <member name="P:DriveWorks.Security.DriveWorksPrincipal.LoginName">
      <summary>Gets the principal identifier which is the DriveWorks user login name.</summary>
    </member>
    <member name="P:DriveWorks.Security.DriveWorksPrincipal.Provider">
      <summary>Gets the DriveWorks Authentication Provider instance which created the principal.</summary>
    </member>
    <member name="P:DriveWorks.Security.DriveWorksPrincipal.Token">
      <summary>Gets the principal token which in the case of a DriveWorks user is the MD5 hash of the user's password.</summary>
    </member>
    <member name="F:DriveWorks.Security.StandardProjectPermissions.EditPermission">
      <summary>The permission required to edit a DriveWorks project.</summary>
    </member>
    <member name="F:DriveWorks.Security.StandardProjectPermissions.SpecifyPermission">
      <summary>The permission required to specify a DriveWorks project.</summary>
    </member>
    <member name="P:DriveWorks.Security.TeamDetails.CanEditAllSpecifications">
      <summary>Gets/sets whether users in the team can view and edit all specifications.</summary>
    </member>
    <member name="P:DriveWorks.Security.TeamDetails.CanEditGroupSecurity">
      <summary>Gets/sets whether users in the team can edit the group's teams and users details.</summary>
    </member>
    <member name="P:DriveWorks.Security.TeamDetails.DisplayName">
      <summary>Gets/sets the display name of the team.</summary>
    </member>
    <member name="P:DriveWorks.Security.TeamDetails.Id">
      <summary>Gets the unique identifier of the team.</summary>
    </member>
    <member name="P:DriveWorks.Security.TeamDetails.IsAllowedCapture">
      <summary>Gets/sets whether users in the team have permission to add, edit, and delete capture information.</summary>
    </member>
    <member name="P:DriveWorks.Security.TeamDetails.ProviderName">
      <summary>Gets the name of the provider responsible for the team.</summary>
    </member>
    <member name="P:DriveWorks.Security.TeamDetails.TeamName">
      <summary>Gets/sets the unique name of the team.</summary>
    </member>
    <member name="M:DriveWorks.Security.TeamGroupTablePermission.#ctor(System.Guid,System.Guid,DriveWorks.Security.GroupTablePermission)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="teamId">The unique identifier of the team to which the permission applies.</param>
      <param name="groupTableId">The unique identifier of the group data table to which permission is given.</param>
      <param name="permissionType">The type of the permission which is enabled.</param>
    </member>
    <member name="P:DriveWorks.Security.TeamGroupTablePermission.GroupTableId">
      <summary>Gets the unique identifier of the group data table to which the permission applies.</summary>
    </member>
    <member name="P:DriveWorks.Security.TeamGroupTablePermission.PermissionType">
      <summary>Gets the type of the permission granted to the team on the group table.</summary>
    </member>
    <member name="P:DriveWorks.Security.TeamGroupTablePermission.TeamId">
      <summary>Gets the unique identifier of the team to which the permission applies.</summary>
    </member>
    <member name="M:DriveWorks.Security.TeamProjectPermission.#ctor(System.Guid,System.Guid,System.Guid)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="teamId">The unique identifier of the team to which the permission applies.</param>
      <param name="projectId">The unique identifier of the project to which permission is given.</param>
      <param name="permissionId">The unique identifier of the permission which is enabled, generally one of the values from .</param>
    </member>
    <member name="P:DriveWorks.Security.TeamProjectPermission.PermissionId">
      <summary>Gets the unique identifier of the permission granted to the team on the project.</summary>
    </member>
    <member name="P:DriveWorks.Security.TeamProjectPermission.ProjectId">
      <summary>Gets the unique identifier of the project to which the permission applies.</summary>
    </member>
    <member name="P:DriveWorks.Security.TeamProjectPermission.TeamId">
      <summary>Gets the unique identifier of the team to which the permission applies.</summary>
    </member>
    <member name="P:DriveWorks.Security.UserDetails.DisplayName">
      <summary>Gets sets the user display name.</summary>
    </member>
    <member name="P:DriveWorks.Security.UserDetails.EmailAddress">
      <summary>Gets/sets the user e-mail address.</summary>
    </member>
    <member name="P:DriveWorks.Security.UserDetails.Id">
      <summary>Gets the user identifier.</summary>
    </member>
    <member name="P:DriveWorks.Security.UserDetails.IsEnabled">
      <summary>Gets/sets whether the user's account is enabled.</summary>
    </member>
    <member name="P:DriveWorks.Security.UserDetails.IsTeamLeader">
      <summary>Gets/sets whether the user is a team leader or a standard user.</summary>
    </member>
    <member name="P:DriveWorks.Security.UserDetails.LoginName">
      <summary>Gets the unique name of the principal.</summary>
    </member>
    <member name="P:DriveWorks.Security.UserDetails.ProviderName">
      <summary>Gets the name of the provider responsible for the user.</summary>
    </member>
    <member name="T:DriveWorks.Specification.ConditionFailBehavior">
      <summary>Specifies the behavior of an item to which a condition is attached when the condition evaluates to false.</summary>
    </member>
    <member name="F:DriveWorks.Specification.ConditionFailBehavior.Disable">
      <summary>Disables the UI for the item to which the condition is attached.</summary>
    </member>
    <member name="F:DriveWorks.Specification.ConditionFailBehavior.Hide">
      <summary>Hides the UI for the item to which the condition is attached.</summary>
    </member>
    <member name="T:DriveWorks.Specification.ConditionResult">
      <summary>Specifies the result of evaluating a condition.</summary>
    </member>
    <member name="F:DriveWorks.Specification.ConditionResult.Disabled">
      <summary>Disable the UI for the item to which the condition is attached.</summary>
    </member>
    <member name="F:DriveWorks.Specification.ConditionResult.Hidden">
      <summary>Hide the UI for the item to which the condition is attached.</summary>
    </member>
    <member name="F:DriveWorks.Specification.ConditionResult.Enabled">
      <summary>Show and enable the UI for the item to which the condition is attached.</summary>
    </member>
    <member name="T:DriveWorks.Specification.DocumentGenerationOptions">
      <summary>Provides possible values for the document generation setting which governs when documents get generated using the default specification-flow.</summary>
    </member>
    <member name="F:DriveWorks.Specification.DocumentGenerationOptions.Finish">
      <summary>Documents get generated on finish.</summary>
    </member>
    <member name="F:DriveWorks.Specification.DocumentGenerationOptions.Release">
      <summary>Documents get generated on release.</summary>
    </member>
    <member name="F:DriveWorks.Specification.DocumentGenerationOptions.Both">
      <summary>Documents always get generated.</summary>
    </member>
    <member name="T:DriveWorks.Specification.NavigationOptions">
      <summary>The options available for navigation.</summary>
    </member>
    <member name="F:DriveWorks.Specification.NavigationOptions.Forwards">
      <summary>Navigate to the next form.</summary>
    </member>
    <member name="F:DriveWorks.Specification.NavigationOptions.Backwards">
      <summary>Navigate to the previous form.</summary>
    </member>
    <member name="F:DriveWorks.Specification.NavigationOptions.First">
      <summary>Navigate to the first form.</summary>
    </member>
    <member name="T:DriveWorks.Specification.SpecificationDialogCloseOptions">
      <summary>Value used by  to depict it's available closing options.</summary>
    </member>
    <member name="F:DriveWorks.Specification.SpecificationDialogCloseOptions.Close">
      <summary>Close option, equivalent to ok.</summary>
    </member>
    <member name="F:DriveWorks.Specification.SpecificationDialogCloseOptions.Cancel">
      <summary>Cancel option.</summary>
    </member>
    <member name="T:DriveWorks.Specification.SpecificationType">
      <summary>Represents the type of a specification, i.e. whether it was newly created, copied, etc.</summary>
    </member>
    <member name="F:DriveWorks.Specification.SpecificationType.NotLoaded">
      <summary>The specification hasn't been loaded.</summary>
    </member>
    <member name="F:DriveWorks.Specification.SpecificationType.New">
      <summary>The specification is a new specification.</summary>
    </member>
    <member name="F:DriveWorks.Specification.SpecificationType.Existing">
      <summary>The specification is an opened existing specification.</summary>
    </member>
    <member name="F:DriveWorks.Specification.SpecificationType.Copied">
      <summary>The specification is a copy of an existing specification.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StateType">
      <summary>Represents the type of state.</summary>
    </member>
    <member name="F:DriveWorks.Specification.StateType.Running">
      <summary>If a state is a "Running" state it means it provides forms to the end-user.</summary>
    </member>
    <member name="F:DriveWorks.Specification.StateType.Paused">
      <summary>If a state is a "Paused" state, it means it is waiting for the user to perform an operation which will move the specification into another state.</summary>
    </member>
    <member name="F:DriveWorks.Specification.StateType.Automatic">
      <summary>If a state is an "Automatic" state, it means it is waiting for a DriveWorks Server machine to enact an operation which will move the specification into another
state.</summary>
    </member>
    <member name="T:DriveWorks.Specification.TaskListEntryType">
      <summary>The type of a task list entry.</summary>
    </member>
    <member name="F:DriveWorks.Specification.TaskListEntryType.Information">
      <summary>The entry is informative.</summary>
    </member>
    <member name="F:DriveWorks.Specification.TaskListEntryType.Warning">
      <summary>The entry is a warning.</summary>
    </member>
    <member name="F:DriveWorks.Specification.TaskListEntryType.Error">
      <summary>The entry indicates a problem that requires fixing.</summary>
    </member>
    <member name="T:DriveWorks.Specification.AdditionalFoldersCreatedEventArgs">
      <summary>Provides the event data for the additional folder creation event.</summary>
    </member>
    <member name="T:DriveWorks.Specification.AvailableOperation">
      <summary>Provides information about the runtime availability of an operation.</summary>
    </member>
    <member name="T:DriveWorks.Specification.AvailableTransition">
      <summary>Provides information about the runtime availability of a transition.</summary>
    </member>
    <member name="T:DriveWorks.Specification.Condition">
      <summary>Represents a condition which governs the availability of an operation, task, or transition in a specification-flow.</summary>
    </member>
    <member name="T:DriveWorks.Specification.ConditionAttribute">
      <summary>Provides descriptive information about a condition.</summary>
    </member>
    <member name="T:DriveWorks.Specification.ConditionEventArgs">
      <summary>Provides the event data for condition events.</summary>
    </member>
    <member name="T:DriveWorks.Specification.ConditionNotFoundException">
      <summary>Thrown when a project cannot be loaded because implementations could not be found for one or more conditions.</summary>
    </member>
    <member name="T:DriveWorks.Specification.Conditions">
      <summary>Manages the conditions which govern the availability of an item in a specification-flow.</summary>
    </member>
    <member name="T:DriveWorks.Specification.EventSequenceEventArgs">
      <summary>Provides the event data for event events.</summary>
    </member>
    <member name="T:DriveWorks.Specification.FlowEvent">
      <summary>Represents an event in a specification-flow.</summary>
    </member>
    <member name="T:DriveWorks.Specification.FlowProperties">
      <summary>Represents a collection of specification-flow properties.</summary>
    </member>
    <member name="T:DriveWorks.Specification.FlowProperty">
      <summary>Represents an untyped property on a condition or task.</summary>
    </member>
    <member name="T:DriveWorks.Specification.FlowProperty`1">
      <summary>Represents a typed property on a condition or task.</summary>
      <typeparam name="T">The type of the property.</typeparam>
    </member>
    <member name="T:DriveWorks.Specification.FlowPropertyInfo">
      <summary>Provides descriptive information about a flow property.</summary>
    </member>
    <member name="T:DriveWorks.Specification.IncompleteNavigationException">
      <summary>Thrown when a specification is started based on a project with an incomplete navigation.</summary>
    </member>
    <member name="T:DriveWorks.Specification.InitialStateInvalidException">
      <summary>Thrown when a specification cannot be loaded because the initial state is not specified.</summary>
    </member>
    <member name="T:DriveWorks.Specification.InvalidTransitionTargetException">
      <summary>Thrown when a specficaiton transition has no target state or connects two running states together.</summary>
    </member>
    <member name="T:DriveWorks.Specification.MacroAbortedException">
      <summary>Thrown when DriveWorks macro execution is aborted.</summary>
    </member>
    <member name="T:DriveWorks.Specification.NoInitialStateException">
      <summary>Thrown when an attempt is made to start a specification based on a project with a specification flow whose initial state is not set.</summary>
    </member>
    <member name="T:DriveWorks.Specification.NotRunningStateException">
      <summary>Thrown when an attempt is made to start a specification based on a project with a specification flow whose initial state is not a running state.</summary>
    </member>
    <member name="T:DriveWorks.Specification.Operation">
      <summary>Represents an operation which can be invoked for a given state.</summary>
    </member>
    <member name="T:DriveWorks.Specification.OperationEventArgs">
      <summary>Provides the event data for operation events.</summary>
    </member>
    <member name="T:DriveWorks.Specification.Operations">
      <summary>Manages the operations which are available for a given state in a specification-flow.</summary>
    </member>
    <member name="T:DriveWorks.Specification.ProjectDetailsEventArgs">
      <summary>Provides the event data for project details events.</summary>
    </member>
    <member name="T:DriveWorks.Specification.PropertyInvalidException">
      <summary>Thrown when a project cannot be loaded because a referenced property could not be found or was of the wrong type.</summary>
    </member>
    <member name="T:DriveWorks.Specification.RuleResults">
      <summary>Provides access to the rule results for an entity such as a document or component.</summary>
    </member>
    <member name="T:DriveWorks.Specification.SpecificationContext">
      <summary>Provides contextual information to a running specification-flow.</summary>
    </member>
    <member name="T:DriveWorks.Specification.SpecificationContextEventArgs">
      <summary>Provides event data for events involving a specification context.</summary>
    </member>
    <member name="T:DriveWorks.Specification.SpecificationDetails">
      <summary>Provides information about a registered DriveWorks specification.</summary>
    </member>
    <member name="T:DriveWorks.Specification.SpecificationDetailsEventArgs">
      <summary>Provides the event data for specification details events.</summary>
    </member>
    <member name="T:DriveWorks.Specification.SpecificationDocumentDetails">
      <summary>Provides information about a registered specification document.</summary>
    </member>
    <member name="T:DriveWorks.Specification.SpecificationDocumentEventArgs">
      <summary>Provides the event data for specification document events.</summary>
    </member>
    <member name="T:DriveWorks.Specification.SpecificationEnvironment">
      <summary>Provides the environment required for a specification.</summary>
    </member>
    <member name="T:DriveWorks.Specification.SpecificationExistsException">
      <summary>Thrown when a transition could not be invoked because a specification with the same name already exists.</summary>
    </member>
    <member name="T:DriveWorks.Specification.SpecificationFlowDefinition">
      <summary>Supports working with a customized specification-flow definition on a project.</summary>
    </member>
    <member name="T:DriveWorks.Specification.SpecificationForm">
      <summary>Provides information about a form in the navigation of a running specification.</summary>
    </member>
    <member name="T:DriveWorks.Specification.SpecificationHostControlContextEventArgs">
      <summary>Provides event data for Specification host control based events on specification contexts.</summary>
    </member>
    <member name="T:DriveWorks.Specification.SpecificationMacro">
      <summary>Represents a specification macro.</summary>
    </member>
    <member name="T:DriveWorks.Specification.SpecificationMacroEventArgs">
      <summary>Provides the event data for specification macro events.</summary>
    </member>
    <member name="T:DriveWorks.Specification.SpecificationMacros">
      <summary>Provides access to the specification macros in a project.</summary>
    </member>
    <member name="T:DriveWorks.Specification.SpecificationNameInvalidException">
      <summary>Thrown when a transition could not be invoked because the specification name is invalid.</summary>
    </member>
    <member name="T:DriveWorks.Specification.SpecificationNameRuleInvalidException">
      <summary>Thrown when a transition could not be invoked because the specification's name rule is invalid.</summary>
    </member>
    <member name="T:DriveWorks.Specification.SpecificationTaskDetails">
      <summary>Provides information about a registered DriveWorks specification task.</summary>
    </member>
    <member name="T:DriveWorks.Specification.SpecificationTaskList">
      <summary>Encapsulates the task list for a running specification.</summary>
    </member>
    <member name="T:DriveWorks.Specification.SpecificationTaskListEntry">
      <summary>Represents an entry in a running specification's task list.</summary>
    </member>
    <member name="T:DriveWorks.Specification.SpecificationTaskListEntryEventArgs">
      <summary>Provides event data for specification task list entry events.</summary>
    </member>
    <member name="T:DriveWorks.Specification.State">
      <summary>Provides a means for working with the definition of a specific state in a specification-flow.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StateChangeEventArgs">
      <summary>Provides the event data for state change events.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StateEventArgs">
      <summary>Provides the event data for state events.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StateNotFoundException">
      <summary>Thrown when a project cannot be loaded because one or more referenced states could not be found.</summary>
    </member>
    <member name="T:DriveWorks.Specification.States">
      <summary>Provides access to the states for a specification flow.</summary>
    </member>
    <member name="T:DriveWorks.Specification.Task">
      <summary>The base class for all tasks which can be added to the task sequences for events which get fired by operations, transitions, and states.</summary>
    </member>
    <member name="T:DriveWorks.Specification.TaskAttribute">
      <summary>Provides descriptive information about a task.</summary>
    </member>
    <member name="T:DriveWorks.Specification.TaskEventArgs">
      <summary>Provides the event data for task events.</summary>
    </member>
    <member name="T:DriveWorks.Specification.TaskExecutionException">
      <summary>Thrown when a DriveWorks task fails to run.</summary>
    </member>
    <member name="T:DriveWorks.Specification.TaskListNotEmptyException">
      <summary>Thrown when the task list contains tasks which require resolution before performing some action in the specification.</summary>
    </member>
    <member name="T:DriveWorks.Specification.TaskNotFoundException">
      <summary>Thrown when a project cannot be loaded because implementations could not be found for one or more tasks.</summary>
    </member>
    <member name="T:DriveWorks.Specification.TaskSequence">
      <summary>Represents a sequence of tasks to be executed for an operation or event.</summary>
    </member>
    <member name="T:DriveWorks.Specification.Teams">
      <summary>Manages the list of teams which have access to a given item in a specification-flow.</summary>
    </member>
    <member name="T:DriveWorks.Specification.Transition">
      <summary>Represents a transition from one state to another.</summary>
    </member>
    <member name="T:DriveWorks.Specification.TransitionEventArgs">
      <summary>Provides the event data for transition events.</summary>
    </member>
    <member name="T:DriveWorks.Specification.Transitions">
      <summary>Manages the transitions which are available for a given state in a specification-flow.</summary>
    </member>
    <member name="T:DriveWorks.Specification.UnparsableFlowPropertyValueException">
      <summary>Thrown when a FlowProperty's rule results in a value that can't be parsed to the FlowProperty's type.</summary>
    </member>
    <member name="M:DriveWorks.Specification.AdditionalFoldersCreatedEventArgs.#ctor(System.String[],System.String[])">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="relativePaths">The relative paths of the additional folders that were created.</param>
      <param name="fullPaths">The full paths of the additional folders that were created.</param>
    </member>
    <member name="P:DriveWorks.Specification.AdditionalFoldersCreatedEventArgs.FullPaths">
      <summary>Gets the full paths of the additional folders that were created.</summary>
    </member>
    <member name="P:DriveWorks.Specification.AdditionalFoldersCreatedEventArgs.RelativePaths">
      <summary>Gets the relative paths of the additional folders that were created.</summary>
    </member>
    <member name="P:DriveWorks.Specification.AvailableOperation.ConditionResult">
      <summary>Gets the result of evaluating the operation's conditions.</summary>
    </member>
    <member name="P:DriveWorks.Specification.AvailableOperation.Operation">
      <summary>Gets the operation.</summary>
    </member>
    <member name="P:DriveWorks.Specification.AvailableOperation.RequiresSingleContext">
      <summary>Gets whether only a single specification must be selected in order for the operation to be executed.</summary>
    </member>
    <member name="P:DriveWorks.Specification.AvailableTransition.ConditionResult">
      <summary>Gets the result of evaluating the transition's conditions.</summary>
    </member>
    <member name="P:DriveWorks.Specification.AvailableTransition.Transition">
      <summary>Gets the transition.</summary>
    </member>
    <member name="M:DriveWorks.Specification.Condition.AssertNotDeleted">
      <summary>Throws an instance of the  if the item has been deleted.</summary>
      <exception caption="" cref="T:DriveWorks.ItemDeletedException">The item has been deleted.</exception>
    </member>
    <member name="M:DriveWorks.Specification.Condition.Delete">
      <summary>Deletes the condition.</summary>
    </member>
    <member name="M:DriveWorks.Specification.Condition.DeleteCore">
      <summary>Performs any clean-up required when overridden by a derived class.</summary>
    </member>
    <member name="M:DriveWorks.Specification.Condition.GetElement">
      <summary>Returns a deep copy of this condition's Xml Element.</summary>
    </member>
    <member name="M:DriveWorks.Specification.Condition.TryGetOutputEndpoint(System.String,System.Boolean,DriveWorks.EventFlow.NodeOutput@)">
      <summary>Attempts to retrieve the end point with the given name.</summary>
      <returns>True if the end point was found, otherwise false.</returns>
      <param name="name">The name of the end point to find.</param>
      <param name="isNavigation">True if the requested end point is a navigation end point.</param>
      <param name="output">The end point (if found), otherwise a null reference.</param>
    </member>
    <member name="P:DriveWorks.Specification.Condition.FailBehavior">
      <summary>Gets/sets the fail behavior of the condition.</summary>
    </member>
    <member name="P:DriveWorks.Specification.Condition.FailedOutput">
      <summary>The output that gets fulfilled when this condition does not pass.</summary>
    </member>
    <member name="P:DriveWorks.Specification.Condition.Flow">
      <summary>Gets the flow this node is associated with.</summary>
    </member>
    <member name="P:DriveWorks.Specification.Condition.IsDeleted">
      <summary>Determines whether the condition has been deleted.</summary>
    </member>
    <member name="P:DriveWorks.Specification.Condition.Left">
      <summary>Gets the left position of this condition.</summary>
    </member>
    <member name="P:DriveWorks.Specification.Condition.NavigationInput">
      <summary>Gets the navigation input of this node.</summary>
    </member>
    <member name="P:DriveWorks.Specification.Condition.NavigationOutput">
      <summary>Gets the navigation output of this node.</summary>
    </member>
    <member name="P:DriveWorks.Specification.Condition.Negated">
      <summary>Determins whether the condition evaluation is to be negated (have not applied to it).</summary>
    </member>
    <member name="P:DriveWorks.Specification.Condition.Outputs">
      <summary>Gets a collection of all outputs of this node.</summary>
    </member>
    <member name="P:DriveWorks.Specification.Condition.PassedOutput">
      <summary>The output that gets fulfilled when this condition passes.</summary>
    </member>
    <member name="P:DriveWorks.Specification.Condition.Properties">
      <summary>Gets access to the property registration service.</summary>
    </member>
    <member name="P:DriveWorks.Specification.Condition.SuppressStandardOutputs">
      <summary>Gets whether standard outputs (Passed / Failed) should be suppressed.</summary>
    </member>
    <member name="P:DriveWorks.Specification.Condition.Title">
      <summary>Gets/sets the human-readable title of the condition.</summary>
    </member>
    <member name="P:DriveWorks.Specification.Condition.Top">
      <summary>Gets the top position of this condition.</summary>
    </member>
    <member name="E:DriveWorks.Specification.Condition.Deleted">
      <summary>Occurs when the condition is deleted.</summary>
    </member>
    <member name="M:DriveWorks.Specification.ConditionAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the  class.</summary>
      <param name="displayName">The localized display name of the condition, or a resource string which identifies the string to use.</param>
      <param name="image">A resource string which identifies the image to use.</param>
    </member>
    <member name="P:DriveWorks.Specification.ConditionAttribute.DisplayName">
      <summary>Gets a localized display name of the condition, or a resource string which identifies the string to use.</summary>
    </member>
    <member name="P:DriveWorks.Specification.ConditionAttribute.Image">
      <summary>Gets a resource string which identifies the image to use.</summary>
    </member>
    <member name="M:DriveWorks.Specification.ConditionEventArgs.#ctor(DriveWorks.Specification.Condition)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="condition">The condition which is the target of the event.</param>
    </member>
    <member name="P:DriveWorks.Specification.ConditionEventArgs.Condition">
      <summary>Gets the condition which is the target of the event.</summary>
    </member>
    <member name="P:DriveWorks.Specification.ConditionNotFoundException.TypeName">
      <summary>Gets the type name of the condition for which an implementation could not be found.</summary>
    </member>
    <member name="M:DriveWorks.Specification.Conditions.Clear">
      <summary>Clears all of the conditions.</summary>
    </member>
    <member name="M:DriveWorks.Specification.Conditions.GetEnumerator">
      <summary>Gets an enumerator suitable for enumerating the conditions in the collection.</summary>
      <returns>An IEnumerator specialized for the  type.</returns>
    </member>
    <member name="M:DriveWorks.Specification.Conditions.IndexOf(DriveWorks.Specification.Condition)">
      <summary>Gets the index of the given condition.</summary>
      <returns>The index of the condition, or -1 if the condition is not a part of this collection.</returns>
      <param name="condition">The condition whose index to retrieve.</param>
    </member>
    <member name="M:DriveWorks.Specification.Conditions.Insert(System.Int32,DriveWorks.Specification.Condition)">
      <summary>Inserts the condition into the condition sequence at the specified index.</summary>
      <exception caption="" cref="T:System.IndexOutOfRangeException">Thrown if the %index% parameter is out of range.Thrown if the %condition% parameter is a null reference.</exception>
      <param name="index">The index at which to insert the condition.</param>
      <param name="condition">The condition to insert.</param>
    </member>
    <member name="M:DriveWorks.Specification.Conditions.Move(System.Int32,System.Int32)">
      <summary>Move the condition from its current index to the specified index.</summary>
      <param name="oldIndex">The old index of the condition.</param>
      <param name="newIndex">The new index of the condition.</param>
    </member>
    <member name="M:DriveWorks.Specification.Conditions.ToArray">
      <summary>Copies the conditions into a new array and returns it.</summary>
      <returns>An array of conditions.</returns>
    </member>
    <member name="M:DriveWorks.Specification.Conditions.CreateCondition``1(System.String)">
      <summary>Creates and adds a new condition to the condition sequence.</summary>
      <exception caption="" cref="T:System.ArgumentOutOfRangeException">The type specified in for the type parameter T isn't defined in a extension library.</exception>
      <returns>The newly created condition.</returns>
      <typeparam name="T">The type of the condition to add.</typeparam>
    </member>
    <member name="M:DriveWorks.Specification.Conditions.CreateCondition(System.Type,System.String)">
      <summary>Creates and adds a new condition to the condition sequence.</summary>
      <exception caption="" cref="T:System.ArgumentOutOfRangeException">The type specified in %conditionType% does not inherit from %T:DriveWorks.Specification.Condition% or isn't defined in a extension library.</exception>
      <returns>The newly created condition.</returns>
      <param name="conditionType">The type of the condition to add.</param>
    </member>
    <member name="M:DriveWorks.Specification.Conditions.CreateCondition(System.Type,System.String,System.Double,System.Double)">
      <summary>Creates and adds a new condition to the condition sequence.</summary>
      <exception caption="" cref="T:System.ArgumentOutOfRangeException">The type specified in %conditionType% does not inherit from %T:DriveWorks.Specification.Condition% or isn't defined in a extension library.</exception>
      <returns>The newly created condition.</returns>
      <param name="conditionType">The type of the condition to add.</param>
      <param name="left">The left position of the condition.</param>
      <param name="top">The top position of the condition.</param>
    </member>
    <member name="P:DriveWorks.Specification.Conditions.Count">
      <summary>Gets the number of conditions in the collection.</summary>
    </member>
    <member name="P:DriveWorks.Specification.Conditions.Item(System.Int32)">
      <summary>Gets the condition at the specified index.</summary>
      <exception caption="" cref="T:System.IndexOutOfRangeException">Thrown if the specified index is out of range.</exception>
      <param name="index">The zero-based index of the condition to get.</param>
    </member>
    <member name="E:DriveWorks.Specification.Conditions.ConditionCreated">
      <summary>Occurs when a condition is created.</summary>
    </member>
    <member name="E:DriveWorks.Specification.Conditions.ConditionDeleted">
      <summary>Occurs when a condition is deleted.</summary>
    </member>
    <member name="M:DriveWorks.Specification.EventSequenceEventArgs.#ctor(DriveWorks.Specification.FlowEvent)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="event">The event which is the target of the event.</param>
    </member>
    <member name="P:DriveWorks.Specification.EventSequenceEventArgs.Event">
      <summary>Gets the event which is the target of the event.</summary>
    </member>
    <member name="P:DriveWorks.Specification.FlowEvent.Name">
      <summary>Gets the name of the event.</summary>
    </member>
    <member name="P:DriveWorks.Specification.FlowEvent.TaskSequence">
      <summary>Gets the task sequence which defines the actions to take when the event occurs.</summary>
    </member>
    <member name="M:DriveWorks.Specification.FlowProperties.RegisterAnyProperty(System.String)">
      <summary>Creates a new specification flow property which can store any data. Static values will always be represented as strings.</summary>
      <returns>A new specification flow property.</returns>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:DriveWorks.Specification.FlowProperties.RegisterAnyProperty(System.String,System.String)">
      <summary>Creates a new specification flow property which can store any data. Static values will always be represented as strings.</summary>
      <returns>A new specification flow property.</returns>
      <param name="name">The name of the property.</param>
      <param name="description">The description of the property.</param>
    </member>
    <member name="M:DriveWorks.Specification.FlowProperties.RegisterAnyProperty(System.String,DriveWorks.Specification.FlowPropertyInfo)">
      <summary>Creates a new specification flow property which can store any data. Static values will always be represented as strings.</summary>
      <returns>A new specification flow property.</returns>
      <param name="name">The name of the property.</param>
      <param name="info">Information about the property.</param>
    </member>
    <member name="M:DriveWorks.Specification.FlowProperties.RegisterBooleanProperty(System.String)">
      <summary>Creates a new specification flow property which can store boolean data.</summary>
      <returns>A new specification flow property.</returns>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:DriveWorks.Specification.FlowProperties.RegisterBooleanProperty(System.String,System.String)">
      <summary>Creates a new specification flow property which can store boolean data.</summary>
      <returns>A new specification flow property.</returns>
      <param name="name">The name of the property.</param>
      <param name="description">The description of the property.</param>
    </member>
    <member name="M:DriveWorks.Specification.FlowProperties.RegisterBooleanProperty(System.String,DriveWorks.Specification.FlowPropertyInfo)">
      <summary>Creates a new specification flow property which can store boolean data.</summary>
      <returns>A new specification flow property.</returns>
      <param name="name">The name of the property.</param>
      <param name="info">Information about the property.</param>
    </member>
    <member name="M:DriveWorks.Specification.FlowProperties.RegisterDoubleProperty(System.String)">
      <summary>Creates a new specification flow property which can store floating-point data.</summary>
      <returns>A new specification flow property.</returns>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:DriveWorks.Specification.FlowProperties.RegisterDoubleProperty(System.String,System.String)">
      <summary>Creates a new specification flow property which can store floating-point data.</summary>
      <returns>A new specification flow property.</returns>
      <param name="name">The name of the property.</param>
      <param name="description">The description of the property.</param>
    </member>
    <member name="M:DriveWorks.Specification.FlowProperties.RegisterDoubleProperty(System.String,DriveWorks.Specification.FlowPropertyInfo)">
      <summary>Creates a new specification flow property which can store floating-point data.</summary>
      <returns>A new specification flow property.</returns>
      <param name="name">The name of the property.</param>
      <param name="info">Information about the property.</param>
    </member>
    <member name="M:DriveWorks.Specification.FlowProperties.RegisterIArrayValueProperty(System.String)">
      <summary>Creates a new specification flow property which can store IArrayValue data.</summary>
      <returns>A new specification flow property.</returns>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:DriveWorks.Specification.FlowProperties.RegisterIArrayValueProperty(System.String,System.String)">
      <summary>Creates a new specification flow property which can store IArrayValue data.</summary>
      <returns>A new specification flow property.</returns>
      <param name="name">The name of the property.</param>
      <param name="description">The description of the property.</param>
    </member>
    <member name="M:DriveWorks.Specification.FlowProperties.RegisterIArrayValueProperty(System.String,DriveWorks.Specification.FlowPropertyInfo)">
      <summary>Creates a new specification flow property which can store IArrayValue data.</summary>
      <returns>A new specification flow property.</returns>
      <param name="name">The name of the property.</param>
      <param name="info">Information about the property.</param>
    </member>
    <member name="M:DriveWorks.Specification.FlowProperties.RegisterInt32Property(System.String)">
      <summary>Creates a new specification flow property which can store 32-bit integral data.</summary>
      <returns>A new specification flow property.</returns>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:DriveWorks.Specification.FlowProperties.RegisterInt32Property(System.String,System.String)">
      <summary>Creates a new specification flow property which can store 32-bit integral data.</summary>
      <returns>A new specification flow property.</returns>
      <param name="name">The name of the property.</param>
      <param name="description">The description of the property.</param>
    </member>
    <member name="M:DriveWorks.Specification.FlowProperties.RegisterInt32Property(System.String,DriveWorks.Specification.FlowPropertyInfo)">
      <summary>Creates a new specification flow property which can store 32-bit integral data.</summary>
      <returns>A new specification flow property.</returns>
      <param name="name">The name of the property.</param>
      <param name="info">Information about the property.</param>
    </member>
    <member name="M:DriveWorks.Specification.FlowProperties.RegisterInt64Property(System.String)">
      <summary>Creates a new specification flow property which can store 64-bit integral data.</summary>
      <returns>A new specification flow property.</returns>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:DriveWorks.Specification.FlowProperties.RegisterInt64Property(System.String,System.String)">
      <summary>Creates a new specification flow property which can store 64-bit integral data.</summary>
      <returns>A new specification flow property.</returns>
      <param name="name">The name of the property.</param>
      <param name="description">The description of the property.</param>
    </member>
    <member name="M:DriveWorks.Specification.FlowProperties.RegisterInt64Property(System.String,DriveWorks.Specification.FlowPropertyInfo)">
      <summary>Creates a new specification flow property which can store 64-bit integral data.</summary>
      <returns>A new specification flow property.</returns>
      <param name="name">The name of the property.</param>
      <param name="info">Information about the property.</param>
    </member>
    <member name="M:DriveWorks.Specification.FlowProperties.RegisterStringProperty(System.String)">
      <summary>Creates a new specification flow property which can store string data.</summary>
      <returns>A new specification flow property.</returns>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:DriveWorks.Specification.FlowProperties.RegisterStringProperty(System.String,System.String)">
      <summary>Creates a new specification flow property which can store string data.</summary>
      <returns>A new specification flow property.</returns>
      <param name="name">The name of the property.</param>
      <param name="description">The description of the property.</param>
    </member>
    <member name="M:DriveWorks.Specification.FlowProperties.RegisterStringProperty(System.String,DriveWorks.Specification.FlowPropertyInfo)">
      <summary>Creates a new specification flow property which can store string data.</summary>
      <returns>A new specification flow property.</returns>
      <param name="name">The name of the property.</param>
      <param name="info">Information about the property.</param>
    </member>
    <member name="P:DriveWorks.Specification.FlowProperties.Count">
      <summary>Gets the number of properties in the collection.</summary>
    </member>
    <member name="M:DriveWorks.Specification.FlowProperty.Connect(DriveWorks.EventFlow.NodeOutput)">
      <summary>Connects this input to the given output.</summary>
      <param name="output">The output to map this input value to.</param>
    </member>
    <member name="M:DriveWorks.Specification.FlowProperty.ConvertToNativeType(System.Object)">
      <summary>Takes the given object and converts it into the native type of the property.</summary>
      <exception caption="" cref="T:DriveWorks.Specification.UnparsableFlowPropertyValueException">Thrown when the value cannot be converted into this property's type.</exception>
      <returns>The object converted into the type of this property.</returns>
      <param name="obj">The object to convert.</param>
    </member>
    <member name="M:DriveWorks.Specification.FlowProperty.GetValue">
      <summary>Gets the value of the property.</summary>
    </member>
    <member name="M:DriveWorks.Specification.FlowProperty.RaiseRuleChanged">
      <summary>Raises the  event.</summary>
    </member>
    <member name="M:DriveWorks.Specification.FlowProperty.RaiseValueChanged">
      <summary>Raises the  event.</summary>
    </member>
    <member name="M:DriveWorks.Specification.FlowProperty.SetValue(System.Object)">
      <summary>Sets the value of the property.</summary>
    </member>
    <member name="M:DriveWorks.Specification.FlowProperty.Unbind">
      <summary>Unbinds the property.</summary>
    </member>
    <member name="M:DriveWorks.Specification.FlowProperty.Bind(System.String,System.String)">
      <summary>Binds the property to a rule.</summary>
      <param name="rule">The rule to apply.</param>
      <param name="comment">The comment to apply.</param>
    </member>
    <member name="M:DriveWorks.Specification.FlowProperty.Bind(System.String,System.String,System.Boolean)">
      <summary>Binds the property to a rule.</summary>
      <param name="rule">The rule to apply.</param>
      <param name="comment">The comment to apply.</param>
    </member>
    <member name="P:DriveWorks.Specification.FlowProperty.Category">
      <summary>Gets the category to which the property belongs.</summary>
    </member>
    <member name="P:DriveWorks.Specification.FlowProperty.Connection">
      <summary>Gets the connection that's been created for this property, or a null reference if no connection has been made.</summary>
    </member>
    <member name="P:DriveWorks.Specification.FlowProperty.HasValue">
      <summary>Gets whether a value has been given to this property.</summary>
    </member>
    <member name="P:DriveWorks.Specification.FlowProperty.Id">
      <summary>Gets the invariant identifier of the rule.</summary>
    </member>
    <member name="P:DriveWorks.Specification.FlowProperty.Info">
      <summary>Gets information about the property.</summary>
    </member>
    <member name="P:DriveWorks.Specification.FlowProperty.IsBound">
      <summary>Determines whether the property value is bound to a rule.</summary>
    </member>
    <member name="P:DriveWorks.Specification.FlowProperty.IsConnected">
      <summary>Gets whether a connection has been made to this property.</summary>
    </member>
    <member name="P:DriveWorks.Specification.FlowProperty.IsRequired">
      <summary>Gets whether this input is required for the owning task to execute.</summary>
    </member>
    <member name="P:DriveWorks.Specification.FlowProperty.Name">
      <summary>Gets the name of the property.</summary>
    </member>
    <member name="E:DriveWorks.Specification.FlowProperty.RuleChanged">
      <summary>Raised when the rule for this flow property is changed.</summary>
    </member>
    <member name="E:DriveWorks.Specification.FlowProperty.ValueChanged">
      <summary>Raised when the value for this flow property is changed.</summary>
    </member>
    <member name="P:DriveWorks.Specification.FlowProperty`1.Value">
      <summary>Gets/sets the property value, see the remarks for details.</summary>
      <returns>The value of the property.</returns>
    </member>
    <member name="M:DriveWorks.Specification.FlowPropertyInfo.#ctor(System.String)">
      <summary>Initializes a new instance of the  class.</summary>
      <param name="description">The description of the property.</param>
    </member>
    <member name="M:DriveWorks.Specification.FlowPropertyInfo.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the  class.</summary>
      <param name="description">The description of the property.</param>
      <param name="category">The category to which the property belongs.</param>
    </member>
    <member name="M:DriveWorks.Specification.FlowPropertyInfo.#ctor(System.String,System.String,System.String[])">
      <summary>Initializes a new instance of the  class.</summary>
      <param name="description">The description of the property.</param>
      <param name="category">The category to which the property belongs.</param>
      <param name="propertyTypes">The semantic types that apply to the property.</param>
    </member>
    <member name="M:DriveWorks.Specification.FlowPropertyInfo.#ctor(System.String,System.String,System.String[],System.Boolean)">
      <summary>Initializes a new instance of the  class.</summary>
      <param name="description">The description of the property.</param>
      <param name="category">The category to which the property belongs.</param>
      <param name="propertyTypes">The semantic types that apply to the property.</param>
      <param name="isRequired">True if this property has to be given a value before the task it is associated with can execute.</param>
    </member>
    <member name="P:DriveWorks.Specification.FlowPropertyInfo.Category">
      <summary>Gets the category to which the property belongs.</summary>
    </member>
    <member name="P:DriveWorks.Specification.FlowPropertyInfo.Description">
      <summary>Gets the description of the property.</summary>
    </member>
    <member name="P:DriveWorks.Specification.FlowPropertyInfo.IsRequired">
      <summary>Gets whether this property has to be given a value before the associated task can execute.</summary>
    </member>
    <member name="P:DriveWorks.Specification.FlowPropertyInfo.PropertyTypes">
      <summary>Gets the semantic types of the property.</summary>
    </member>
    <member name="M:DriveWorks.Specification.Operation.Delete">
      <summary>Deletes the transition.</summary>
    </member>
    <member name="P:DriveWorks.Specification.Operation.Conditions">
      <summary>Gets a condition manager which can be used to add and work with conditions which can control the availability of the operation in an extensible way.</summary>
    </member>
    <member name="P:DriveWorks.Specification.Operation.Name">
      <summary>Gets the unique name of the operation.</summary>
    </member>
    <member name="P:DriveWorks.Specification.Operation.State">
      <summary>Gets the state to which the operation belongs.</summary>
    </member>
    <member name="P:DriveWorks.Specification.Operation.TaskSequence">
      <summary>Gets/sets the task sequence which is executed when the task is executed</summary>
    </member>
    <member name="P:DriveWorks.Specification.Operation.Teams">
      <summary>Gets a team manager which can be used to decide which teams have access to the operation.</summary>
    </member>
    <member name="P:DriveWorks.Specification.Operation.Title">
      <summary>Gets/sets the title of the operation as will be seen by the user.</summary>
    </member>
    <member name="E:DriveWorks.Specification.Operation.Deleted">
      <summary>Raised when the operation is deleted.</summary>
    </member>
    <member name="E:DriveWorks.Specification.Operation.NameChanged">
      <summary>Raised when the  property is changed.</summary>
    </member>
    <member name="E:DriveWorks.Specification.Operation.TitleChanged">
      <summary>Raised when the  property is changed.</summary>
    </member>
    <member name="M:DriveWorks.Specification.OperationEventArgs.#ctor(DriveWorks.Specification.Operation)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="operation">The operation which is the target of the event.</param>
    </member>
    <member name="P:DriveWorks.Specification.OperationEventArgs.Operation">
      <summary>Gets the operation which is the target of the event.</summary>
    </member>
    <member name="M:DriveWorks.Specification.Operations.CreateOperation(System.String)">
      <summary>Creates and returns a new operation with the specified name.</summary>
      <param name="name">The unique name of the operation.</param>
    </member>
    <member name="M:DriveWorks.Specification.Operations.GetEnumerator">
      <summary>Gets an enumerator suitable for enumerating the operations in the collection.</summary>
      <returns>An IEnumerator specialized for the  type.</returns>
    </member>
    <member name="M:DriveWorks.Specification.Operations.GetOperation(System.String)">
      <summary>Gets the operation with the specified name.</summary>
      <exception caption="" cref="T:DriveWorks.ItemNotFoundException">The operation could not be found.</exception>
      <returns>The operation with the specified name.</returns>
      <param name="name">The name of the operation to get.</param>
    </member>
    <member name="M:DriveWorks.Specification.Operations.Move(System.Int32,System.Int32)">
      <summary>Move the operation from its current index to the specified index.</summary>
      <param name="oldIndex">The old index of the operation.</param>
      <param name="newIndex">The new index of the operation.</param>
    </member>
    <member name="M:DriveWorks.Specification.Operations.ToArray">
      <summary>Copies the operations to an array and returns it.</summary>
      <returns>An array of operations.</returns>
    </member>
    <member name="M:DriveWorks.Specification.Operations.TryGetOperation(System.String,DriveWorks.Specification.Operation@)">
      <summary>Gets the operation with the specified name.</summary>
      <returns>True if the operation was found and returned, otherwise false.</returns>
      <param name="name">The name of the operation to get.</param>
      <param name="operation">Receives the operation.</param>
    </member>
    <member name="P:DriveWorks.Specification.Operations.Count">
      <summary>Gets the number of operations in the collection.</summary>
    </member>
    <member name="P:DriveWorks.Specification.Operations.Item(System.Int32)">
      <summary>Gets the operation at the specified index.</summary>
      <param name="index">The index of the operation to retrieve.</param>
    </member>
    <member name="E:DriveWorks.Specification.Operations.OperationCreated">
      <summary>Occurs when an operation is created.</summary>
    </member>
    <member name="E:DriveWorks.Specification.Operations.OperationDeleted">
      <summary>Occurs when an operation is deleted.</summary>
    </member>
    <member name="E:DriveWorks.Specification.Operations.OperationMoved">
      <summary>Occurs when an operation's index is changed.</summary>
    </member>
    <member name="M:DriveWorks.Specification.ProjectDetailsEventArgs.#ctor(DriveWorks.ProjectDetails)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="projectDetails">The project details instance which is the target of the event.</param>
    </member>
    <member name="P:DriveWorks.Specification.ProjectDetailsEventArgs.ProjectDetails">
      <summary>Gets the project details instance which is the target of the event.</summary>
    </member>
    <member name="P:DriveWorks.Specification.PropertyInvalidException.PropertyName">
      <summary>Gets the name of the property that wasn't found.</summary>
    </member>
    <member name="P:DriveWorks.Specification.PropertyInvalidException.TypeName">
      <summary>Gets the name of the type.</summary>
    </member>
    <member name="M:DriveWorks.Specification.RuleResults.GetResult(System.String)">
      <summary>Gets the result for the rule with the specified identifier.</summary>
      <exception caption="" cref="T:DriveWorks.ItemNotFoundException">Thrown if the specified rule identifier does not correspond to a value in the result set.</exception>
      <returns>The result of the calculated rule.</returns>
      <param name="ruleId">The identifier of the rule for which to retrieve the result.</param>
    </member>
    <member name="M:DriveWorks.Specification.RuleResults.ResultToString(System.Object,System.Globalization.CultureInfo)">
      <summary>Takes the result of a rule calculation and coverts it to a string.</summary>
      <returns>A string representing the result.</returns>
      <param name="result">The result to convert.</param>
      <param name="ci">The culture information to use for culture aware conversions.</param>
    </member>
    <member name="M:DriveWorks.Specification.RuleResults.Save(System.Xml.XmlWriter)">
      <summary>Saves the rule results to the specified XML writer.</summary>
    </member>
    <member name="M:DriveWorks.Specification.RuleResults.TryGetResult(System.String,System.Object@)">
      <summary>Tries getting the result for the rule with the specified identifier.</summary>
      <returns>True if a value was found for the specified rule, otherwise false.</returns>
      <param name="ruleId">The identifier of the rule for which to retrieve the result.</param>
      <param name="result">A reference to a variable which will receive the result of the rule.</param>
    </member>
    <member name="M:DriveWorks.Specification.RuleResults.Load(System.Xml.XmlReader)">
      <summary>Loads the rule results from the given XML reader.</summary>
      <returns>An instance of the  type.</returns>
      <param name="reader">An instance of an type derived from XmlReader, which has been positioned at a RuleResults element.</param>
    </member>
    <member name="M:DriveWorks.Specification.RuleResults.Load(System.Xml.Linq.XElement)">
      <summary>Loads the rule results for the specified XML element which must have the name RuleResults in the specification namespace
(http://schemas.driveworks.co.uk/specification/)</summary>
      <returns>An instance of the  type which has been populated with the rule results from the serialized XML, or a null reference if
the input element is not a RuleResults element.</returns>
      <param name="element">The RuleResults element from which to load results.</param>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationContext.AllocateSpecificationId">
      <summary>Allocates a specification identifier to the specification, by default, uses the next specification identifier from the group.</summary>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationContext.AssertLoaded">
      <summary>Raises an exception if the specification context is open.</summary>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationContext.AssertNotLoaded">
      <summary>Raises an exception if the specification context is not open.</summary>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationContext.AssertNotRunning">
      <summary>Raises an exception if the specification context is in a running state.</summary>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationContext.AssertRunning">
      <summary>Raises an exception if the specification context is not in a running state.</summary>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationContext.Cancel">
      <summary>Cancels the specification.</summary>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationContext.Delete">
      <summary>Deletes the specification represented by the context.</summary>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationContext.EnsureRunnableProject">
      <summary>Returns if the current specification is valid or not.</summary>
      <returns>True if the specification is valid.</returns>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationContext.GetExpectedSpecificationDirectory">
      <summary>Gets the current expected specification directory of a running specification.</summary>
      <exception caption="" cref="T:System.InvalidOperationException">The specification is not running.</exception>
      <returns>The full path to the specification directory.</returns>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationContext.GetOperations">
      <summary>Gets an array of transitions with the evaluated result of their conditions.</summary>
      <returns>An array of operations transitions.</returns>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationContext.GetTransitions">
      <summary>Gets an array of transitions with the evaluated result of their conditions.</summary>
      <returns>An array of invokable transitions.</returns>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationContext.Navigate(DriveWorks.Specification.NavigationOptions)">
      <summary>Navigates the forms in a running specification.</summary>
      <returns>True if the navigation operation succeeds, otherwise false.</returns>
      <param name="navigateTo">An option specifying to where to navigate.</param>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationContext.NavigateTo(System.String)">
      <summary>Navigates to a specified form in a running specification.</summary>
      <returns>True if the navigation operation succeeds, otherwise false.</returns>
      <param name="formName">The name of the form to navigate to.</param>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationContext.OnActiveDialogChanged(System.EventArgs)">
      <summary>Raises the  event.</summary>
      <param name="e">The event data for the event.</param>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationContext.OnActiveDialogChanging(System.EventArgs)">
      <summary>Raises the  event.</summary>
      <param name="e">The event data for the event.</param>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationContext.OnActiveDialogOrFormChanged(System.EventArgs)">
      <summary>Raises the  event.</summary>
      <param name="e">The event data for the event.</param>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationContext.OnActiveDialogOrFormChanging(System.EventArgs)">
      <summary>Raises the  event.</summary>
      <param name="e">The event data for the event.</param>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationContext.OnActiveDialogOrFormUpdated(System.EventArgs)">
      <summary>Raises the  event.</summary>
      <param name="e">The event data for the event.</param>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationContext.OnActiveFormChanged(System.EventArgs)">
      <summary>Raises the  event.</summary>
      <param name="e">The event data for the event.</param>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationContext.OnActiveFormChanging(System.EventArgs)">
      <summary>Raises the  event.</summary>
      <param name="e">The event data for the event.</param>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationContext.OnDialogClosed(System.EventArgs)">
      <summary>Raises the  event.</summary>
      <param name="e">The event data for the event.</param>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationContext.OnDialogClosing(System.EventArgs)">
      <summary>Raises the  event.</summary>
      <param name="e">The event data for the event.</param>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationContext.OnDialogOpening(System.EventArgs)">
      <summary>Raises the  event.</summary>
      <param name="e">The event data for the event.</param>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationContext.OnFormValueChanged(System.Object,DriveWorks.Forms.DataModel.ValueChangedEventArgs)">
      <summary>Raises the  event. The event data for the event.</summary>
      <param name="e">The event data for the event.</param>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationContext.Open(DriveWorks.Specification.SpecificationDetails)">
      <summary>Opens the given existing specification.</summary>
      <param name="specificationDetails">The details of the specification to open.</param>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationContext.QueryOperation(System.String)">
      <summary>Queries an operation's tasks for confirmation messages that should be shown to an interactive user before invoking the operation.</summary>
      <returns>An array of messages, e.g. "Specification x will be deleted", if no messages are collected, an empty array is returned</returns>
      <param name="operationName">The name of the operation to query.</param>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationContext.QueryTransition(System.String)">
      <summary>Queries an transition's tasks for confirmation messages that should be shown to an interactive user before invoking the transition.</summary>
      <returns>An array of messages, e.g. "Specification x will be deleted", if no messages are collected, an empty array is returned</returns>
      <param name="transitionName">The name of the transition to query.</param>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationContext.Start(DriveWorks.ProjectDetails)">
      <summary>Starts a new specification based on the given project.</summary>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationContext.UpdateArchivedState(System.Boolean)">
      <summary>Sets the archived state of a loaded/running specification.</summary>
      <exception caption="" cref="T:System.InvalidOperationException">A specification must be loaded in order to update its archived state.</exception>
      <param name="isArchived">The new value of the archived flag.</param>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationContext.Copy(DriveWorks.Specification.SpecificationDetails)">
      <summary>Starts a new specification based on the given specification.</summary>
      <exception caption="" cref="T:DriveWorks.ItemNotFoundException">The project, on which the specification was based, no longer exists.</exception>
      <param name="specificationDetails">The details of the specification to clone.</param>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationContext.Copy(DriveWorks.Specification.SpecificationDetails,System.Boolean)">
      <summary>Starts a new specification based on the given specification.</summary>
      <exception caption="" cref="T:DriveWorks.ItemNotFoundException">The project, on which the specification was based, no longer exists.</exception>
      <param name="specificationDetails">The details of the specification to clone.</param>
      <param name="keepClosed">Whether or not to migrate the clone specification into the initial running state or not.</param>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationContext.InvokeOperation(System.String)">
      <summary>Invokes the specified operation.</summary>
      <exception caption="" cref="T:DriveWorks.ItemNotFoundException">The specified operation does not exist for the current state.Thrown if the current user does not have permission to invoke the operation.The transition can't be invoked because a task threw an unhandled exception.</exception>
      <returns>True if the operation was successfully invoked, false if one or more conditions caused the operation to be aborted.</returns>
      <param name="operationName">The name of the operation to invoke.</param>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationContext.InvokeOperation(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>Invokes the specified operation.</summary>
      <exception caption="" cref="T:DriveWorks.ItemNotFoundException">The specified operation does not exist for the current state.Thrown if the current user does not have permission to invoke the operation.The transition can't be invoked because a task threw an unhandled exception.</exception>
      <returns>True if the operation was successfully invoked, false if one or more conditions caused the operation to be aborted.</returns>
      <param name="operationName">The name of the operation to invoke.</param>
      <param name="inputs">Inputs to be driven in to spec</param>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationContext.InvokeTransition(System.String)">
      <summary>Invokes the specified transition.</summary>
      <exception caption="" cref="T:DriveWorks.ItemNotFoundException">The specified transition does not exist for the current state.Thrown if the current user does not have permission to invoke the transition.The specification name is already registered.The specification name contains invalid characters, starts/ends with whitespace, or is too long.One or more paths are too long to complete the specification, most likely the calculated project or specification file name.The transition can't be invoked because an operation or transition is already being processed, or because the transition takes one running state to another running state.The transition can't be invoked because a task threw an unhandled exception.</exception>
      <returns>True if the transition was successfully invoked, false if one or more conditions caused the transition to be aborted.</returns>
      <param name="transitionName">The name of the transition to invoke.</param>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationContext.InvokeTransition(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>Invokes the specified transition.</summary>
      <exception caption="" cref="T:DriveWorks.ItemNotFoundException">The specified transition does not exist for the current state.Thrown if the current user does not have permission to invoke the transition.The specification name is already registered.The specification name contains invalid characters, starts/ends with whitespace, or is too long.One or more paths are too long to complete the specification, most likely the calculated project or specification file name.The transition can't be invoked because an operation or transition is already being processed, or because the transition takes one running state to another running state.The transition can't be invoked because a task threw an unhandled exception.</exception>
      <returns>True if the transition was successfully invoked, false if one or more conditions caused the transition to be aborted.</returns>
      <param name="transitionName">The name of the transition to invoke.</param>
      <param name="inputs">The values to be driven into the spec.</param>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationContext.ActiveDialog">
      <summary>Gets the latest dialog if the specification is running and one or more dialogs are active.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationContext.ActiveDialogOrForm">
      <summary>Gets the active dialog if one is shown, otherwise, gets the active form.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationContext.ActiveForm">
      <summary>Gets the active form in the specification navigation if the specification is running.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationContext.AdditionalFoldersRelativeToSpecificationFolder">
      <summary>Gets whether additional folders' paths are calculated relative to the specification's folder, if false, they are calculated relative to the default
specification folder instead.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationContext.CurrentState">
      <summary>Gets the current specification-flow state of the open specification.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationContext.DesignMasterPath">
      <summary>Gets the fully-qualified path to the specification's cached version of the project's design master (see remarks for details).</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationContext.DocumentsRelativeToSpecificationFolder">
      <summary>Gets whether documents' paths are calculated relative to the specification's folder, if false, they are calculated relative to the default specification folder
instead.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationContext.Environment">
      <summary>Gets the settings for the specification environment.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationContext.Group">
      <summary>Gets the group containing the project to be specified.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationContext.HideMetadataDirectory">
      <summary>Gets whether the metadata directory is hidden if used.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationContext.HostingControl">
      <summary>The parent specification host control for the specification, if there is one.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationContext.Id">
      <summary>Gets the identifier which uniquely identifies the current specification.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationContext.InCancel">
      <summary>Determines whether the specification context is in the process of cancelling.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationContext.InOperation">
      <summary>Determines whether the specification context is in the process of invoking an operation.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationContext.InTransition">
      <summary>Determines whether the specification context is in the process of invoking a transition.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationContext.IsArchived">
      <summary>Determines whether the specification is marked as archived from view.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationContext.IsEmbedded">
      <summary>Returns whether or not this is an embedded specification.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationContext.IsInRunningState">
      <summary>Determines whether the specification is in a running state, as opposed to paused or automatic.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationContext.IsLoaded">
      <summary>Determines whether the specification is loaded.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationContext.IsRuleProfilingEnabled">
      <summary>Gets/sets whether projects loaded in this specification group should have profiling enabled.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationContext.IsRunning">
      <summary>Determines whether the specification is running. See remarks for details.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationContext.MetadataDirectoryName">
      <summary>Gets the name of a directory which will act as a container for artifacts used to manage a specification, or a null reference to put them in the specification
folder.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationContext.OriginalSpecificationName">
      <summary>If the specification is in a transition, gets the name of the specification passed to the
 method when the specification was originally opened.</summary>
      <returns>The original name of the specification, see the remarks for details.</returns>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationContext.ParentContext">
      <summary>Gets the context of the parent specification if the current specification is a child specification.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationContext.Project">
      <summary>Gets the project being specified.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationContext.ProjectDirectory">
      <summary>Gets the fully-qualified path to the directory containing the project on which the specification is based.</summary>
      <returns>The fully-qualified path, or a null reference if the specification context is not loaded.</returns>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationContext.ProjectFilePath">
      <summary>Gets the fully-qualified path to the specification's cached version of the project file (see remarks for details).</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationContext.ProjectId">
      <summary>Gets the id of the project for this specification context.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationContext.ProjectName">
      <summary>Gets the name of the project for this specification context.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationContext.Report">
      <summary>Gets the active report object.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationContext.RootTemporaryFilesDirectory">
      <summary>Gets information about the directory which is the root of all temporary folders created for specifications related to this context.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationContext.ShowRunningUserInterface">
      <summary>Gets/sets whether this specification should have its form UI shown when it starts running.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationContext.SpecificationDirectory">
      <summary>Gets the fully-qualified path to the specification directory.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationContext.SpecificationFilePath">
      <summary>Gets the fully-qualified path to the specification file.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationContext.SpecificationName">
      <summary>Gets the specification name of a loaded or running specification.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationContext.SpecificationTags">
      <summary>Gets the tags associated with this specification.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationContext.TaskList">
      <summary>Gets the task list for the specification.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationContext.TemporaryDesignMasterPath">
      <summary>Gets the fully-qualified path to the context's temporary copy of the design-master.</summary>
      <returns>The fully-qualified path to the context's temporary copy of the design-master if the context is in a running state, otherwise, a null reference (Nothing in
Visual Basic).</returns>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationContext.TemporaryFilesDirectory">
      <summary>Gets the fully-qualified path to the context's temporary files directory.</summary>
      <returns>The fully-qualified path to the context's temporary files directory if the context is in a running state, otherwise, a null reference (Nothing in Visual
Basic).</returns>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationContext.TemporaryProjectFilePath">
      <summary>Gets the fully-qualified path to the context's temporary copy of the project file.</summary>
      <returns>The fully-qualified path to the context's temporary copy of the project file if the context is in a running state, otherwise, a null reference (Nothing in
Visual Basic).</returns>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationContext.Type">
      <summary>Gets the type of the specification.</summary>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationContext.ActiveDialogChanged">
      <summary>Raised when the active dialog changes.</summary>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationContext.ActiveDialogChanging">
      <summary>Raised when the active dialog is about to change.</summary>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationContext.ActiveDialogOrFormChanged">
      <summary>Raised when the active dialog or form changes.</summary>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationContext.ActiveDialogOrFormChanging">
      <summary>Raised when the active dialog or form is about to change.</summary>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationContext.ActiveDialogOrFormUpdated">
      <summary>Raised when the values of one or more controls on the active form or dialog have been changed.</summary>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationContext.ActiveFormChanged">
      <summary>Raised when the active form changes.</summary>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationContext.ActiveFormChanging">
      <summary>Raised when the active form is about to change.</summary>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationContext.AdditionalFoldersCreated">
      <summary>Raised when additional folders are created.</summary>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationContext.Cancelled">
      <summary>Raised when a running state is cancelled.</summary>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationContext.ChildContextCreated">
      <summary>Raised when a child specification context is created.</summary>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationContext.CopiedSpecificationFile">
      <summary>Raised after a specification file has successfully been copied to the target location.</summary>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationContext.CopyingSpecificationFile">
      <summary>Raised before a file for the current specification is copied to its target location.</summary>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationContext.CopyRequested">
      <summary>Raised when a copy of an existing specification is requested.</summary>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationContext.Deleted">
      <summary>Raised when the specification is deleted.</summary>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationContext.DialogClosed">
      <summary>Raised when a dialog has been closed.</summary>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationContext.DialogClosing">
      <summary>Raised when the active dialog closes.</summary>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationContext.DialogOpening">
      <summary>Raised when a dialog opens.</summary>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationContext.DocumentRegistered">
      <summary>Raised when a specification document is registered.</summary>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationContext.EventSequenceInvoked">
      <summary>Raised when an event task-sequence has been invoked.</summary>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationContext.EventSequenceInvoking">
      <summary>Raised when an event task-sequence is about to be invoked.</summary>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationContext.FormValueChanged">
      <summary>Raised whenever a form value has changed.</summary>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationContext.IsLoadedChanged">
      <summary>Raised when specification is loaded into/unloaded from the specification context.</summary>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationContext.IsRuleProfilingEnabledChanged">
      <summary>Raised when the  property changes.</summary>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationContext.IsRunningChanged">
      <summary>Raised when specification enters or leaves a running state.</summary>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationContext.IsRunningChanging">
      <summary>Raised when a specification is about to enter or leave a running state.</summary>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationContext.OpenRequested">
      <summary>Raised when the opening of an existing specification is requested.</summary>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationContext.OperationInvoked">
      <summary>Raised when a operation has been invoked.</summary>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationContext.OperationInvoking">
      <summary>Raised when a operation is about to be invoked.</summary>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationContext.OperationSequenceInvoked">
      <summary>Raised when an operation task-sequence has been invoked.</summary>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationContext.OperationSequenceInvoking">
      <summary>Raised when an operation task-sequence is about to be invoked.</summary>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationContext.ProjectClosing">
      <summary>Raised just before the current project is about to be closed, but before saving (which may or may not happen).</summary>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationContext.ReportCancelled">
      <summary>Raised when the current specification report is cancelled.</summary>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationContext.ReportCreated">
      <summary>Raised when a specification report is created.</summary>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationContext.ReportFinished">
      <summary>Raised when the current specification report is finished.</summary>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationContext.StartRequested">
      <summary>Raised when the start of a new specification is requested.</summary>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationContext.StateChanged">
      <summary>Raised when a state has been changed.</summary>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationContext.StateChanging">
      <summary>Raised when a state is about to be changed.</summary>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationContext.TaskListEntryAdded">
      <summary>Raised when an entry is added to the specification task list.</summary>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationContext.TaskListEntryRemoved">
      <summary>Raised when an entry is removed from the specification task list.</summary>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationContext.TaskListEntryUpdated">
      <summary>Raised when an entry in the specification task list is updated.</summary>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationContext.TransitionInvoked">
      <summary>Raised when a transition has been invoked.</summary>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationContext.TransitionInvoking">
      <summary>Raised when a transition is about to be invoked.</summary>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationContext.TransitionSequenceInvoked">
      <summary>Raised when a transition task-sequence has been invoked.</summary>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationContext.TransitionSequenceInvoking">
      <summary>Raised when a transition task-sequence is about to be invoked.</summary>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationContextEventArgs.#ctor(DriveWorks.Specification.SpecificationContext)">
      <summary>Initializes a new instance of the  class.</summary>
      <param name="context">The specification context.</param>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationContextEventArgs.Context">
      <summary>Get the specification context.</summary>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationDetails.GetMetadataPath">
      <summary>Gets the fully-qualified path to the metadata directory.</summary>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationDetails.GetProjectFilePath">
      <summary>Gets the fully-qualified path to the project file.</summary>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationDetails.GetSpecificationFilePath">
      <summary>Gets the fully-qualified path to the specification file.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationDetails.CreatorId">
      <summary>Gets the unique identifier of the user which created the specification.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationDetails.DateCreated">
      <summary>Gets the date and time of the creation of the specification in UTC form.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationDetails.DateEdited">
      <summary>Gets the date and time when the specification was last edited in UTC form.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationDetails.Directory">
      <summary>Gets the path to the specification directory.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationDetails.EditorId">
      <summary>Gets the unique identifier of the user which last edited the specification.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationDetails.Id">
      <summary>Gets the unique numerical specification identifier.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationDetails.IsArchived">
      <summary>Gets/sets whether the specification is archived.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationDetails.IsCreatorPermitted">
      <summary>Gets/sets whether the creator of the specification is permitted to access it.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationDetails.IsOwnerPermitted">
      <summary>Gets/sets whether the owner of the specification is permitted to access it.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationDetails.IsUniversal">
      <summary>Gets/sets whether everyone is permitted to access the specification.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationDetails.MetadataDirectory">
      <summary>Gets the path to the specification metadata directory relative to the specification directory.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationDetails.Name">
      <summary>Gets/sets the name of the specification.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationDetails.OriginalProjectExtension">
      <summary>Gets the file extension of the project that created the specification.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationDetails.OriginalProjectName">
      <summary>Gets the name of the project that created the specification.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationDetails.ParentId">
      <summary>Gets the unique numerical identifier of the parent specification if there is one.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationDetails.ProjectId">
      <summary>Gets the unique identifier of the project from which the specification was created.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationDetails.SpecificationProjectExtension">
      <summary>Gets/sets the file extension of the specification.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationDetails.StateId">
      <summary>Gets/sets the unique identifier of the specification's current state.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationDetails.StateName">
      <summary>Gets/sets the display name of the specification's current state.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationDetails.StateType">
      <summary>Gets/Sets the type for the specification's current state.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationDetails.Tags">
      <summary>Gets/sets the tags associated with the specification.</summary>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationDetailsEventArgs.#ctor(DriveWorks.Specification.SpecificationDetails)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="specificationDetails">The specification details instance which is the target of the event.</param>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationDetailsEventArgs.SpecificationDetails">
      <summary>Gets the specification details instance which is the target of the event.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationDocumentDetails.DateCreated">
      <summary>Gets the date the document was created.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationDocumentDetails.Id">
      <summary>Gets the unique identifier assigned to the document.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationDocumentDetails.IsHidden">
      <summary>Gets/sets whether the document is hidden from standard document lists.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationDocumentDetails.Path">
      <summary>Gets/sets the path to the document file.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationDocumentDetails.SpecificationId">
      <summary>Gets the unique numerical identifier assigned to the parent specification.</summary>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationDocumentEventArgs.#ctor(DriveWorks.Specification.SpecificationDocumentDetails)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="documentDetails">The details of the specification document.</param>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationDocumentEventArgs.DocumentDetails">
      <summary>Gets the document details.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationEnvironment.AllowIgnoreTaskList">
      <summary>Gets/sets whether the user is allowed to ignore the state of the task list when navigating and invoking transitions.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationEnvironment.CanEditCompletedSpecifications">
      <summary>Gets/sets whether completed specifications can be edited.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationEnvironment.DocumentGeneration">
      <summary>Gets/sets when documents are generated using the default specification flow.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationEnvironment.IsAsynchronous">
      <summary>Gets/sets whether or not to run the specification asynchronously.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationEnvironment.IsLocked">
      <summary>Determines whether the object has been locked.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationEnvironment.OverrideProjectReportingLevel">
      <summary>Gets/sets whether the reporting level set on the environment should override the equivalent level set on the project. This is automatically set to true if the
reporting level is changed on the environment.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationEnvironment.OverwriteReleasedComponents">
      <summary>Gets/sets whether, during the release of components, components that already exist are overwritten or used as-is. Only takes effect if
 is enabled.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationEnvironment.ReleaseToAutopilot">
      <summary>Gets/sets whether the Release-to-Autopilot setting is enabled.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationEnvironment.ReportingLevel">
      <summary>Gets/sets the reporting level to use for specification reporting. Setting this value will automatically change the
 to true.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationEnvironment.ServiceProvider">
      <summary>Gets/sets the service provider to be used by the specification context and tasks when interaction with the hosting application is required.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationEnvironment.SpecificationBasePath">
      <summary>Gets/sets the base path for specification files (this is usually equivalent to the group's default specification folder).</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationEnvironment.TemporaryFolderPath">
      <summary>Gets/sets the path to the temporary folder.</summary>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationFlowDefinition.Customize">
      <summary>Let the definition know it has been customized and therefore the changes need persisting in the project.</summary>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationFlowDefinition.ExportXml">
      <summary>Get a copy of the current specification flow XML.</summary>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationFlowDefinition.GetDefaultSpecificationFlow(System.Boolean)">
      <summary>Gets the XML representing the default specification flow.</summary>
      <returns>An  which has been loaded from the default specification flow definition.</returns>
      <param name="stripComments">True to strip comments from the specification flow XML, otherwise false.</param>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationFlowDefinition.LoadSpecificationFlow(System.IO.TextReader)">
      <summary>Loads in a custom specification flow from XML.</summary>
      <param name="reader">Input XML for new specification flow.</param>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationFlowDefinition.ResetDefault">
      <summary>Resets the specification-flow to the default.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationFlowDefinition.InitialState">
      <summary>Gets/sets the initial state of a newly created specification.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationFlowDefinition.IsDefault">
      <summary>Gets whether the current specification-flow is the default specification-flow.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationFlowDefinition.States">
      <summary>Gets the states which have been defined for the specification flow.</summary>
      <returns>An instance of the  class which can be used to create and retrieve states.</returns>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationFlowDefinition.IsDefaultChanged">
      <summary>Raised when the IsDefault property is changed after the specification flow is customized from default or is reset back to default.</summary>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationForm.Cancel">
      <summary>Confirms the current active dialog.</summary>
      <exception caption="" cref="T:System.InvalidOperationException">A specification is not running, or no dialog is active, or the dialog does no support closing in this way.</exception>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationForm.Close">
      <summary>Close the current active dialog.</summary>
      <exception caption="" cref="T:System.InvalidOperationException">A specification is not running, or no dialog is active, or the dialog does no support closing in this way.</exception>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationForm.Form">
      <summary>Gets the DriveWorks form represented by the instance.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationForm.IsLast">
      <summary>Determines whether the form is the last form in the navigation.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationForm.IsTaskListEnabled">
      <summary>Determines whether or not the task list is enabled.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationForm.Options">
      <summary>Gets the closing options that are available for this form.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationForm.Owner">
      <summary>Gets the control that launched the dialog.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationForm.Previous">
      <summary>Gets the previous form in the navigation.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationForm.ShowUserInterface">
      <summary>Determines whether or not the user interface is visible.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationForm.TaskList">
      <summary>Gets the task list for this form.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationHostControlContextEventArgs.SpecifcationHost">
      <summary>Gets the specification host control for this event.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationHostControlContextEventArgs.SpecificationContext">
      <summary>Gets the specification context that relates to this event.</summary>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationMacro.Delete">
      <summary>Deletes the macro.</summary>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationMacro.Execute">
      <summary>Executes the macro.</summary>
      <exception caption="" cref="T:System.InvalidOperationException">The project is not associated with a running specification.The task sequence contains deferred or delete tasks.</exception>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationMacro.Save">
      <summary>Saves the macro to a string.</summary>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationMacro.Save(System.IO.TextWriter)">
      <summary>Saves the macro to the specified text writer.</summary>
      <param name="textWriter">The writer to which to save the macro.</param>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationMacro.Category">
      <summary>Gets/sets the category to which the macro belongs.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationMacro.Conditions">
      <summary>Gets the conditions in this macro.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationMacro.IsDeleted">
      <summary>Determines whether the macro has been deleted.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationMacro.Name">
      <summary>Gets the name of the macro.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationMacro.Nodes">
      <summary>Gets all flow nodes in this specification macro.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationMacro.StartNode">
      <summary>Gets the first node that will execute when this macro executes as a part of a flow.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationMacro.Tasks">
      <summary>Gets/sets the tasks which make up the macro.</summary>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationMacro.CategoryChanged">
      <summary>Raised when the category is changed.</summary>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationMacro.ConnectionsChanged">
      <summary>Raised whenever a connection between a property and an output in this macro has been created or removed.</summary>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationMacro.Deleted">
      <summary>Raised when the macro is deleted.</summary>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationMacro.NameChanged">
      <summary>Raised when the  property is changed.</summary>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationMacroEventArgs.#ctor(DriveWorks.Specification.SpecificationMacro)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="macro">The macro which is the target of the event.</param>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationMacroEventArgs.Macro">
      <summary>Gets the macro which is the target of the event.</summary>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationMacros.GetEnumerator">
      <summary>Gets an object which can be used to enumerate the macros in the collection.</summary>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationMacros.GetMacro(System.String)">
      <summary>Gets the macro with the specified name.</summary>
      <exception caption="" cref="T:DriveWorks.ItemNotFoundException">Thrown when no macro with the specified name exists.</exception>
      <param name="macroName">The name of the macro to retrieve.</param>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationMacros.GetMacros">
      <summary>Gets all macros.</summary>
      <returns>An array of all specification macros.</returns>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationMacros.TryGetMacro(System.String,DriveWorks.Specification.SpecificationMacro@)">
      <summary>Attempts to get the macro with the given name.</summary>
      <returns>True if a macro with the given name was found and returned, otherwise false.</returns>
      <param name="macroName">The name of the macro to get.</param>
      <param name="macro">Receives the macro if found.</param>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationMacros.Add(System.String)">
      <summary>Adds a new macro with the given name.</summary>
      <returns>The newly added macro.</returns>
      <param name="name">The name of the macro.</param>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationMacros.Add(System.String,DriveWorks.SpecificationMacroCategory)">
      <summary>Adds a new macro with the given name and category</summary>
      <param name="name">The name of the macro.</param>
      <param name="category">The category that the macro belongs to.</param>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationMacros.Add(System.Xml.Linq.XElement)">
      <summary>Adds a new macro created from the given xElement.</summary>
      <returns>The newly created macro.</returns>
      <param name="macroXml">The xElement containing the definition for the specification macro.</param>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationMacros.Count">
      <summary>Gets the number of items in the collection.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationMacros.Item(System.Int32)">
      <summary>Gets the item at the given index.</summary>
      <param name="index">The index of the item to get.</param>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationMacros.Item(System.Int32)">
      <summary>Gets the item at the given index.</summary>
      <param name="index">The index of the item to get.</param>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationMacros.Item(System.String)">
      <summary>Gets the item with the given name.</summary>
      <param name="name">The name of the item to get.</param>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationMacros.MacroAdded">
      <summary>Raised when a new macro is added.</summary>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationMacros.MacroDeleted">
      <summary>Raised when a macro is deleted.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationTaskDetails.Completed">
      <summary>Determines whether the task has been performed.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationTaskDetails.Data">
      <summary>Gets the data associated with the task.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationTaskDetails.Failed">
      <summary>Determines how many times, if any, the task has failed.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationTaskDetails.Id">
      <summary>Gets the unique identifier assigned to the task.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationTaskDetails.SpecificationId">
      <summary>Gets the unique identifier of the specification to which the task belongs.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationTaskDetails.Tags">
      <summary>Gets the tags associated with the task.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationTaskDetails.Type">
      <summary>Gets the name of the provider which understands the task.</summary>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationTaskList.GetEnumerator">
      <summary>Gets an enumerator for the entries in the task list.</summary>
      <returns>An enumerator for the entries in the task list.</returns>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationTaskList.Count">
      <summary>Gets the number of items in the task list.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationTaskList.Item(System.Object)">
      <summary>Gets the task list entry with the specified key.</summary>
      <returns>The task list entry with the given key, or a null reference if one does not exist.</returns>
      <param name="key">The key of the task list entry to retrieve.</param>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationTaskList.EntryAdded">
      <summary>Raised when an entry is added to the list.</summary>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationTaskList.EntryRemoved">
      <summary>Raised when an entry is removed from the list.</summary>
    </member>
    <member name="E:DriveWorks.Specification.SpecificationTaskList.EntryUpdated">
      <summary>Raised when an entry in the list is updated.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationTaskListEntry.Key">
      <summary>Gets a key which uniquely identifies the task.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationTaskListEntry.Message">
      <summary>Gets the message for the task list entry.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationTaskListEntry.Target">
      <summary>Gets the target to which the message applies.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationTaskListEntry.TargetDisplayName">
      <summary>Gets the display name of the target to which the message applies.</summary>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationTaskListEntry.Type">
      <summary>Gets the type of the task list entry.</summary>
    </member>
    <member name="M:DriveWorks.Specification.SpecificationTaskListEntryEventArgs.#ctor(DriveWorks.Specification.SpecificationTaskListEntry)">
      <summary>Initializes a new instance of the </summary>
      <param name="entry">The entry that is the target of the event.</param>
    </member>
    <member name="P:DriveWorks.Specification.SpecificationTaskListEntryEventArgs.Entry">
      <summary>Gets the entry that is the target of the event.</summary>
    </member>
    <member name="M:DriveWorks.Specification.State.Delete">
      <summary>Deletes the state from the specification-flow.</summary>
    </member>
    <member name="P:DriveWorks.Specification.State.Id">
      <summary>Gets the unique identifier of the state.</summary>
    </member>
    <member name="P:DriveWorks.Specification.State.IsDeleted">
      <summary>Gets whether the state has been deleted and therefore can't be used.</summary>
    </member>
    <member name="P:DriveWorks.Specification.State.OnEnterEvent">
      <summary>Gets the event definition which describes the actions taken when the state is entered.</summary>
    </member>
    <member name="P:DriveWorks.Specification.State.OnLeaveEvent">
      <summary>Gets the event definition which describes the actions taken when the state is exited.</summary>
    </member>
    <member name="P:DriveWorks.Specification.State.Operations">
      <summary>Gets the operation manager for the state.</summary>
    </member>
    <member name="P:DriveWorks.Specification.State.Teams">
      <summary>Gets the teams which have access to the state.</summary>
    </member>
    <member name="P:DriveWorks.Specification.State.Title">
      <summary>Gets/sets the title.</summary>
    </member>
    <member name="P:DriveWorks.Specification.State.Transitions">
      <summary>Gets the transition manager for the state.</summary>
    </member>
    <member name="P:DriveWorks.Specification.State.Type">
      <summary>Gets/sets the type of state.</summary>
    </member>
    <member name="E:DriveWorks.Specification.State.Deleted">
      <summary>Raised when the  method is called to delete the state.</summary>
    </member>
    <member name="E:DriveWorks.Specification.State.TitleChanged">
      <summary>Raised when the  property changes.</summary>
    </member>
    <member name="E:DriveWorks.Specification.State.TypeChanged">
      <summary>Raised when the  property changes.</summary>
    </member>
    <member name="M:DriveWorks.Specification.StateChangeEventArgs.#ctor(DriveWorks.Specification.State,DriveWorks.Specification.State)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="sourceState">The state which is the source of the event.</param>
      <param name="targetState">The state which is the target of the event.</param>
    </member>
    <member name="P:DriveWorks.Specification.StateChangeEventArgs.SourceState">
      <summary>Gets the state which is the source of the event.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StateChangeEventArgs.TargetState">
      <summary>Gets the state which is the target of the event.</summary>
    </member>
    <member name="M:DriveWorks.Specification.StateEventArgs.#ctor(DriveWorks.Specification.State)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="state">The state which is the target of the event.</param>
    </member>
    <member name="P:DriveWorks.Specification.StateEventArgs.State">
      <summary>Gets the state which is the target of the event.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StateNotFoundException.StateId">
      <summary>Gets the identifier of the state that was not found.</summary>
    </member>
    <member name="M:DriveWorks.Specification.States.GetState(System.Guid)">
      <summary>Gets the state with the specified identifier.</summary>
      <exception caption="" cref="T:DriveWorks.ItemNotFoundException">Thrown if the specified state is not found.</exception>
      <returns>The state with the specified identifier.</returns>
      <param name="stateId">The unique identifier of the state to get.</param>
    </member>
    <member name="M:DriveWorks.Specification.States.CreateState">
      <summary>Creates and returns a new state.</summary>
      <returns>A new instance of the  type.</returns>
    </member>
    <member name="M:DriveWorks.Specification.States.TryGetState(System.Guid,DriveWorks.Specification.State@)">
      <summary>Tries to get the state with the specified identifier.</summary>
      <returns>True if the state was found and returned, otherwise false.</returns>
      <param name="stateId">The unique identifier of the state to get.</param>
      <param name="state">A reference to a variable which will receive the state.</param>
    </member>
    <member name="M:DriveWorks.Specification.States.TryGetState(System.String,DriveWorks.Specification.State@)">
      <summary>Tries to get the state with the specified title.</summary>
      <returns>True if the state is found.</returns>
      <param name="title">The title of the state to try find.</param>
      <param name="state">The matching state or null.</param>
    </member>
    <member name="P:DriveWorks.Specification.States.Count">
      <summary>Gets the number of states in the collection.</summary>
    </member>
    <member name="P:DriveWorks.Specification.States.Item(System.Int32)">
      <summary>Gets the item at the specified index.</summary>
      <exception caption="" cref="T:System.ArgumentOutOfRangeException">The specified index was out of the range of the collection.</exception>
      <param name="index">The index of the item to get.</param>
    </member>
    <member name="E:DriveWorks.Specification.States.StateCreated">
      <summary>Occurs when a state is created.</summary>
    </member>
    <member name="E:DriveWorks.Specification.States.StateDeleted">
      <summary>Occurs when a state is deleted.</summary>
    </member>
    <member name="M:DriveWorks.Specification.Task.AssertNotDeleted">
      <summary>Throws an instance of the  if the item has been deleted.</summary>
      <exception caption="" cref="T:DriveWorks.ItemDeletedException">The item has been deleted.</exception>
    </member>
    <member name="M:DriveWorks.Specification.Task.Delete">
      <summary>Deletes the condition.</summary>
    </member>
    <member name="M:DriveWorks.Specification.Task.DeleteCore">
      <summary>Performs any clean-up required when overridden by a derived class.</summary>
    </member>
    <member name="M:DriveWorks.Specification.Task.Execute(DriveWorks.Specification.SpecificationContext)">
      <summary>When overridden by a derived class, executes the action represented by the task.</summary>
      <param name="ctx">The specification context for the active specification.</param>
    </member>
    <member name="M:DriveWorks.Specification.Task.GetConfirmationMessage(DriveWorks.Specification.SpecificationContext)">
      <summary>When overridden by a derived class, gets a confirmation message which should be shown to an interactive user before executing the task sequence to which task
belongs.</summary>
      <returns>A confirmation message for the user, or a null reference if no confirmation is necessary.</returns>
      <param name="ctx">The specification context for the active specification.</param>
    </member>
    <member name="M:DriveWorks.Specification.Task.GetElement">
      <summary>Returns a deep copy of this task's Xml Element.</summary>
    </member>
    <member name="M:DriveWorks.Specification.Task.InitializeMetadata(System.Xml.Linq.XElement)">
      <summary>Called when the backing store for this task has been initialized and the meta data is available to be read.</summary>
      <param name="element">The XML element containing the serialized meta data.</param>
    </member>
    <member name="M:DriveWorks.Specification.Task.IsDeferred(DriveWorks.Specification.SpecificationContext)">
      <summary>Determines whether the task should be executed after the design master for the specification is saved.</summary>
      <returns>True if the task should be executed after the design master is closed.</returns>
      <param name="ctx">The specification context for the active specification.</param>
    </member>
    <member name="M:DriveWorks.Specification.Task.IsDeleteContextTask(DriveWorks.Specification.SpecificationContext)">
      <summary>Determines whether the task will be deleting the specification context in it's execution.</summary>
      <returns>True if the task will delete the specification context.</returns>
      <param name="ctx">The specification context for the active specification.</param>
    </member>
    <member name="M:DriveWorks.Specification.Task.IsRunningRequired(DriveWorks.Specification.SpecificationContext)">
      <summary>Determines whether the task requires the specification context to be open.</summary>
      <returns>True if the specification needs to be running for the task to execute.</returns>
      <param name="ctx">The specification context for the active specification.</param>
    </member>
    <member name="M:DriveWorks.Specification.Task.RequiresSingleContext(DriveWorks.Specification.SpecificationContext)">
      <summary>Determines whether the task can be executed if there is more than one specification selected.</summary>
      <returns>True if the task requires only one specification to be selectedn in order to execute.</returns>
      <param name="ctx">The specification context for the active specification.</param>
    </member>
    <member name="M:DriveWorks.Specification.Task.TryGetOutputEndpoint(System.String,System.Boolean,DriveWorks.EventFlow.NodeOutput@)">
      <summary>Attempts to retrieve the end point with the given name.</summary>
      <returns>True if the end point was found, otherwise false.</returns>
      <param name="name">The name of the end point to find.</param>
      <param name="isNavigation">True if the requested end point is a navigation end point.</param>
      <param name="output">The end point (if found), otherwise a null reference.</param>
    </member>
    <member name="P:DriveWorks.Specification.Task.Conditions">
      <summary>Gets a condition manager which can be used to add and work with conditions which can control whether the task gets executed.</summary>
    </member>
    <member name="P:DriveWorks.Specification.Task.Flow">
      <summary>Gets the  that owns this Task.</summary>
    </member>
    <member name="P:DriveWorks.Specification.Task.Left">
      <summary>Gets the left position of this task.</summary>
    </member>
    <member name="P:DriveWorks.Specification.Task.NavigationInput">
      <summary>Gets the end point that allows logical navigation connections to be made to this task.</summary>
    </member>
    <member name="P:DriveWorks.Specification.Task.NavigationOutput">
      <summary>Gets the end point that allows logical navigation connections to be made from this task.</summary>
    </member>
    <member name="P:DriveWorks.Specification.Task.Outputs">
      <summary>Gets the collection of all outputs that belong to this task.</summary>
    </member>
    <member name="P:DriveWorks.Specification.Task.Properties">
      <summary>Gets access to the property registration service.</summary>
    </member>
    <member name="P:DriveWorks.Specification.Task.Title">
      <summary>Gets/sets the human-readable title of the task.</summary>
    </member>
    <member name="P:DriveWorks.Specification.Task.Top">
      <summary>Gets the top position of this task.</summary>
    </member>
    <member name="E:DriveWorks.Specification.Task.Deleted">
      <summary>Occurs when the task is deleted.</summary>
    </member>
    <member name="M:DriveWorks.Specification.TaskAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the  class.</summary>
      <param name="displayName">The localized display name of the task, or a resource string which identifies the string to use.</param>
      <param name="image">A resource string which identifies the image to use.</param>
    </member>
    <member name="M:DriveWorks.Specification.TaskAttribute.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the  class.</summary>
      <param name="displayName">The localized display name of the task, or a resource string which identifies the string to use.</param>
      <param name="image">A resource string which identifies the image to use.</param>
      <param name="categoryName">The localized display name of the task's cateogy, or a resource string which identifies the string to use.</param>
    </member>
    <member name="P:DriveWorks.Specification.TaskAttribute.CategoryName">
      <summary>Gets the name of the category that this task belongs to.</summary>
    </member>
    <member name="P:DriveWorks.Specification.TaskAttribute.DisplayName">
      <summary>Gets a localized display name of the task, or a resource string which identifies the string to use.</summary>
    </member>
    <member name="P:DriveWorks.Specification.TaskAttribute.Image">
      <summary>Gets a resource string which identifies the image to use.</summary>
    </member>
    <member name="M:DriveWorks.Specification.TaskEventArgs.#ctor(DriveWorks.Specification.Task)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="task">The task which is the target of the event.</param>
    </member>
    <member name="P:DriveWorks.Specification.TaskEventArgs.Task">
      <summary>Gets the task which is the target of the event.</summary>
    </member>
    <member name="P:DriveWorks.Specification.TaskNotFoundException.TypeName">
      <summary>Gets the type name of the task for which an implementation could not be found.</summary>
    </member>
    <member name="M:DriveWorks.Specification.TaskSequence.Clear">
      <summary>Clears all of the tasks.</summary>
    </member>
    <member name="M:DriveWorks.Specification.TaskSequence.GetEnumerator">
      <summary>Gets an enumerator suitable for enumerating the tasks in the task sequence.</summary>
      <returns>An IEnumerator specialized for the  type.</returns>
    </member>
    <member name="M:DriveWorks.Specification.TaskSequence.IndexOf(DriveWorks.Specification.Task)">
      <summary>Gets the index of the given task.</summary>
      <returns>The index of the given task, or -1 if the task is not in this collection.</returns>
      <param name="task">The task whose index to retrieve.</param>
    </member>
    <member name="M:DriveWorks.Specification.TaskSequence.Move(System.Int32,System.Int32)">
      <summary>Move the task from its current index to the specified index.</summary>
      <param name="oldIndex">The old index of the task.</param>
      <param name="newIndex">The new index of the task.</param>
    </member>
    <member name="M:DriveWorks.Specification.TaskSequence.ToArray">
      <summary>Copies the tasks to a new array and returns it.</summary>
      <returns>A new array containing all the tasks in this instance.</returns>
    </member>
    <member name="M:DriveWorks.Specification.TaskSequence.CreateTask``1(System.String)">
      <summary>Creates and adds a new task to the task sequence.</summary>
      <exception caption="" cref="T:System.ArgumentOutOfRangeException">The type specified in for the type parameter T isn't defined in a extension library.</exception>
      <returns>The newly created task.</returns>
      <typeparam name="T">The type of the task to add.</typeparam>
    </member>
    <member name="M:DriveWorks.Specification.TaskSequence.CreateTask``1(System.String,System.Boolean)">
      <summary>Creates and adds a new task to the task sequence.</summary>
      <exception caption="" cref="T:System.ArgumentOutOfRangeException">The type specified in for the type parameter T isn't defined in a extension library.</exception>
      <returns>The newly created task.</returns>
      <typeparam name="T">The type of the task to add.</typeparam>
      <param name="title">The title of the task</param>
      <param name="createConnection">True to create a connection between this task and the previously added task. (Or Start if no other task has been added).</param>
    </member>
    <member name="M:DriveWorks.Specification.TaskSequence.CreateTask``1(System.String,System.Double,System.Double)">
      <summary>Creates and adds a new task to the task sequence.</summary>
      <exception caption="" cref="T:System.ArgumentOutOfRangeException">The type specified in for the type parameter T isn't defined in a extension library.</exception>
      <returns>The newly created task.</returns>
      <typeparam name="T">The type of the task to add.</typeparam>
      <param name="title">The title of the task</param>
      <param name="left">The left position of the task.</param>
      <param name="top">The top position of the task.</param>
    </member>
    <member name="M:DriveWorks.Specification.TaskSequence.CreateTask``1(System.String,System.Double,System.Double,System.Boolean)">
      <summary>Creates and adds a new task to the task sequence.</summary>
      <exception caption="" cref="T:System.ArgumentOutOfRangeException">The type specified in for the type parameter T isn't defined in a extension library.</exception>
      <returns>The newly created task.</returns>
      <typeparam name="T">The type of the task to add.</typeparam>
      <param name="title">The title of the task</param>
      <param name="left">The left position of the task.</param>
      <param name="top">The top position of the task.</param>
      <param name="createConnection">True to create a connection between this task and the previously added task. (Or Start if no other task has been added).</param>
    </member>
    <member name="M:DriveWorks.Specification.TaskSequence.CreateTask(System.Type,System.String)">
      <summary>Creates and adds a new task to the task sequence.</summary>
      <exception caption="" cref="T:System.ArgumentOutOfRangeException">The type specified in %taskType% does not inherit from %T:DriveWorks.Specification.Task% or isn't defined in a extension library.</exception>
      <returns>The newly created task.</returns>
      <param name="taskType">The type of the task to add.</param>
      <param name="title">The title of the task</param>
    </member>
    <member name="M:DriveWorks.Specification.TaskSequence.CreateTask(System.Type,System.String,System.Boolean)">
      <summary>Creates and adds a new task to the task sequence.</summary>
      <exception caption="" cref="T:System.ArgumentOutOfRangeException">The type specified in %taskType% does not inherit from %T:DriveWorks.Specification.Task% or isn't defined in a extension library.</exception>
      <returns>The newly created task.</returns>
      <param name="taskType">The type of the task to add.</param>
      <param name="title">The title of the task</param>
      <param name="createConnection">True to create a connection between this task and the previously added task. (Or Start if no other task has been added).</param>
    </member>
    <member name="M:DriveWorks.Specification.TaskSequence.CreateTask(System.Type,System.String,System.Double,System.Double)">
      <summary>Creates and adds a new task to the task sequence.</summary>
      <exception caption="" cref="T:System.ArgumentOutOfRangeException">The type specified in %taskType% does not inherit from %T:DriveWorks.Specification.Task% or isn't defined in a extension library.</exception>
      <returns>The newly created task.</returns>
      <param name="taskType">The type of the task to add.</param>
      <param name="title">The title of the task</param>
      <param name="left">The left position of the task.</param>
      <param name="top">The top position of the task.</param>
    </member>
    <member name="M:DriveWorks.Specification.TaskSequence.CreateTask(System.Type,System.String,System.Double,System.Double,System.Boolean)">
      <summary>Creates and adds a new task to the task sequence.</summary>
      <exception caption="" cref="T:System.ArgumentOutOfRangeException">The type specified in %taskType% does not inherit from %T:DriveWorks.Specification.Task% or isn't defined in a extension library.</exception>
      <returns>The newly created task.</returns>
      <param name="taskType">The type of the task to add.</param>
      <param name="title">The title of the task</param>
      <param name="left">The left position of the task.</param>
      <param name="top">The top position of the task.</param>
      <param name="createConnection">True to create a connection between the created task and the last added task.</param>
    </member>
    <member name="P:DriveWorks.Specification.TaskSequence.Count">
      <summary>Gets the number of tasks which have been added to this instance.</summary>
    </member>
    <member name="P:DriveWorks.Specification.TaskSequence.Item(System.Int32)">
      <summary>Gets the task at the specified index.</summary>
      <exception caption="" cref="T:System.IndexOutOfRangeException">Thrown if the specified index is out of range.</exception>
      <param name="index">The zero-based index of the task to retrieve.</param>
    </member>
    <member name="E:DriveWorks.Specification.TaskSequence.TaskCreated">
      <summary>Occurs when a task is created.</summary>
    </member>
    <member name="E:DriveWorks.Specification.TaskSequence.TaskDeleted">
      <summary>Occurs when a task is deleted.</summary>
    </member>
    <member name="M:DriveWorks.Specification.Teams.AddTeam(System.Guid)">
      <summary>Adds the team with the specified identifier to the collection.</summary>
      <param name="teamId">The unique identifier of the team to add.</param>
    </member>
    <member name="M:DriveWorks.Specification.Teams.Clear">
      <summary>Clears the list of teams allowed by this instance.</summary>
    </member>
    <member name="M:DriveWorks.Specification.Teams.Import(System.String)">
      <summary>Imports a team list from it's serialized representation.</summary>
      <param name="serializedForm">A serialized team list.</param>
    </member>
    <member name="M:DriveWorks.Specification.Teams.IsPermitted(System.Guid[],System.Guid,System.Guid,System.Guid)">
      <summary>Checks to see if the team with the specified identifier is allowed according to the current access control list.</summary>
      <returns>True if the team with the specified identifier is allowed, otherwise false.</returns>
      <param name="teamsToCheck">The unique identifier of the teams to check.</param>
      <param name="currentUserId">The identifier of the user to check for permission.</param>
      <param name="creatorId">The identifier of the specification's creator.</param>
      <param name="ownerId">The identifier of the specification's owner.</param>
    </member>
    <member name="M:DriveWorks.Specification.Teams.RemoveTeam(System.Guid)">
      <summary>Removes the team with the specified identifier from the collection.</summary>
      <param name="teamId">The unique identifier of the team to remove.</param>
    </member>
    <member name="M:DriveWorks.Specification.Teams.ToString">
      <summary>Converts the team collection to a string of comma-delimited identifiers.</summary>
    </member>
    <member name="M:DriveWorks.Specification.Teams.ToTeamArray">
      <summary>Gets an array of the team identifiers in the control list.</summary>
    </member>
    <member name="M:DriveWorks.Specification.Teams.ToArray">
      <summary>Copies all of the team identifiers to a new array and returns them.</summary>
      <returns>An array of team identifiers represented as strings.</returns>
    </member>
    <member name="M:DriveWorks.Specification.Teams.ToArray(System.Boolean)">
      <summary>Copies all of the team identifiers to a new array and returns them.</summary>
      <returns>An array of team identifiers represented as strings.</returns>
      <param name="includePermissions">True to include !, ?, * in the returned array if the associated permissions are set, false to return only team information.</param>
    </member>
    <member name="P:DriveWorks.Specification.Teams.IsCreatorPermitted">
      <summary>Gets/sets whether the creator of a specification is permitted.</summary>
    </member>
    <member name="P:DriveWorks.Specification.Teams.IsOwnerPermitted">
      <summary>Gets/sets whether the owner of a specification is permitted.</summary>
    </member>
    <member name="P:DriveWorks.Specification.Teams.IsUniversal">
      <summary>Gets/sets whether the instance is Universal, i.e. all teams are allowed by the instance.</summary>
    </member>
    <member name="M:DriveWorks.Specification.Transition.Delete">
      <summary>Deletes the transition.</summary>
    </member>
    <member name="P:DriveWorks.Specification.Transition.Conditions">
      <summary>Gets the conditions which govern the availability of the transition.</summary>
    </member>
    <member name="P:DriveWorks.Specification.Transition.IsDeleted">
      <summary>Determines whether the transition has been deleted.</summary>
    </member>
    <member name="P:DriveWorks.Specification.Transition.Name">
      <summary>Gets the unique name of the transition.</summary>
    </member>
    <member name="P:DriveWorks.Specification.Transition.OnInvokeEvent">
      <summary>Gets the event definition which describes the actions taken when the transition is invoked.</summary>
    </member>
    <member name="P:DriveWorks.Specification.Transition.State">
      <summary>Gets the state to which the transition belongs.</summary>
    </member>
    <member name="P:DriveWorks.Specification.Transition.TargetState">
      <summary>Gets/sets the state which is the target of the transition.</summary>
    </member>
    <member name="P:DriveWorks.Specification.Transition.Teams">
      <summary>Gets the teams which have access to the transition.</summary>
    </member>
    <member name="P:DriveWorks.Specification.Transition.Title">
      <summary>Gets/sets the title of the transition.</summary>
    </member>
    <member name="E:DriveWorks.Specification.Transition.Deleted">
      <summary>Raised when the transition is deleted.</summary>
    </member>
    <member name="E:DriveWorks.Specification.Transition.NameChanged">
      <summary>Raised when the  property is changed.</summary>
    </member>
    <member name="E:DriveWorks.Specification.Transition.TargetStateChanged">
      <summary>Raised when the  property is changed.</summary>
    </member>
    <member name="E:DriveWorks.Specification.Transition.TitleChanged">
      <summary>Raised when the  property is changed.</summary>
    </member>
    <member name="M:DriveWorks.Specification.TransitionEventArgs.#ctor(DriveWorks.Specification.Transition)">
      <summary>Initializes a new instance of the  type.</summary>
      <param name="transition">The transition which is the target of the event.</param>
    </member>
    <member name="P:DriveWorks.Specification.TransitionEventArgs.Transition">
      <summary>Gets the transition which is the target of the event.</summary>
    </member>
    <member name="M:DriveWorks.Specification.Transitions.CreateTransition(System.String)">
      <summary>Creates and returns a new transition.</summary>
      <returns>A new instance of the  class.</returns>
      <param name="name">The unique name of the transition.</param>
    </member>
    <member name="M:DriveWorks.Specification.Transitions.GetEnumerator">
      <summary>Gets an enumerator suitable for enumerating the transitions in the collection.</summary>
      <returns>An IEnumerator specialized for the  type.</returns>
    </member>
    <member name="M:DriveWorks.Specification.Transitions.GetTransition(System.String)">
      <summary>Gets the transition with the specified name.</summary>
      <exception caption="" cref="T:DriveWorks.ItemNotFoundException">The transition could not be found.</exception>
      <returns>The transition with the specified name.</returns>
      <param name="name">The name of the transition to get.</param>
    </member>
    <member name="M:DriveWorks.Specification.Transitions.GetTransitionsByTitle(System.String)">
      <summary>Gets the transitions in the collection with the specified title.</summary>
      <returns>An array of transitions.</returns>
      <param name="title">The title of the transitions to retrieve.</param>
    </member>
    <member name="M:DriveWorks.Specification.Transitions.Move(System.Int32,System.Int32)">
      <summary>Move the transition from its current index to the specified index.</summary>
      <param name="oldIndex">The old index of the transition.</param>
      <param name="newIndex">The new index of the transition.</param>
    </member>
    <member name="M:DriveWorks.Specification.Transitions.ToArray">
      <summary>Copies all the transitions to a new array and returns it.</summary>
      <returns>An array of transitions.</returns>
    </member>
    <member name="M:DriveWorks.Specification.Transitions.TryGetTransition(System.String,DriveWorks.Specification.Transition@)">
      <summary>Gets the transition with the specified name.</summary>
      <returns>True if the transition was found and returned, otherwise false.</returns>
      <param name="name">The name of the transition to get.</param>
      <param name="transition">Receives the transition.</param>
    </member>
    <member name="P:DriveWorks.Specification.Transitions.Count">
      <summary>Returns the number of transitions in the collection.</summary>
    </member>
    <member name="P:DriveWorks.Specification.Transitions.Item(System.Int32)">
      <summary>Gets the transition at the specified index.</summary>
      <returns>The transition at the specified index.</returns>
      <param name="index">The zero-based index of the transition to get.</param>
    </member>
    <member name="E:DriveWorks.Specification.Transitions.TransitionCreated">
      <summary>Occurs when a transition is created.</summary>
    </member>
    <member name="E:DriveWorks.Specification.Transitions.TransitionDeleted">
      <summary>Occurs when a transition is deleted.</summary>
    </member>
    <member name="E:DriveWorks.Specification.Transitions.TransitionMoved">
      <summary>Occurs when a transition's index has changed.</summary>
    </member>
    <member name="M:DriveWorks.Specification.UnparsableFlowPropertyValueException.#ctor(System.String,System.String,System.String)">
      <summary>Creates a new instance of the  class.</summary>
      <param name="name">The name of the property.</param>
      <param name="value">The value that was given.</param>
      <param name="type">The expected type.</param>
    </member>
    <member name="P:DriveWorks.Specification.UnparsableFlowPropertyValueException.ExpectedType">
      <summary>The type the property expected, i.e.: "numerical", "boolean"</summary>
    </member>
    <member name="P:DriveWorks.Specification.UnparsableFlowPropertyValueException.PropertyName">
      <summary>The name of the property</summary>
    </member>
    <member name="P:DriveWorks.Specification.UnparsableFlowPropertyValueException.Value">
      <summary>The value that was given to the property</summary>
    </member>
    <member name="T:DriveWorks.Specification.AdditionalFoldersCreatedEventHandler">
      <summary>Represents a method which will handle the creation of additional folders.</summary>
    </member>
    <member name="T:DriveWorks.Specification.ConditionEventHandler">
      <summary>Represents a method which will handle a condition event.</summary>
    </member>
    <member name="T:DriveWorks.Specification.EventSequenceEventHandler">
      <summary>Represents a method which will handle an event sequence event.</summary>
    </member>
    <member name="T:DriveWorks.Specification.OperationEventHandler">
      <summary>Represents a method which will handle an operation event.</summary>
    </member>
    <member name="T:DriveWorks.Specification.SpecificationContextEventHandler">
      <summary>Represents a method that will handle events involving specification context.</summary>
    </member>
    <member name="T:DriveWorks.Specification.SpecificationDocumentEventHandler">
      <summary>Represents a method which will handle a specification document event.</summary>
    </member>
    <member name="T:DriveWorks.Specification.SpecificationTaskListEntryEventHandler">
      <summary>Represents a method that will handle events related to specification task list entries.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StateChangeEventHandler">
      <summary>Represents a method which will handle a state change event.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StateEventHandler">
      <summary>Represents a method which will handle a state event.</summary>
    </member>
    <member name="T:DriveWorks.Specification.TaskEventHandler">
      <summary>Represents a method which will handle a task event.</summary>
    </member>
    <member name="T:DriveWorks.Specification.TransitionEventHandler">
      <summary>Represents a method which will handle a transition event.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardConditions.ApplicationTypeCondition">
      <summary>A specification-flow condition which checks the type of running application.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardConditions.CanEditCompletedSpecificationsCondition">
      <summary>A specification-flow condition which determines whether the ReleaseToAutoPilot is enabled.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardConditions.CheckValueCondition">
      <summary>A specification-flow condition which determines whether the value entered is TRUE/YES/1.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardConditions.DocumentGenerationBehaviorCondition">
      <summary>A specification-flow condition which checks a specification setting.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardConditions.IsArchivedCondition">
      <summary>A specification-flow condition which determines whether the active specification is archived.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardConditions.IsCancellingCondition">
      <summary>A specification-flow condition which checks whether a specification is being cancelled.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardConditions.IsChildSpecificationCondition">
      <summary>A specification-flow condition which checks whether a running specification is a child specification.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardConditions.ReleaseToAutoPilotCondition">
      <summary>A specification-flow condition which determines whether the ReleaseToAutoPilot is enabled.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardConditions.SpecificationCompleteCondition">
      <summary>A specification-flow condition which checks whether a running specification is complete.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardConditions.SpecificationTypeCondition">
      <summary>A specification-flow condition which checks the type of specification.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardConditions.ApplicationTypeCondition.Type">
      <summary>Gets the type of application for which to check.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardConditions.CheckValueCondition.Value">
      <summary>Gets the value to check for.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardConditions.SpecificationTypeCondition.Type">
      <summary>Gets the type of specification to check for.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.ICopySpecificationHostService">
      <summary>Provides a contract for hosts which support the copying of a specification using the  task.</summary>
    </member>
    <member name="M:DriveWorks.Specification.StandardTasks.ICopySpecificationHostService.RequestCopy(DriveWorks.Specification.SpecificationContext)">
      <summary>Requests that the host copies the specification represented by the given context.</summary>
      <param name="ctx">A specification context for the specification to copy.</param>
    </member>
    <member name="M:DriveWorks.Specification.StandardTasks.ICopySpecificationHostService.RequestCopyWithId(DriveWorks.Specification.SpecificationContext)">
      <summary>Requests that the host copies the specification represented by the given context.</summary>
      <returns>The id of the created specification.</returns>
      <param name="ctx">A specification context for the specification to copy.</param>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.AddTeamTask">
      <summary>A specification flow task for adding a new team.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.AddUserTask">
      <summary>A specification-flow task capable of adding a new user</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.AddUserToTeamTask">
      <summary>A specification-flow task capable of adding a user to a team</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.ArchiveSpecificationTask">
      <summary>A specification-flow task capable of toggling the archived state of a specification.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.Base64EncodeFileTask">
      <summary>Provides a task to convert a file into a Base64 string which is driven into a constant.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.CancelSpecificationTask">
      <summary>A specification-flow task capable of cancelling the current specification.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.CancelSpecificationTimerTask">
      <summary>A specification-flow task cancelling a running timer within a specification.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.ChangeChildSpecificationStateTask">
      <summary>A specification-flow task capable of changing the active state for a given child specification.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.ClearComponentsDeferredFlagTask">
      <summary>Clears the component deferred flag for a specific component (or list of components).</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.ClearSpecificationComponentsDeferredFlagTask">
      <summary>Clears the deferred flag for all components associated with a specification.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.ClickatellTask">
      <summary>Sends a text message using the Clickatell service.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.CompleteChildSpecificationTask">
      <summary>A specification-flow task capable of notifying the parent context to read variable values from this specification.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.CopyClosedChildSpecificationTask">
      <summary>A specification-flow task capable of copying a child specification while keeping it closed.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.CopyClosedSpecificationTask">
      <summary>A specification-flow task capable of copying a rooted specification while keeping it closed.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.CopyFileTask">
      <summary>Provides a task which can copy or move a single file from one location to another.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.CopyFolderTask">
      <summary>Provides a task which can copy or move a folder, including its subfolders to a new destination.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.CopySpecificationTask">
      <summary>A specification-flow task capable of copying a specification.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.DelayMacroTimeoutTask">
      <summary>Provides a task that when executed will set the specification macro last notification time (for long running macro/task).</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.DeleteCalculationTableRowsTask">
      <summary>Provides a task that will remove rows from a calculation table.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.DeleteFileTask">
      <summary>Provides a task which can delete a file.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.DeleteFolderTask">
      <summary>Provides a task which can delete a directory and optionally its contents.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.DeleteGroupTableRowsTask">
      <summary>Provides a task that will remove rows from a group table.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.DeleteSimpleTableRowsTask">
      <summary>Provides a task that will remove rows from a project's simple table.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.DeleteSpecificationTask">
      <summary>A specification-flow task capable of deleting a specification.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.DeleteTeamTask">
      <summary>A specification-flow task capable of deleting a team.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.DeleteUserTask">
      <summary>A specification-flow task capable of deleting a user</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.DesignMasterMacroLoopTask">
      <summary>A specification-flow task capable of running a macro in a design master in a loop during a specification.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.DesignMasterMacroTask">
      <summary>A specification-flow task capable of running a macro in a design master during a specification.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.DriveConstantValueTask">
      <summary>A specification-flow task capable of changing the value of constant.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.DriveControlValueTask">
      <summary>A specification-flow task capable of changing the value of a control.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.EvaluateRuleValueTask">
      <summary>A specification flow task that is capable of evaluating a rule then storing the result in a constant.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.ExportSpecificationDataTask">
      <summary>Creates an XML or JSON file containing all the selected data from the specification.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.GetConstantValueTask">
      <summary>A specification flow task that is capable of copying one constant value to another.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.GetControlValueTask">
      <summary>A specification-flow task capable of copying the value of a control and storing it in a constant.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.IncrementRevisionNumberTask">
      <summary>A specification-flow task which increments the specification's revision number.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.InvokeChildSpecificationOperationTask">
      <summary>A specification flow task that is capable of invoking an operation on a child specification.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.InvokeChildSpecificationTransitionTask">
      <summary>A specification flow task that is capable of invoking a transition on a child specification.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.NavigateBackward">
      <summary>A specification-flow task that will attempt to navigate backward in the Form Navigation.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.NavigateForward">
      <summary>A specification-flow task that will attempt to navigate forwards in the Form Navigation.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.RealTimeReleaseModelsTask">
      <summary>A specification-flow task capable of releasing one or more models for realtime.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.RefreshTableTask">
      <summary>A specification flow task that is capable of refreshing tables.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.RegenerateAndDeleteComponentTask">
      <summary>A specification-flow task capable of marking a component for regeneration and deleting the already generated file.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.RegenerateAndDeleteSpecificationComponentsTask">
      <summary>A specification-flow task capable of deleting and marking all released components associated with a specification for regeneration.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.RegenerateAndOverwriteComponentTask">
      <summary>A specification-flow task capable of marking a component for generation and setting the Force-Overwrite flag.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.RegenerateAndOverwriteSpecificationComponentsTask">
      <summary>A specification-flow task capable of updating the Force-Overwrite flag and marking all released components associated with a specification for regeneration.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.ReleaseDocumentsTask">
      <summary>A specification-flow task capable of releasing one or more documents.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.ReleaseEmailsTask">
      <summary>A specification-flow task capable of releasing one or more emails.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.ReleaseModelsTask">
      <summary>A specification-flow task capable of releasing one or more models.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.RemoveUserFromTeamTask">
      <summary>A specification-flow task capable of removing a user from a team</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.Run3DPreviewTask">
      <summary>A specification-flow task for getting the 3d preview model for a preview control.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.RunMacroInHostedSpecificationTask">
      <summary>A task that will execute a macro in a hosted specification.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.RunMacroInHostSpecificationTask">
      <summary>Task that will execute a macro in the current context's host specification.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.SendHttpRequestTask">
      <summary>A task capable of Sending a HTTP request.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.SetOwnerTask">
      <summary>A specification-flow task capable of adding a new user</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.SetSpecificationHostControlTask">
      <summary>Task that will host a specification in a specification host control.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.SetUserEnabledTask">
      <summary>A specification-flow task capable of setting the enabled status of a user</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.SkipRemainingTasksTask">
      <summary>Provides a task that when executed will skip remaining task in the current task sequence.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.SkipToFormTask">
      <summary>A specification flow task that is capable of skipping to a form.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.StartSpecificationTimerTask">
      <summary>A specification-flow task capable of running a timer within a specification.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.StoreSpecificationTask">
      <summary>A Specification Flow Task that saves the current specification without stopping it.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.UpdateTeamDisplayNameTask">
      <summary>A specification flow task which updates the display name of a team.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.UpdateTeamLeaderStatusTask">
      <summary>A specification-flow task capable of enabling / disabling a users Team Leader status</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.UpdateTeamMembersCanCaptureTask">
      <summary>A specification flow task which updates the Members Can Capture property of a team.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.UpdateTeamMembersCanEditAllSpecificationsTask">
      <summary>A specification flow task which updates the Members Can Edit All Specifications property of a team.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.UpdateTeamMembersCanEditGroupSecurityTask">
      <summary>A specification flow task which updates the Members Can Edit Group Security property of a team.</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.UpdateUserDisplayNameTask">
      <summary>A specification-flow task capable of updating the users display name</summary>
    </member>
    <member name="T:DriveWorks.Specification.StandardTasks.UpdateUserEmailAddressTask">
      <summary>A specification-flow task capable of updating a users email address</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.AddUserTask.IsEnabled">
      <summary>Gets or sets the enabled status for the user</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.AddUserTask.IsTeamLeader">
      <summary>Gets or sets the Team Leader status for the user</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.AddUserTask.TeamName">
      <summary>gets or sets the team name for the user</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.AddUserTask.UserDisplayName">
      <summary>Gets or sets the display name for the user</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.AddUserTask.UserEmailAddress">
      <summary>Gets or Sets the email address for the user</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.AddUserTask.UserName">
      <summary>Gets or sets the username for the user</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.AddUserTask.UserPassword">
      <summary>Gets or sets the users password</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.AddUserToTeamTask.TeamName">
      <summary>Gets or sets the Team Name</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.AddUserToTeamTask.UserName">
      <summary>Gets or sets the users username</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.ArchiveSpecificationTask.Action">
      <summary>Gets or sets the action to be performed by the archiving task.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.Base64EncodeFileTask.ConstantName">
      <summary>Gets/sets the flow property that is control of the name of the constant to drive the value into.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.Base64EncodeFileTask.FilePath">
      <summary>Gets/sets the path to the file to be encoded.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.CancelSpecificationTimerTask.TimerNames">
      <summary>Gets/sets the name/s of the Timer/s to cancel.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.ClearComponentsDeferredFlagTask.Components">
      <summary>A pipe-delimited list of drawing ids or target paths to clear the deferred flag of.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.ClearSpecificationComponentsDeferredFlagTask.SpecificationId">
      <summary>Gets/sets the id of the specification whose drawings to clear the deferred flag on.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.CopyClosedChildSpecificationTask.ChildSpecificationIndex">
      <summary>Gets the property responsible for the specification id to match against.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.CopyClosedChildSpecificationTask.ChildSpecificationListName">
      <summary>Gets the property that specifies the child specification list to use.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.CopyClosedChildSpecificationTask.ChildSpecificationName">
      <summary>Gets the property responsible for the specification name to match against.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.CopyClosedChildSpecificationTask.CopiedSpecificationNameConstantName">
      <summary>Gets the property responsible for the name of the constant to place the copied specification's name in.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.CopyClosedSpecificationTask.CopiedSpecificationIdConstantName">
      <summary>Gets the property responsible for the name of the constant to place the copied specification's id in.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.CopyClosedSpecificationTask.SpecificationId">
      <summary>Gets the property responsible for the specification id to match against.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.CopyClosedSpecificationTask.SpecificationName">
      <summary>Gets the property responsible for the specification name to match against.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.CopyFileTask.DestinationFile">
      <summary>Gets/sets the path to which to copy or move the file.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.CopyFileTask.Move">
      <summary>Gets/sets whether to move the file (TRUE) or copy it (FALSE).</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.CopyFileTask.Overwrite">
      <summary>Gets/sets whether to overwrite the destination file if it already exists.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.CopyFileTask.SourceFile">
      <summary>Gets/sets the path to the file to be copied or moved.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.CopyFolderTask.DestinationFolderPath">
      <summary>Gets/sets the path to which to copy or move the folder.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.CopyFolderTask.Move">
      <summary>Gets/sets whether to move the folder (TRUE) or copy it (FALSE).</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.CopyFolderTask.Overwrite">
      <summary>Gets/sets whether to overwrite the destination folder if it already exists.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.CopyFolderTask.SourceFolderPath">
      <summary>Gets/sets the path to the source folder.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.CreateClosedChildSpecificationTask.ChildSpecificationListNameProperty">
      <summary>Gets the property that controls the name of the child specification list to create the child specification on.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.CreateClosedChildSpecificationTask.CreatedSpecificationId">
      <summary>Gets the output that will be fulfilled with the create specification's id after this task has executed.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.CreateClosedChildSpecificationTask.ProjectNameProperty">
      <summary>Gets the property that controls the name of the project to create on the specified child specification list.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.CreateClosedChildSpecificationTask.TransitionNameProperty">
      <summary>Gets the property that controls the name of the transition to invoke on the created child specification list.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.DeleteCalculationTableRowsTask.FieldNames">
      <summary>Gets/sets the column names to match against, delimited by pipe bars.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.DeleteCalculationTableRowsTask.MatchValues">
      <summary>Gets/sets the values to match against, based on the fields specified in the
 property. Values should be delimited with pipe bars.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.DeleteCalculationTableRowsTask.TableName">
      <summary>Gets/sets the name of the calculation table to remove rows from.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.DeleteFileTask.Path">
      <summary>Gets/sets the path to the file to delete.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.DeleteFolderTask.Path">
      <summary>Gets/sets the path to the directory to delete.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.DeleteFolderTask.Recursive">
      <summary>Gets/sets whether to delete the contents of the directory.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.DeleteGroupTableRowsTask.FieldNames">
      <summary>Gets/sets the column names to match against, delimited by pipe bars.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.DeleteGroupTableRowsTask.MatchValues">
      <summary>Gets/sets the values to match against, based on the fields specified in the 
property. Values should be delimited with pipe bars.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.DeleteGroupTableRowsTask.TableName">
      <summary>Gets/sets the name of the group table to remove rows from.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.DeleteSimpleTableRowsTask.FieldNames">
      <summary>Gets/sets the column names to match against, delimited by pipe bars.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.DeleteSimpleTableRowsTask.MatchValues">
      <summary>Gets/sets the values to match against, based on the fields specified in the 
property. Values should be delimited with pipe bars.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.DeleteSimpleTableRowsTask.TableName">
      <summary>Gets/sets the name of the simple table to remove rows from.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.DeleteUserTask.UserName">
      <summary>Gets or sets the username of the user to delete</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.DesignMasterMacroLoopTask.Defer">
      <summary>Gets/sets whether the macro execution should be deferred.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.DesignMasterMacroLoopTask.MacroArgument">
      <summary>Gets/sets the optional argument to pass to the macro.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.DesignMasterMacroLoopTask.MacroName">
      <summary>Gets/sets the name of the macro to run.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.DesignMasterMacroTask.Defer">
      <summary>Gets/sets whether the macro execution should be deferred.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.DesignMasterMacroTask.MacroArgument">
      <summary>Gets/sets the optional argument to pass to the macro.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.DesignMasterMacroTask.MacroName">
      <summary>Gets/sets the name of the macro to run.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.DriveConstantValueTask.ConstantName">
      <summary>Gets/sets the flow property that is control of the name of the constant to drive the value into.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.DriveConstantValueTask.ConstantValue">
      <summary>Gets/sets the flow property that is in control of the new value to drive into the constant.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.DriveConstantValueTask.ConstantValueNative">
      <summary>Gets the native flow property that is in control of the new value to drive into the constant.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.DriveControlValueTask.ControlName">
      <summary>Gets/sets the flow property that is the name of the control to drive the value into.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.DriveControlValueTask.ControlValue">
      <summary>Gets/sets the flow property that is in control of the new value to drive into the control.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.DriveControlValueTask.UseLocalValueFormat">
      <summary>Gets/sets whether the control value should be converted using the rules for the current culture before driving it into the control.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.EvaluateRuleValueTask.ConstantName">
      <summary>Gets/sets the name of the constant to store the result in.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.EvaluateRuleValueTask.RuleText">
      <summary>Gets/sets the rule that will be evaluated once, then have its result evaluated again. The final result of which is stored in the target constant, specified by
.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.ExportSpecificationDataTask.ConstantsToInclude">
      <summary>Gets/sets the list of constants to include within the file to export.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.ExportSpecificationDataTask.ExportFormat">
      <summary>Gets/sets the format of the file to export.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.ExportSpecificationDataTask.OutputFileName">
      <summary>Gets/sets the file name of the file to export.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.ExportSpecificationDataTask.OverwriteFlag">
      <summary>Gets/sets whether to overwrite an existing file or not.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.ExportSpecificationDataTask.ProjectTablesToInclude">
      <summary>Gets/sets the list of project tables to include within the file to export.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.GetConstantValueTask.SourceConstantName">
      <summary>Gets/sets the flow property that is the name of the control to copy the value from.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.GetConstantValueTask.TargetConstantName">
      <summary>Gets/sets the flow property that is in control of the constant to store the control value in.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.GetControlValueTask.SourceControlName">
      <summary>Gets/sets the flow property that is the name of the control to copy the value from.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.GetControlValueTask.TargetConstantName">
      <summary>Gets/sets the flow property that is in control of the constant to store the control value in.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.InvokeChildSpecificationOperationTask.ChildSpecificationListNameProperty">
      <summary>Gets the flow property responsible for the name of the child specification list to get the child specification from.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.InvokeChildSpecificationOperationTask.ChildSpecIndexProperty">
      <summary>Gets the flow property responsible for the index of the child specification to invoke the operation on.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.InvokeChildSpecificationOperationTask.ChildSpecNameProperty">
      <summary>Gets the flow property responsible for the name of the child specification to invoke the operation on.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.InvokeChildSpecificationOperationTask.OperationNameProperty">
      <summary>Gets the flow property responsible for the name of the operation to invoke on the child specification.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.InvokeChildSpecificationTransitionTask.ChildSpecificationListNameProperty">
      <summary>Gets the flow property responsible for the name of the child specification list to get the child specification from.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.InvokeChildSpecificationTransitionTask.ChildSpecIndexProperty">
      <summary>Gets the flow property responsible for the index of the child specification to invoke the transition on.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.InvokeChildSpecificationTransitionTask.ChildSpecNameProperty">
      <summary>Gets the flow property responsible for the name of the child specification to invoke the transition on.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.InvokeChildSpecificationTransitionTask.TransitionNameProperty">
      <summary>Gets the flow property responsible for the name of the transition to invoke on the child specification.</summary>
    </member>
    <member name="M:DriveWorks.Specification.StandardTasks.RealTimeReleaseModelsTask.Execute(DriveWorks.Specification.SpecificationContext)">
      <summary>Overridden to implement the logic required to release one or more models for realtime.</summary>
      <param name="ctx">The specification context for the active specification.</param>
    </member>
    <member name="M:DriveWorks.Specification.StandardTasks.RealTimeReleaseModelsTask.GetResults(DriveWorks.Specification.SpecificationContext)">
      <summary>Releases the configured models and returns the results.</summary>
      <returns>The results of releasing the components.</returns>
      <param name="ctx">The specification context for the active specification.</param>
    </member>
    <member name="M:DriveWorks.Specification.StandardTasks.RealTimeReleaseModelsTask.IsRunningRequired(DriveWorks.Specification.SpecificationContext)">
      <summary>Overridden to indicate that a running specification is required by the task to execute.</summary>
      <returns>True</returns>
      <param name="ctx">The specification context for the active specification.</param>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.RealTimeReleaseModelsTask.Models">
      <summary>Gets/sets the identifiers of the models to release, where "*" is a special identifier meaning all models.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.RefreshTableTask.TableName">
      <summary>Gets/sets the flow property that is in control of the name(s) of the table(s) to refresh.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.RegenerateAndDeleteComponentTask.Component">
      <summary>Gets/sets the component that'll be marked for generation and have its generated file deleted.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.RegenerateAndDeleteSpecificationComponentsTask.SpecificationId">
      <summary>Gets/sets the specification id of the specification whose components to delete and mark for regeneration.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.RegenerateAndOverwriteComponentTask.Component">
      <summary>Gets/sets the component that'll be marked for generation and have its overwrite flag set.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.RegenerateAndOverwriteSpecificationComponentsTask.SpecificationId">
      <summary>Gets/sets the specification id of the specification whose components to mark for regeneration and have their overwrite flag set.</summary>
    </member>
    <member name="M:DriveWorks.Specification.StandardTasks.ReleaseDocumentsTask.Execute(DriveWorks.Specification.SpecificationContext)">
      <summary>Overridden to implement the logic required to release one or more documents.</summary>
    </member>
    <member name="M:DriveWorks.Specification.StandardTasks.ReleaseDocumentsTask.IsRunningRequired(DriveWorks.Specification.SpecificationContext)">
      <summary>Overridden to indicate that a running specification is required by the task to execute.</summary>
      <returns>True</returns>
      <param name="ctx">The specification context for the active specification.</param>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.ReleaseDocumentsTask.Documents">
      <summary>Gets/sets the identifiers of the documents to release, where "*" is a special identifier meaning all documents.</summary>
    </member>
    <member name="F:DriveWorks.Specification.StandardTasks.ReleaseDocumentsTask.ReleasedDocuments">
      <summary>Gets the output that will be fulfilled with the names of all released documents after this task executes.</summary>
    </member>
    <member name="M:DriveWorks.Specification.StandardTasks.ReleaseEmailsTask.Execute(DriveWorks.Specification.SpecificationContext)">
      <summary>Overridden to implement the logic required to release one or more emails.</summary>
    </member>
    <member name="M:DriveWorks.Specification.StandardTasks.ReleaseEmailsTask.IsRunningRequired(DriveWorks.Specification.SpecificationContext)">
      <summary>Overridden to indicate that a running specification is required by the task to execute.</summary>
      <returns>True</returns>
      <param name="ctx">The specification context for the active specification.</param>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.ReleaseEmailsTask.Emails">
      <summary>Gets/sets the identifiers of the emails to release, where "*" is a special identifier meaning all emails.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.ReleaseEmailsTask.IsInEmailsTask">
      <summary>Determines whether the emails task is currently running.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.ReleaseEmailsTask.ReleasedEmails">
      <summary>The outputs that get fulfilled with a list of the names of the emails that were successfully released when this task was run.</summary>
    </member>
    <member name="M:DriveWorks.Specification.StandardTasks.ReleaseModelsTask.Execute(DriveWorks.Specification.SpecificationContext)">
      <summary>Overridden to implement the logic required to release one or more documents.</summary>
    </member>
    <member name="M:DriveWorks.Specification.StandardTasks.ReleaseModelsTask.IsRunningRequired(DriveWorks.Specification.SpecificationContext)">
      <summary>Overridden to indicate that a running specification is required by the task to execute.</summary>
      <returns>True</returns>
      <param name="ctx">The specification context for the active specification.</param>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.ReleaseModelsTask.DeferredDrawings">
      <summary>Gets/sets the identifiers of the drawings to flag for generation at a later stage, where "*" is a special identifier.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.ReleaseModelsTask.Models">
      <summary>Gets/sets the identifiers of the models to release, where "*" is a special identifier. meaning all models.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.ReleaseModelsTask.Overwrite">
      <summary>Gets/sets whether the components released by this task should overwrite existing files regardless of the group settings.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.RemoveUserFromTeamTask.TeamName">
      <summary>Gets or sets the team name</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.RemoveUserFromTeamTask.UserName">
      <summary>Gets or sets the username of the user</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.Run3DPreviewTask.ControlName">
      <summary>Gets/sets the flow property that is the name of the control to run the 3d preview on.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.RunMacroInHostedSpecificationTask.MacroArgumentProperty">
      <summary>The property for the macro argument to hand to the macro.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.RunMacroInHostedSpecificationTask.MacroNameProperty">
      <summary>The property for the macro name of the marco to run.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.RunMacroInHostedSpecificationTask.SpecificationHostNameProperty">
      <summary>The property for the specifiation host name that hosts the specification to run the macro in.</summary>
    </member>
    <member name="M:DriveWorks.Specification.StandardTasks.RunMacroInHostSpecificationTask.IsRunningRequired(DriveWorks.Specification.SpecificationContext)">
      <summary>Determines whether the task requires the specification context to be open.</summary>
      <returns>True if the specification needs to be running for the task to execute.</returns>
      <param name="ctx">The specification context for the active specification.</param>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.RunMacroInHostSpecificationTask.MacroArgumentProperty">
      <summary>The property that controls the arguemnts to pass to the macro.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.RunMacroInHostSpecificationTask.MacroNameProperty">
      <summary>The property for the name of the macro to execute in the host specification.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.SetOwnerTask.UserName">
      <summary>Gets or sets the name of the user to set as the owner of the specification.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.SetSpecificationHostControlTask.ChildSpecificationListNameProperty">
      <summary>The property for the child specification list name.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.SetSpecificationHostControlTask.ProjectNameProperty">
      <summary>The property for the project name.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.SetSpecificationHostControlTask.SpecificationHostNameProperty">
      <summary>The property for the specification host control name.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.SetSpecificationHostControlTask.SpecificationIdProperty">
      <summary>The property for the specification Id.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.SetSpecificationHostControlTask.SpecificationNameProperty">
      <summary>The property for the specification name.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.SetSpecificationHostControlTask.TransitionNameProperty">
      <summary>The property for the transition name.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.SetUserEnabledTask.IsEnabled">
      <summary>Gets or sets whether or not the user is enabled</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.SetUserEnabledTask.UserName">
      <summary>Gets or sets the username of the user</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.SkipToFormTask.Defer">
      <summary>Gets/sets whether the macro execution should be deferred.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.SkipToFormTask.FormName">
      <summary>Gets/sets the name of the form to be skipped to.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.StartSpecificationTimerTask.Count">
      <summary>Gets/sets the number of times that the macro should be executed.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.StartSpecificationTimerTask.CounterConstant">
      <summary>Gets/sets the name of the constant where the timer's counter should be stored.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.StartSpecificationTimerTask.Interval">
      <summary>Gets/sets the interval of how often the timer should run.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.StartSpecificationTimerTask.MacroArgument">
      <summary>Gets/sets the optional argument to pass to the macro.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.StartSpecificationTimerTask.MacroName">
      <summary>Gets/sets the name of the macro to run.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.StartSpecificationTimerTask.StayOnSchedule">
      <summary>Gets/sets whether the timer should stay on schedule or not.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.StartSpecificationTimerTask.TimerName">
      <summary>Gets/sets the name of the Timer to run.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.StoreSpecificationTask.StateName">
      <summary>The name of the state to move the specification into for storage.</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.UpdateGroupTableUsingArrayTask.ArrayValue">
      <summary>Gets or sets the table array value for editing the table</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.UpdateGroupTableUsingArrayTask.ControlColumnNames">
      <summary>Gets or sets the control column names</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.UpdateGroupTableUsingArrayTask.TableName">
      <summary>Gets or sets the table name of the table to edit</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.UpdateTeamLeaderStatusTask.IsTeamLeader">
      <summary>Gets or sets the users team leader status</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.UpdateTeamLeaderStatusTask.UserName">
      <summary>Gets or sets the username of the user</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.UpdateUserDisplayNameTask.DisplayName">
      <summary>Gets or sets the display name of the user</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.UpdateUserDisplayNameTask.UserName">
      <summary>Gets or sets the username of the user</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.UpdateUserEmailAddressTask.EmailAddress">
      <summary>Gets or sets the email address of a user</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.UpdateUserEmailAddressTask.UserName">
      <summary>Gets or sets the username of the user</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.UpdateUserPasswordTask.Password">
      <summary>Sets the password for the user</summary>
    </member>
    <member name="P:DriveWorks.Specification.StandardTasks.UpdateUserPasswordTask.UserName">
      <summary>Gets or sets the username for the user</summary>
    </member>
    <member name="T:DriveWorks.Transactions.ITransaction">
      <summary>Provides a contract for objects which provide undo/redo capabilities to an operation.</summary>
    </member>
    <member name="M:DriveWorks.Transactions.ITransaction.Execute">
      <summary>Commits the transaction.</summary>
      <returns>A transaction which can undo the result of the executed transaction.</returns>
    </member>
    <member name="T:DriveWorks.Transactions.ConditionRef">
      <summary>Represents a reference to a condition on a task.</summary>
    </member>
    <member name="T:DriveWorks.Transactions.ConditionSequenceRef">
      <summary>Represents a reference to a condition sequence.</summary>
    </member>
    <member name="T:DriveWorks.Transactions.ExecutableNodeRef">
      <summary>Represents a reference to an executable node.</summary>
    </member>
    <member name="T:DriveWorks.Transactions.FlowPropertyData">
      <summary>Represents data about a flow property to be changed.</summary>
    </member>
    <member name="T:DriveWorks.Transactions.InputEndpointRef">
      <summary>Represents a reference to a .</summary>
    </member>
    <member name="T:DriveWorks.Transactions.NodeCollectionRef">
      <summary>Represents a reference to a .</summary>
    </member>
    <member name="T:DriveWorks.Transactions.NodeRef">
      <summary>Represents a reference to a .</summary>
    </member>
    <member name="T:DriveWorks.Transactions.OutputEndpointRef">
      <summary>Represents a reference to a .</summary>
    </member>
    <member name="T:DriveWorks.Transactions.ProjectTransactionFactory">
      <summary>Provides support for performing operations against a project in a transacted way.</summary>
    </member>
    <member name="T:DriveWorks.Transactions.TaskRef">
      <summary>Represents a reference to a task in a task sequence.</summary>
    </member>
    <member name="T:DriveWorks.Transactions.TaskSequenceRef">
      <summary>Represents a reference to a task sequence.</summary>
    </member>
    <member name="T:DriveWorks.Transactions.TxAggregateTransaction">
      <summary>Provides support for aggregating multiple transactions into a single transaction which will succeed or fail atomically.</summary>
    </member>
    <member name="T:DriveWorks.Transactions.TxBase">
      <summary>Provides a helper base class for transactions to automatically implement double-commit prevention.</summary>
    </member>
    <member name="M:DriveWorks.Transactions.ConditionRef.GetCondition(DriveWorks.Project)">
      <summary>Gets the condition from the specified project.</summary>
    </member>
    <member name="P:DriveWorks.Transactions.ConditionRef.ConditionIndex">
      <summary>Gets the condition index.</summary>
    </member>
    <member name="P:DriveWorks.Transactions.ConditionRef.ConditionSequenceRef">
      <summary>Gets the condition sequence reference.</summary>
    </member>
    <member name="M:DriveWorks.Transactions.ConditionSequenceRef.FromMacro(DriveWorks.Specification.SpecificationMacro)">
      <summary>Constructs a condition sequence reference for the given specification macro.</summary>
      <param name="macro">The macro for which to construct the reference.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ConditionSequenceRef.FromOperation(DriveWorks.Specification.Operation)">
      <summary>Constructs a condition sequence reference for the given operation.</summary>
      <param name="operation">The operation for which to construct the reference.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ConditionSequenceRef.FromTask(DriveWorks.Transactions.TaskRef)">
      <summary>Constructs a task sequence reference for the given event on the given state.</summary>
      <param name="taskRef">The reference to the task.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ConditionSequenceRef.FromTransition(DriveWorks.Specification.Transition)">
      <summary>Constructs a condition sequence reference for the given transition.</summary>
      <param name="transition">The transition for which to construct the reference.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ConditionSequenceRef.GetConditionRef(System.Int32)">
      <summary>Gets a reference to the specified condition.</summary>
      <param name="conditionIndex">The index of the condition in the sequence.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ConditionSequenceRef.GetConditionSequence(DriveWorks.Project)">
      <summary>Gets the condition sequence from the specified project.</summary>
    </member>
    <member name="M:DriveWorks.Transactions.ExecutableNodeRef.GetInputEndpointRef(System.String,System.Boolean)">
      <summary>Get a reference to one of the node's input endpoints.</summary>
      <returns>A reference to an input on this node with the desired name.</returns>
      <param name="name">The name of the input endpoint.</param>
      <param name="isNavigation">True if the input endpoint is a navigation endpoint.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ExecutableNodeRef.GetOutputEndpointRef(System.String,System.Boolean,System.Boolean)">
      <summary>Get a reference to one of the node's output endpoints.</summary>
      <param name="name">The name of the endpoint.</param>
      <param name="isNavigation">True if the desired endpoint is a navigation endpoint.</param>
      <param name="isStatus">True if the desired endpoint is a status endpoint.</param>
    </member>
    <member name="M:DriveWorks.Transactions.FlowPropertyData.#ctor(System.String,System.Boolean,System.Object,System.String)">
      <summary>Initializes a new instance of the  class.</summary>
      <param name="name">The name of the property.</param>
      <param name="isBound">True if the property is bound to a rule, otherwise false.</param>
      <param name="value">The value or rule.</param>
      <param name="comment">The comment if the property is bound to a rule.</param>
    </member>
    <member name="M:DriveWorks.Transactions.FlowPropertyData.#ctor(System.String,System.Boolean,System.Object,System.String,System.Boolean)">
      <summary>Initializes a new instance of the  class.</summary>
      <param name="name">The name of the property.</param>
      <param name="isBound">True if the property is bound to a rule, otherwise false.</param>
      <param name="value">The value or rule.</param>
      <param name="comment">The comment if the property is bound to a rule.</param>
      <param name="isConnected">True if the property has a connection to another node and it's value shouldn't be modified.</param>
    </member>
    <member name="M:DriveWorks.Transactions.FlowPropertyData.FromCondition(DriveWorks.Specification.Condition)">
      <summary>Gets an array of  instances for the given condition's properties.</summary>
      <param name="condition">The condition containing the properties to copy.</param>
    </member>
    <member name="M:DriveWorks.Transactions.FlowPropertyData.FromProperty(DriveWorks.Specification.FlowProperty)">
      <summary>Gets a  instance from the given flow property.</summary>
      <param name="prop">The flow property containing the data to duplicate.</param>
    </member>
    <member name="M:DriveWorks.Transactions.FlowPropertyData.FromTask(DriveWorks.Specification.Task)">
      <summary>Gets an array of  instances for the given task's properties.</summary>
      <param name="task">The task containing the properties to copy.</param>
    </member>
    <member name="M:DriveWorks.Transactions.FlowPropertyData.Apply(DriveWorks.Specification.FlowProperty)">
      <summary>Applies the property data to the given property.</summary>
      <param name="prop">The property to which to apply.</param>
    </member>
    <member name="M:DriveWorks.Transactions.FlowPropertyData.Apply(DriveWorks.Specification.FlowProperty,System.Boolean)">
      <summary>Applies the property data to the given property.</summary>
      <param name="prop">The property to which to apply.</param>
      <param name="allowEmptyRule">True to allow the rule to be toggled to dynamic even if the rule is empty.</param>
    </member>
    <member name="P:DriveWorks.Transactions.FlowPropertyData.Comment">
      <summary>Gets the comment for the rule attached to the property if it is bound.</summary>
    </member>
    <member name="P:DriveWorks.Transactions.FlowPropertyData.IsBound">
      <summary>Gets whether the property is bound to a rule.</summary>
    </member>
    <member name="P:DriveWorks.Transactions.FlowPropertyData.IsConnected">
      <summary>Gets whether a connection has been made to this property and no value should be modified.</summary>
    </member>
    <member name="P:DriveWorks.Transactions.FlowPropertyData.Name">
      <summary>Gets the name of the property.</summary>
    </member>
    <member name="P:DriveWorks.Transactions.FlowPropertyData.Value">
      <summary>Gets the value of the property, or the rule if it is bound.</summary>
    </member>
    <member name="M:DriveWorks.Transactions.InputEndpointRef.GetEndpoint(DriveWorks.Project)">
      <summary>Gets the endpoint this refers to.</summary>
      <returns>The endpoint this reference refers to.</returns>
      <param name="project">The project to retrieve the endpoint from.</param>
    </member>
    <member name="M:DriveWorks.Transactions.NodeCollectionRef.FromMacro(DriveWorks.Specification.SpecificationMacro)">
      <summary>Gets a node collection ref from a macro.</summary>
      <returns>A reference to the node collection represented by the given macro.</returns>
      <param name="specificationMacro">The macro for which to get a reference.</param>
    </member>
    <member name="M:DriveWorks.Transactions.NodeCollectionRef.GetCollection(DriveWorks.Project)">
      <summary>Gets the collection from the specified project.</summary>
      <returns>The collection this reference refers to.</returns>
      <param name="project">The project to retrieve the collection from.</param>
    </member>
    <member name="M:DriveWorks.Transactions.NodeCollectionRef.GetNodeRef(System.Int32)">
      <summary>Gets a reference to the node at the given index.</summary>
      <returns>A reference to the node.</returns>
      <param name="index">The index of the node to reference.</param>
    </member>
    <member name="M:DriveWorks.Transactions.NodeRef.GetNode(DriveWorks.Project)">
      <summary>Gets the node from the specified project.</summary>
      <returns>The node in the project.</returns>
      <param name="project">The project from which to retrieve the node.</param>
    </member>
    <member name="M:DriveWorks.Transactions.NodeRef.GetOutputEndpointRef(System.String,System.Boolean)">
      <summary>Get a reference to one of the node's output endpoints.</summary>
      <param name="name">The name of the output endpoint.</param>
      <param name="isNavigation">True if the output endpoint is a navigation endpoint.</param>
    </member>
    <member name="M:DriveWorks.Transactions.NodeRef.GetOutputEndpointRef(System.String,System.Boolean,System.Boolean)">
      <summary>Get a reference to one of the node's output endpoints.</summary>
      <param name="name">The name of the output endpoint.</param>
      <param name="isNavigation">True if the output endpoint is a navigation endpoint.</param>
      <param name="isStatus">True if the endpoint is a status endpoint.</param>
    </member>
    <member name="P:DriveWorks.Transactions.NodeRef.CollectionRef">
      <summary>The collection this node belongs to.</summary>
    </member>
    <member name="P:DriveWorks.Transactions.NodeRef.NodeIndex">
      <summary>The ordered index of the node this reference represents.</summary>
    </member>
    <member name="M:DriveWorks.Transactions.OutputEndpointRef.GetEndpoint(DriveWorks.Project)">
      <summary>Retrieves the endpoint this reference refers to.</summary>
      <returns>The endpoint this reference refers to.</returns>
      <param name="project">The project to retrieve the endpoint from.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxAddProjectComponentSet(System.String,System.Guid)">
      <summary>Creates a transaction that will add a component to the current project.</summary>
      <returns>A transaction that will perform the operation.</returns>
      <param name="name">The name to give the component. This may be null to have one generated from captured component's name.</param>
      <param name="capturedComponentId">The unique identifier of the captured component that you wish to add to the current project.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeCalculationTableColumnCommonRule(System.String,System.String,System.String,System.String)">
      <summary>Creates a transaction that will change a calculation table column's common rule.</summary>
      <returns>A transaction that will perform the operation.</returns>
      <param name="tableName">The name of the table to use.</param>
      <param name="columnName">The name of the column to use.</param>
      <param name="rule">The rule to apply to the column.</param>
      <param name="comment">The comment to apply to the common rule.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeCalculationTableColumnType(System.String,System.String,DriveWorks.ProjectCalculationTableColumnType)">
      <summary>Creates a transaction that will change a calculation table column's type.</summary>
      <returns>A transaction that will perform the operation.</returns>
      <param name="tableName">The name of the table to use.</param>
      <param name="columnName">The name of the column to use.</param>
      <param name="newType">The new type to set on the column.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeCalculationTableRowCount(System.String,System.Int32)">
      <summary>Creates a transaction that will change a calculation table's row count (number of data rows).</summary>
      <returns>A transaction that will perform the operation.</returns>
      <param name="tableName">The name of the table to use.</param>
      <param name="rowCount">The new number of data rows to have the on table.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeChildSpecificationInputDefinitionRule(DriveWorks.Forms.ChildSpecificationList,DriveWorks.ProjectChildSpecificationProjectDef,DriveWorks.ProjectChildSpecificationInputDef,System.String)">
      <summary>Creates a transaction which, when committed, will change the item rule of the specified ProjectChildSpecificationInputDef</summary>
      <returns>A transaction which, when executed, will perform the operation.</returns>
      <param name="childSpecificationList">The ChildSpecificationList the input definition resides in.</param>
      <param name="projectDef">The ChildSpecificationProjectDef containing the ChildSpecificationInputDef.</param>
      <param name="inputDef">The ChildSpecificationInputDef who's rule to change.</param>
      <param name="newFormula">The new formula to apply.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeComponentDisableLoop(DriveWorks.Components.ProjectComponent)">
      <summary>Creates a new transaction that when executed will disable the release loop for the given component.</summary>
      <returns>A new transaction that when executed will disable the release loop for the given component.</returns>
      <param name="component">The component to change.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeComponentEnableLoop(DriveWorks.Components.ProjectComponent)">
      <summary>Creates a new transaction that when executed will enable the release loop for the given component.</summary>
      <returns>A new transaction that when executed will enable the release loop for the given component.</returns>
      <param name="component">The component to change.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeComponentIncludeFileFormatsInLoop(DriveWorks.Components.ProjectComponent,System.Boolean)">
      <summary>Creates a new transaction that when executed will enable generation of additional file formats within the release loop.</summary>
      <returns>A new transaction that when executed will ensure file formats are generated inside of the release loop.</returns>
      <param name="component">The component whose additional file formats will be released in the loop.</param>
      <param name="include">True to include file formats in the release loop.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeComponentLoopCount(DriveWorks.Components.ProjectComponent,System.String,System.String)">
      <summary>Creates a transaction that when executed will modify the loop count rule's formula of the given component.</summary>
      <returns>A new transaction that when executed will restore the formula and comment to the previous values.</returns>
      <param name="component">The component whose loop count to modify.</param>
      <param name="newFormula">The new formula to apply.</param>
      <param name="newComment">The new comment to apply.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeComponentTaskCondition(DriveWorks.Components.ProjectComponent,System.String,System.String,System.String,DriveWorks.RuleChangeData[])">
      <summary>Creates a new transaction that when executed will change the given component task condition.</summary>
      <exception caption="" cref="T:System.ArgumentNullException">%component%, %taskTitle%, %conditionTitle%, or %newTitle% is null.</exception>
      <returns>A transaction that when executed will update the title of the given condition.</returns>
      <param name="component">The component to which the task owning the condition belongs to.</param>
      <param name="taskTitle">The name of the task the condition is associated with.</param>
      <param name="conditionTitle">The name of the condition to update.</param>
      <param name="newTitle">The new title to give the condition (or the old title if no change is desired).</param>
      <param name="ruleChanges">The changes to the condition's rules to apply.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeComponentTaskIndex(DriveWorks.Components.Tasks.ComponentTask,System.Int32,DriveWorks.Components.ProjectComponent)">
      <summary>Creates a new transaction that when executed will change the index of the given task.</summary>
      <returns>A transaction that when executed will change the index of the given task.</returns>
      <param name="task">The task to rename.</param>
      <param name="index">The new index of the task.</param>
      <param name="component">The component the task is associated with.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeComponentTaskLocation(DriveWorks.Components.Tasks.ComponentTask,DriveWorks.Components.Tasks.ComponentTaskSequenceLocation,DriveWorks.Components.ProjectComponent)">
      <summary>Creates a new transaction that when executed will change the location of the given task.</summary>
      <returns>A transaction that when executed will change the location of the given task.</returns>
      <param name="task">The task to rename.</param>
      <param name="location">The new location of the task.</param>
      <param name="component">The component the task is associated with.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeComponentTaskPropertyExtendedValue(DriveWorks.Components.ProjectComponent,DriveWorks.Components.Tasks.ComponentTask,System.String,System.Boolean)">
      <summary>Creates a new transaction that when executed will change the extended value of the given task property.</summary>
      <returns>A new transaction that when executed will change the extended property of a component task property.</returns>
      <param name="component">The component the task belongs to.</param>
      <param name="task">The task the property belongs to.</param>
      <param name="propertyName">The name of the property to change the extended value of.</param>
      <param name="isExtended">True to make the property extended.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeComponentTaskReleaseConditionTitle(DriveWorks.Components.ProjectComponent,System.String,System.String,System.String,DriveWorks.Transactions.FlowPropertyData[])">
      <summary>Creates a new transaction that when executed will change the title of the given component task release condition.</summary>
      <exception caption="" cref="T:System.ArgumentNullException">%component%, %conditionName%, %conditionName%, or %newName% is null.</exception>
      <returns>A transaction that when executed will update the title of the given condition.</returns>
      <param name="component">The component to which the task owning the condition belongs to.</param>
      <param name="taskName">The name of the task that owns the condition.</param>
      <param name="conditionName">The title of the condition to update.</param>
      <param name="newName">The new title to give the condition (or the old title if no change is desired).</param>
      <param name="ruleChanges">The changes to the condition's rules to apply.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeComponentTaskRule(DriveWorks.Components.Tasks.ComponentTask,DriveWorks.Components.Tasks.ComponentTaskRule,System.String,System.String)">
      <summary>Creates a new transaction that when executed will change the formula and comment of the given  rule.</summary>
      <returns>A transaction that when executed will change the formula and comment of the given rule.</returns>
      <param name="task">The task whose rule will be changed.</param>
      <param name="rule">The rule to change.</param>
      <param name="formula">The new formula to give the rule.</param>
      <param name="comment">The new comment to give the rule.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeConstantCategory(DriveWorks.ProjectConstant,System.String)">
      <summary>Creates a transaction which, when committed, will change the category of the specified constant.</summary>
      <returns>A transaction which, when executed, will perform the operation.</returns>
      <param name="constant">The constant to modify.</param>
      <param name="newCategoryName">The new category name to assign to the constant.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeConstantValue(DriveWorks.ProjectConstant,System.Object)">
      <summary>Creates a transaction which, when committed, will change the value of the specified constant.</summary>
      <returns>A transaction which, when executed, will perform the operation.</returns>
      <param name="constant">The constant to modify.</param>
      <param name="newValue">The new value to assign to the constant.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeControlIndex(DriveWorks.Forms.ControlBase,System.Int32)">
      <summary>Creates a transaction to change the index of the given form control.</summary>
      <returns>A transaction.</returns>
      <param name="control">The form control to move.</param>
      <param name="newIndex">The new index for the form control.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeControlParent(DriveWorks.Forms.ControlBase,DriveWorks.Forms.ContainerControlBase)">
      <summary>Creates a new transaction that when executed will change the parent of the specified control.</summary>
      <returns>A transaction that will perform the specified action.</returns>
      <param name="controlToMove">The control to change the parent of.</param>
      <param name="newParent">The new parent for the specified control.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeDataTableName(DriveWorks.ProjectDataTable,System.String)">
      <summary>Creates a transaction which, when committed, will rename a transaction with the given name.</summary>
      <returns>A transaction which, when executed, will perform the operation.</returns>
      <param name="dataTable">The data table that will have its name changed.</param>
      <param name="newName">The new name to give the data table.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeDocumentName(DriveWorks.ProjectDocument,System.String)">
      <summary>Creates a transaction which, when committed, will change the name of the specified document.</summary>
      <param name="document">The document to change the name of.</param>
      <param name="newName">The new name to give the document.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeDocumentRuleFormula(DriveWorks.ProjectDocument,DriveWorks.ProjectDocumentRule,System.String)">
      <summary>Creates a transaction which, when committed, will change the rule of the specified ProjectDocumentRule</summary>
      <returns>A transaction which, when executed, will perform the operation.</returns>
      <param name="document">The document in which the rule exists.</param>
      <param name="rule">The name of the rule whose formula to change.</param>
      <param name="newFormula">The new formula to apply.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeForm(DriveWorks.Navigation.NavigationStep,DriveWorks.Navigation.NavigationStep,System.Int32,System.Int32)">
      <summary>Creates a transaction which, when committed, will update a form with the given name to the given properties, only project and name are needed</summary>
      <param name="form">The form to update.</param>
      <param name="nextStep">The next step, from this form.</param>
      <param name="left">The horrizontal position of the form.</param>
      <param name="top">The vertical position of the form.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeFormControlPropertyExtendedValue(DriveWorks.Forms.ControlBase,DriveWorks.Forms.DataModel.DynamicProperty,System.Boolean)">
      <summary>Creates a transaction to either extend or unextend a .</summary>
      <returns>A transaction.</returns>
      <param name="control">Control the property belongs to.</param>
      <param name="dynamicProperty">Property to change.</param>
      <param name="isExtended">Determines whether the property will be extended or unextended.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeFormMessageComment(DriveWorks.ProjectMessage,System.String)">
      <summary>Creates a transaction which, when committed, will change a form message's comment property.</summary>
      <param name="formMessage">The form message to change.</param>
      <param name="newComment">The new comment to assign to the form message.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeFormMessageRule(DriveWorks.ProjectMessage,System.String)">
      <summary>Creates a transaction which, when committed, will change a form message's rule property.</summary>
      <param name="formMessage">The form message to change.</param>
      <param name="newRule">The new rule to assign to the form message.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeFormMessageRuleAndComment(DriveWorks.ProjectMessage,System.String,System.String)">
      <summary>Creates a transaction which, when committed, will change a form message's rule and comment properties.</summary>
      <param name="formMessage">The form message to change.</param>
      <param name="newComment">The new comment to assign to the form message.</param>
      <param name="newRule">The new rule to assign to the form message.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeFormPropertyValue(DriveWorks.Forms.Form,DriveWorks.Forms.DataModel.DynamicProperty,System.Object)">
      <summary>Changes the given property on the specified form to the provided value.</summary>
      <returns>A transaction</returns>
      <param name="form">The form that we want to change properties on.</param>
      <param name="prop">The property to change on the form.</param>
      <param name="newValue">The new value to apply to the property.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeInitialState(DriveWorks.Specification.State)">
      <summary>Creates a transaction which, when committed, will Change the intitial state of the specification flow.</summary>
      <param name="state">The new state to set as the intitial state.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeItemListRule(DriveWorks.Forms.ItemList,DriveWorks.ProjectItemListTypeDef,System.String)">
      <summary>Creates a transaction which, when committed, will change the item rule of the specified ProjectItemListTypeDef</summary>
      <returns>A transaction which, when executed, will perform the operation.</returns>
      <param name="itemList">The ItemList the Type definition resides in.</param>
      <param name="typeDefinition">The name of the type definition whose rule to change.</param>
      <param name="newFormula">The new formula to apply.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeOperation(DriveWorks.Specification.Operation,System.String,DriveWorks.Specification.Condition[],DriveWorks.Specification.Task[])">
      <summary>Creates a transaction which, when committed, will update an operation with given parameters.</summary>
      <param name="operation">The operation to update.</param>
      <param name="newTitle">The new title of the operation.</param>
      <param name="newConditons">The new conditions for the operation.</param>
      <param name="newTaskSequence">The new tasks for the operation.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeOperationName(DriveWorks.Specification.Operation,System.String)">
      <summary>Creates a transaction which, when committed, will rename an operation with the given name.</summary>
      <param name="operation">The operation to rename.</param>
      <param name="newName">The new name to give the operation.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeOperationTeams(DriveWorks.Specification.Operation,System.String[],System.Boolean,System.Boolean,System.Boolean)">
      <summary>Creates a transaction which, when committed, will update an operation's teams list and properties</summary>
      <param name="operation">The operation to update.</param>
      <param name="newTeams">The list of teams to assign.</param>
      <param name="isCreatorPermitted">If the creator of the specification is permitted.</param>
      <param name="isOwnerPermitted">If the owner of the specification is permitted.</param>
      <param name="isUniversal">If all teams are allowed by the instance.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeProjectComponentRule(DriveWorks.Components.ProjectComponentRule,System.String,System.String)">
      <summary>Creates a transaction that will change the rule of the specified component rule.</summary>
      <returns>A transaction that will perform the operation.</returns>
      <param name="rule">The rule to update.</param>
      <param name="formula">The new formula to set on the rule.</param>
      <param name="comment">The new comment to set on the rule.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeScopedComponentTaskCondition(System.String,System.String,System.String,System.String,DriveWorks.RuleChangeData[])">
      <summary>Creates a new transaction that when executed will change the title of the given condition.</summary>
      <exception caption="" cref="T:System.ArgumentNullException">Any of the arguments are null.%newName% is an empty string.</exception>
      <returns>A transaction that when executed will change the given condition.</returns>
      <param name="scope">The scope to which the task that owns the condition belongs to.</param>
      <param name="taskName">The name of the task that owns the condition to change.</param>
      <param name="conditionName">The name of the condition to change.</param>
      <param name="newName">The new name of the condition (or the old name if no change is desired).</param>
      <param name="ruleChanges">The changes to the condition's rules to apply.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeScopedComponentTaskIndex(DriveWorks.Components.Tasks.ComponentTask,System.Int32)">
      <summary>Creates a new transaction that when executed will change the index of the given task.</summary>
      <returns>A transaction that when executed will change the index of the given task.</returns>
      <param name="task">The task to rename.</param>
      <param name="index">The new index of the task.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeScopedComponentTaskLocation(DriveWorks.Components.Tasks.ComponentTask,DriveWorks.Components.Tasks.ComponentTaskSequenceLocation)">
      <summary>Creates a new transaction that when executed will change the location of the given task.</summary>
      <returns>A transaction that when executed will change the location of the given task.</returns>
      <param name="task">The task to rename.</param>
      <param name="location">The new location of the task.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeScopedComponentTaskProperty(System.String,System.String,System.String,System.Boolean,System.String,System.Object,System.String)">
      <summary>Creates a new transaction that when executed will change a property on the given .</summary>
      <returns>A transaction that when executed will change the property of the .</returns>
      <param name="scope">The scope that owns the task to change.</param>
      <param name="taskName">The name of the task that owns the property to change.</param>
      <param name="propertyName">The name of the property to change.</param>
      <param name="isBound">True to make the property rule bound, False to make the property static.</param>
      <param name="formula">The formula to apply to the property (if the property is bound).</param>
      <param name="value">The value to apply to the property (if the property is not bound).</param>
      <param name="comment">The comment to apply to the task property.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeScopedComponentTaskPropertyExtendedValue(DriveWorks.Components.Tasks.ComponentTask,System.String,System.Boolean)">
      <summary>Creates a new transaction that when executed will change the extended value of the given task property.</summary>
      <returns>A new transaction that when executed will change the extended property of a component task property.</returns>
      <param name="task">The task the property belongs to.</param>
      <param name="propertyName">The name of the property to change the extended value of.</param>
      <param name="isExtended">True to make the property extended.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeScopedComponentTaskReleaseCondition(System.String,System.String,System.String,System.String,DriveWorks.Transactions.FlowPropertyData[])">
      <summary>Creates a new transaction that when executed will change the title of the given release condition.</summary>
      <returns>A transaction that when executed will change the title of the given task.</returns>
      <param name="scope">The scope of the task that owns the condition to change.</param>
      <param name="taskName">The name of the task that owns the condition.</param>
      <param name="conditionName">The name of the condition to change.</param>
      <param name="title">The new title of the condition (or the old title if no change is desired).</param>
      <param name="ruleChanges">The changes to the condition's rules to apply.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeSpecificationAdditionalFolders(System.String,System.String)">
      <summary>Creates a transaction which, when committed, will update the specification addtion folder's special variable with the given values.</summary>
      <param name="newRule">The new rule to set.</param>
      <param name="newComment">The new comment.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeSpecificationFlow(System.Xml.Linq.XElement)">
      <summary>Creates a transaction which, when commited, will change the specification flow to the given data. This will wipe the current flow.</summary>
      <param name="newSpecificationFlow">Specification flow as XML.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeSpecificationFlowCustomization(System.Boolean)">
      <summary>Creates a transaction which, when commited, will Change the specification flow's customization to either customized or defualt.</summary>
      <param name="customize">False to restore the default specification flow, true to allow changes.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeSpecificationMacroCategoryName(DriveWorks.SpecificationMacroCategory,System.String)">
      <summary>Creates a transaction which when committed will change the specified macro category's name.</summary>
      <returns>A transaction which, when executed, will perform the operation.</returns>
      <param name="macroCategory">The macro category to change.</param>
      <param name="newName">The new name.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeSpecificationMacroName(DriveWorks.Specification.SpecificationMacro,System.String)">
      <summary>Creates a transaction which, when committed, will rename a specification macro with the given name.</summary>
      <param name="macro">The specification macro to rename.</param>
      <param name="newName">The new name to give the specification macro.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeSpecificationName(System.String,System.String)">
      <summary>Creates a transaction which, when committed, will update the specification name's special variable with the given values.</summary>
      <param name="newRule">The new rule to set.</param>
      <param name="newComment">The new comment.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeSpecificationPath(System.String,System.String)">
      <summary>Creates a transaction which, when committed, will update the specification path's special variable with the given values.</summary>
      <param name="newRule">The new rule to set.</param>
      <param name="newComment">The new comment.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeSpecificationProperty(DriveWorks.ProjectSpecificationProperty,System.String,System.String,System.String,System.Int32)">
      <summary>Creates a transaction which, when commited, will Change the values of the given specification property.</summary>
      <param name="specificationProperty">The specifiation property to change.</param>
      <param name="newName">New name to apply to the property.</param>
      <param name="rule">New rule to apply to the property.</param>
      <param name="comment">Comment to apply to the property.</param>
      <param name="index">New index to move the property to.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeSpecificationTags(System.String,System.String)">
      <summary>Creates a transaction, which when committed, will update the specification tags special variable with the given values.</summary>
      <param name="newRule">The new rule to set.</param>
      <param name="newComment">The new comment.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeStateProperties(DriveWorks.Specification.State,System.String,DriveWorks.Specification.StateType,DriveWorks.Specification.Task[],DriveWorks.Specification.Task[])">
      <summary>Creates a transaction which, when committed, will update a states properties, old title is the current title of the state - before update.</summary>
      <param name="state">The state to update.</param>
      <param name="newTitle">The new title of the state.</param>
      <param name="newSpecFlowStateType">The new type for the state.</param>
      <param name="newOnStateEnterEvent">The new enter event for the state.</param>
      <param name="newOnStateLeaveEvent">The new leave event for the state.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeStateTeams(DriveWorks.Specification.State,System.String[],System.Boolean,System.Boolean,System.Boolean)">
      <summary>Creates a transaction which, when committed, will update a state's teams list and properties</summary>
      <param name="state">The state to update.</param>
      <param name="newTeams">The list of teams to assign.</param>
      <param name="isCreatorPermitted">If the creator of the specification is permitted.</param>
      <param name="isOwnerPermitted">If the owner of the specification is permitted.</param>
      <param name="isUniversal">If all teams are allowed by the instance.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeTaskSequenceOrder(DriveWorks.Transactions.TaskSequenceRef,System.Int32,System.Int32)">
      <summary>Creates a transaction which, when committed, will update the task sqeuence for the parent object by moving the object at the old index to the new index</summary>
      <param name="taskSequenceRef">The reference to the task sequence to modify.</param>
      <param name="oldIndex">The index of the object to move.</param>
      <param name="newIndex">The index of the where to move the object.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeTransitionName(DriveWorks.Specification.Transition,System.String)">
      <summary>Creates a transaction which, when committed, will rename an transition with the given name.</summary>
      <param name="transition">The transition to rename.</param>
      <param name="newName">The new name to give the transition.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeTransitionProperties(DriveWorks.Specification.Transition,System.String,System.String,DriveWorks.Specification.Condition[],DriveWorks.Specification.Task[])">
      <summary>Creates a transaction which, when committed, will update a transition with the given properties.</summary>
      <param name="transition">The the transition to update.</param>
      <param name="targetStateTitle">The title of the target state.</param>
      <param name="newTitle">The new title for the transition.</param>
      <param name="newConditons">The new conditions for the transition.</param>
      <param name="newInvokeTaskSequence">The new invoke task sequence for the transition</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeTransitionTeams(DriveWorks.Specification.Transition,System.String[],System.Boolean,System.Boolean,System.Boolean)">
      <summary>Creates a transaction which, when committed, will update a transition's teams list and properties</summary>
      <param name="transition">The transition to update.</param>
      <param name="newTeams">The list of teams to assign.</param>
      <param name="isCreatorPermitted">If the creator of the specification is permitted.</param>
      <param name="isOwnerPermitted">If the owner of the specification is permitted.</param>
      <param name="isUniversal">If all teams are allowed by the instance.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeVariableCategoryImagePath(DriveWorks.ProjectVariableCategory,System.String)">
      <summary>Creates a transaction which, when committed, will change the specified variable category's image path.</summary>
      <returns>A transaction which, when executed, will perform the operation.</returns>
      <param name="variableCategory">The variable category to change.</param>
      <param name="newImagePath">The new image path.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeVariableCategoryName(DriveWorks.ProjectVariableCategory,System.String)">
      <summary>Creates a transaction which, when committed, will change the specified variable category's name.</summary>
      <returns>A transaction which, when executed, will perform the operation.</returns>
      <param name="variableCategory">The variable category to change.</param>
      <param name="newName">The new name.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeVariableComment(DriveWorks.ProjectVariable,System.String)">
      <summary>Creates a transaction which, when committed, will change the specified variable's comment.</summary>
      <returns>A transaction which, when executed, will perform the operation.</returns>
      <param name="variable">The variable to change.</param>
      <param name="newComment">The new comment.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeVariableRule(DriveWorks.ProjectVariable,System.String)">
      <summary>Creates a transaction which, when committed, will change the specified variable's rule.</summary>
      <returns>A transaction which, when executed, will perform the operation.</returns>
      <param name="variable">The variable to change.</param>
      <param name="newRule">The new rule.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeVariableRuleAndComment(DriveWorks.ProjectVariable,System.String,System.String)">
      <summary>Creates a transaction which, when committed, will</summary>
      <returns>A transaction which, when executed, will perform the operation.</returns>
      <param name="variable">The variable to change.</param>
      <param name="newRule">The new rule.</param>
      <param name="newComment">The new comment.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxClearCalculationTableColumnRule(System.String,System.String,System.Int32)">
      <summary>Creates a transaction that will clear a calculation table column's cell rule (allowing it to use the column common rule).</summary>
      <returns>A transaction that will perform the operation.</returns>
      <param name="tableName">The name of the table to use.</param>
      <param name="columnName">The name of the column to use.</param>
      <param name="rowIndex">The row index of the cell to clear.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxConvertFormControl(DriveWorks.Forms.Form,DriveWorks.Forms.ControlBase,System.Type)">
      <summary>Creates a transaction that will convert the given control into the target control type specified.</summary>
      <returns>A transaction</returns>
      <param name="form">The form that parents the source control.</param>
      <param name="sourceControl">The control to convert.</param>
      <param name="targetType">The type of control to convert the source control to.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateCalculationTable(System.String)">
      <summary>Creates a transaction that will create a calculation table.</summary>
      <returns>A transaction that will perform the operation.</returns>
      <param name="tableName">The name of the table to use.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateCalculationTableColumn(System.String,System.String,DriveWorks.ProjectCalculationTableColumnType)">
      <summary>Creates a transaction that will create a calculation table column.</summary>
      <returns>A transaction that will perform the operation.</returns>
      <param name="tableName">The name of the table to use.</param>
      <param name="columnName">The name of the column to use.</param>
      <param name="columnType">The column type to create.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateComponentTaskCondition(DriveWorks.Components.ProjectComponent,System.String,System.Type,System.String)">
      <summary>Creates a new transaction that when executes will create a new component task condition.</summary>
      <exception caption="" cref="T:System.ArgumentNullException">%component%, %taskName%, or %type% is null.</exception>
      <returns>A transaction that when executed will create the condition.</returns>
      <param name="component">The component of the task on which to create the condition.</param>
      <param name="taskName">The name of the task to create the condition for.</param>
      <param name="type">The type of the condition to create.</param>
      <param name="title">The title to give the newly created condition.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateComponentTaskReleaseCondition(DriveWorks.Components.ProjectComponent,System.String,System.Type,System.String)">
      <summary>Creates a new transaction that when executes will create a new component task release ondition.</summary>
      <exception caption="" cref="T:System.ArgumentNullException">Any of the arguments are null.</exception>
      <returns>A transaction that when executed will create the condition.</returns>
      <param name="component">The component of the task on which to create the condition.</param>
      <param name="taskName">The name of the task to create the condition for.</param>
      <param name="type">The type of the condition to create.</param>
      <param name="name">The name to give the newly created condition.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateConditionFromExisting(DriveWorks.Transactions.ConditionSequenceRef,System.Type,System.Xml.Linq.XElement,System.Int32)">
      <summary>Creates a transaction which, when committed, will create a new condition from existing condition data.</summary>
      <param name="conditionSequnceRef">The reference to the condition sequence to modify.</param>
      <param name="conditionType">The type of condition to create.</param>
      <param name="conditionData">The XElement containing the data for the condition.</param>
      <param name="index">The index at which the condition will be placed.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateConstant(System.String,System.Object,System.String)">
      <summary>Creates a transaction which, when committed, will create a constant with the given display name, and optionally, value and category name.</summary>
      <returns>A transaction which, when executed, will perform the operation.</returns>
      <param name="displayName">The display name of the new constant.</param>
      <param name="value">Optionally, the value to apply to the constant.</param>
      <param name="categoryName">Optionally, the name of a category to apply to the constant.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateDocument(System.Type,System.String)">
      <summary>Creates a transaction which, when committed, will create a document of the specified type, with the given name.</summary>
      <returns>A transaction which, when executed, will perform the operation.</returns>
      <param name="documentType">The type of the document to create, must be a subclass of .</param>
      <param name="documentName">The name of the document to create.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateEventFlowConnection(DriveWorks.Transactions.InputEndpointRef,DriveWorks.Transactions.OutputEndpointRef)">
      <summary>Creates a new transaction that when executed will create a connection between the given endpoints.</summary>
      <returns>A transaction which, when executed, will perform the operation.</returns>
      <param name="input">The input to connect to the output.</param>
      <param name="output">The output to connect to the input.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateFormControl(DriveWorks.Forms.Form,DriveWorks.Forms.ContainerControlBase,System.Type,System.String)">
      <summary>Creates a transaction which, when committed, will create a new form control.</summary>
      <param name="parentForm">The parent form for the new control.</param>
      <param name="parentControl">The parent control of the new control, if it is to have one.</param>
      <param name="controlType">The type of control to create.</param>
      <param name="controlName">The name to give the control.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateFormMessage(System.Int32,System.String,System.String)">
      <summary>Creates a transaction which, when committed, will creates a form message with the given code number.</summary>
      <param name="code">The code to assign the new form message</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateOperation(System.String,System.String)">
      <summary>Creates a transaction which, when committed, will create an operation with given name on the given state.</summary>
      <param name="stateTitle">The state to create this operation in.</param>
      <param name="name">The name and title of the new operation</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateScopedComponentTaskCondition(System.String,System.String,System.Type,System.String)">
      <summary>Creates a new transaction that when executed will create a new component task condition for a scoped component task.</summary>
      <exception caption="" cref="T:System.ArgumentNullException">Any of the arguments are null.%name% is an empty string.</exception>
      <returns>A transaction that when executed will create the specified condition.</returns>
      <param name="scope">The scope of the task that the condition should be associated with.</param>
      <param name="taskName">The name of the task to associate the new condition with.</param>
      <param name="conditionType">The type of the condition to create.</param>
      <param name="name">The name to give the newly created condition.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateScopedComponentTaskReleaseCondition(System.String,System.String,System.Type,System.String)">
      <summary>Creates a new transaction that when executed will create a new component task release condition for a scoped component task.</summary>
      <exception caption="" cref="T:System.ArgumentNullException">Any of the arguments are null.The parameter %name% is an empty string.</exception>
      <returns>A transaction that when executed will create the specified condition.</returns>
      <param name="taskName">The task to associate the new condition with.</param>
      <param name="conditionType">The type of the condition to create.</param>
      <param name="name">The title to give the newly created condition.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateSimpleTable(System.String,System.String[0:,0:])">
      <summary>Creates a transaction which, when committed, will create and populate a simple table.</summary>
      <param name="tableName">The name of the table to be created.</param>
      <param name="data">The data to populate the table with.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateSpecificatioMacroFromTemplate(System.String,System.String,System.String)">
      <summary>Creates a transaction which, when comitted, will create a specification macro from an XML template.</summary>
      <param name="name">The name of the specification macro to be created.</param>
      <param name="category">The category that the specification macro will belong to.</param>
      <param name="macroXml">The XML containing the specification macro.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateSpecificationMacroFromXml(System.String)">
      <summary>Creates a transaction which, when comitted, will create a specification macro from data already retrieved from the clipboard.</summary>
      <param name="macroXml">The Xml string containing the specification macro.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateSpecificationProperty(System.String,System.String,System.String,System.Int32)">
      <summary>Creates a transaction which, when commited, will create a new specification property with the given values.</summary>
      <param name="name">The name to give the new property.</param>
      <param name="rule">The rule to apply to the new property.</param>
      <param name="comment">The comment to apply to the new property.</param>
      <param name="index">The index to insert the property at, any invalid index will result in the property being appended on the list.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateState(System.String)">
      <summary>Creates a transaction which, when committed, will create a state with given title and position.</summary>
      <param name="title">The title of the new state.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateTaskFromExisting(DriveWorks.Transactions.TaskSequenceRef,System.Type,System.Xml.Linq.XElement,System.Int32)">
      <summary>Creates a transaction which, when committed, will create a new task from existing task data.</summary>
      <param name="taskSequenceRef">The reference to the task sequence to modify.</param>
      <param name="taskType">The type of task to create.</param>
      <param name="taskData">The XElement containing the data for the task.</param>
      <param name="index">The index at which the task will be placed.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateTransition(System.String,System.Guid,System.Guid)">
      <summary>Creates a transaction which, when committed, will create an transition with a given name from given source state to target state.</summary>
      <param name="name">The name of the transition.</param>
      <param name="sourceStateId">The Id of the source state.</param>
      <param name="targetStateId">The Id of the target state.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteCalculationTable(System.String)">
      <summary>Creates a transaction that will delete a calculation table.</summary>
      <returns>A transaction that will perform the operation.</returns>
      <param name="tableName">The name of the table to use.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteCalculationTableColumn(System.String,System.String)">
      <summary>Creates a transaction that will delete a calculation table column.</summary>
      <returns>A transaction that will perform the operation.</returns>
      <param name="tableName">The name of the table to use.</param>
      <param name="columnName">The name of the column to use.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteComponentSpecificTask(DriveWorks.Components.ProjectComponent,System.String)">
      <summary>Creates a new transaction that when executed will delete the specified component specific .</summary>
      <returns>A transaction that when executed will delete the specified task.</returns>
      <param name="component">The  the task is associated with.</param>
      <param name="taskName">The name of the task to delete.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteComponentTaskCondition(DriveWorks.Components.ProjectComponent,System.String,System.String)">
      <summary>Creates a new transaction that when executed will delete the given condition.</summary>
      <exception caption="" cref="T:System.ArgumentNullException">%component%, %taskName%, or %conditionName% is null.</exception>
      <returns>A transaction that when executed will delete the given condition.</returns>
      <param name="component">The component to which the task owning the condition belongs to.</param>
      <param name="taskName">The task that owns the condition to delete.</param>
      <param name="conditionName">The condition to delete.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteComponentTaskReleaseCondition(DriveWorks.Components.ProjectComponent,System.String,System.String)">
      <summary>Creates a new transaction that when executed will delete the given release condition.</summary>
      <exception caption="" cref="T:System.ArgumentNullException">Any of the arguments are null.</exception>
      <returns>A transaction that when executed will delete the given condition.</returns>
      <param name="component">The component to which the task owning the condition belongs to.</param>
      <param name="taskName">The name of the task that owns the condition to delete.</param>
      <param name="conditionName">The name of the condition to delete.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteCondition(DriveWorks.Transactions.ConditionRef)">
      <summary>Creates a transaction which, when committed, will delete the specified condition.</summary>
      <param name="conditionRef">The reference to the condition to delete.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteConstant(DriveWorks.ProjectConstant)">
      <summary>Creates a transaction which, when committed, will delete the specified constant.</summary>
      <returns>A transaction which, when executed, will perform the operation.</returns>
      <param name="constant">The constant to be deleted.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteDataTable(DriveWorks.ProjectDataTable)">
      <summary>Creates a transaction which, when committed, will delete the specified data table.</summary>
      <returns>A transaction which, when executed, will perform the operation.</returns>
      <param name="dataTable">The data table to be deleted.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteDecision(DriveWorks.Navigation.DecisionNavigationStep)">
      <summary>Creates a transaction which, when committed, will delete a decision by the given name.</summary>
      <param name="decision">The decision to be deleted.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteDocument(DriveWorks.ProjectDocument)">
      <summary>Creates a transaction which, when committed, will delete the specified document.</summary>
      <returns>A transaction which, when executed, will perform the operation.</returns>
      <param name="document">The document to be deleted.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteEventFlowConnection(DriveWorks.Transactions.InputEndpointRef,DriveWorks.Transactions.OutputEndpointRef)">
      <summary>Creates a new transaction that when executed will delete the given connection.</summary>
      <returns>A transaction which, when executed, will perform the operation.</returns>
      <param name="input">The input the connection is made to.</param>
      <param name="output">The output part of the connection.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteForm(DriveWorks.Navigation.FormNavigationStep)">
      <summary>Creates a transaction which, when committed, will delete a form by the given name.</summary>
      <param name="form">The form to delete.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteFormControls(DriveWorks.Forms.ControlBase[])">
      <summary>Creates a transaction to delete the given form controls.</summary>
      <returns>A transaction.</returns>
      <param name="controls">The form controls to delete.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteFormMessage(DriveWorks.ProjectMessage)">
      <summary>Creates a transaction which, when committed, will delete a form message.</summary>
      <param name="formMessage">The for message to be deleted.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteOperation(DriveWorks.Specification.Operation)">
      <summary>Creates a transaction which, when committed, will delete an operation by name on a state.</summary>
      <param name="operation">The operation to delete.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteProjectComponentSet(DriveWorks.ProjectComponentSet)">
      <summary>Creates a transaction that will delete the specified component set.</summary>
      <returns>A transaction that will perform the operation.</returns>
      <param name="componentSet">The component set to delete.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteScopedComponentTask(System.String,System.String)">
      <summary>Creates a new transaction that when executed will delete the given scoped .</summary>
      <returns>A transaction that when executed will delete the task with the given name.</returns>
      <param name="scope">The scope of the task to delete.</param>
      <param name="taskName">The name of the task to delete.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteScopedComponentTaskCondition(System.String,System.String,System.String)">
      <summary>Creates a new transaction that when executed will delete the given condition.</summary>
      <exception caption="" cref="T:System.ArgumentNullException">Any of the arguments are null.%scope% is an empty string.</exception>
      <returns>A transaction that when executed will delete the given condition.</returns>
      <param name="scope">The scope the task that owns the condition belongs to.</param>
      <param name="taskName">The name of the task that owns the condition to delete.</param>
      <param name="conditionName">The name of the condition to delete.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteScopedComponentTaskReleaseCondition(System.String,System.String,System.String)">
      <summary>Creates a new transaction that when executed will delete the given release condition.</summary>
      <returns>A transaction that when executed will delete the given condition.</returns>
      <param name="scope">The scope of the task that owns the condition.</param>
      <param name="taskName">The name of the task that owns the condition to delete.</param>
      <param name="conditionName">The name of the condition to delete.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteSpecificationMacro(DriveWorks.Specification.SpecificationMacro)">
      <summary>Creates a transaction which when committed will delete a specification macro by name.</summary>
      <param name="macro">The specification macro to delete.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteSpecificationMacroCategory(DriveWorks.SpecificationMacroCategory,DriveWorks.DeleteMacroCategoryBehavior)">
      <summary>Creates a transaction which when committed will delete a macro category.</summary>
      <returns>A transaction which, when executed, will perform the operation.</returns>
      <param name="macroCategory">The macro category to delete.</param>
      <param name="deleteBehavior">The behavior to apply when deleting children.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteSpecificationProperty(DriveWorks.ProjectSpecificationProperty)">
      <summary>Creates a transaction which, when commited, will delete the given specification property.</summary>
      <param name="specificationProperty">The specification property to delete.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteState(DriveWorks.Specification.State)">
      <summary>Creates a transaction which, when committed, will delete a state by the given name.</summary>
      <param name="state">The state to delete.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteTask(DriveWorks.Transactions.TaskRef)">
      <summary>Creates a transaction which, when committed, will delete a task from the given parent object's task sequence.</summary>
      <param name="taskRef">The reference to the task to delete.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteTransition(DriveWorks.Specification.Transition)">
      <summary>Creates a transaction which, when committed, will delete the transition by name from given state.</summary>
      <param name="transition">The transition to delete.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteVariableCategory(DriveWorks.ProjectVariableCategory,DriveWorks.DeleteVariableCategoryBehavior)">
      <summary>Creates a transaction which, when committed, will delete a variable category.</summary>
      <returns>A transaction which, when executed, will perform the operation.</returns>
      <param name="variableCategory">The variable category to delete.</param>
      <param name="deleteBehavior">The behavior to apply when deleting children.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxInsertProjectComponentSet(System.String,System.Guid,System.Int32)">
      <summary>Creates a transaction that will insert a component at the specified position in the current collection in the current project.</summary>
      <returns>A transaction that will perform the operation.</returns>
      <param name="name">The name to give the component. This may be null to have one generated from captured component's name.</param>
      <param name="capturedComponentId">The unique identifier of the captured component that you wish to add to the current project.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxMoveCalculationTableColumn(System.String,System.String,System.Int32)">
      <summary>Creates a transaction that will move a calculation table column.</summary>
      <returns>A transaction that will perform the operation.</returns>
      <param name="tableName">The name of the table to use.</param>
      <param name="columnName">The name of the column to use.</param>
      <param name="newIndex">The new location to place the column.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxMoveOperation(DriveWorks.Specification.State,System.Int32,System.Int32)">
      <summary>Creates a transaction which, when committed, will move an operation from one index to another.</summary>
      <param name="state">The parent state of the operation to move.</param>
      <param name="oldIndex">The Current index of the operation on the operations list.</param>
      <param name="newIndex">The new index for the operation.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxMoveProjectComponentSet(System.Int32,System.Int32)">
      <summary>Creates a transaction that will change a component set's index.</summary>
      <returns>A transaction that will perform the operation.</returns>
      <param name="oldIndex">The original index of the component set to move.</param>
      <param name="newIndex">The new index that the component set is to be moved to.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxMoveTransition(DriveWorks.Specification.State,System.Int32,System.Int32)">
      <summary>Creates a transaction which, when committed, will move a transition from one index to another.</summary>
      <param name="state">The parent state of the transition to move.</param>
      <param name="oldIndex">The Current index of the transition on the transitions list.</param>
      <param name="newIndex">The new index for the transition.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxRenameCalculationTable(System.String,System.String)">
      <summary>Creates a transaction that will rename a calculation table.</summary>
      <returns>A transaction that will perform the operation.</returns>
      <param name="tableName">The name of the table to use.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxRenameCalculationTableColumn(System.String,System.String,System.String)">
      <summary>Creates a transaction that will rename a calculation table column.</summary>
      <returns>A transaction that will perform the operation.</returns>
      <param name="tableName">The name of the table to use.</param>
      <param name="columnName">The name of the column to use.</param>
      <param name="newColumnName">The new name of the column.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxRenameComponentTask(DriveWorks.Components.Tasks.ComponentTask,System.String,DriveWorks.Components.ProjectComponent)">
      <summary>Creates a new transaction that when executed will change the name of the given task.</summary>
      <returns>A transaction that when executed will change the name of the given task.</returns>
      <param name="task">The task to rename.</param>
      <param name="newName">The new name to give the task.</param>
      <param name="component">The component the task is associated with.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxRenameProjetComponentSet(System.String,System.String)">
      <summary>Creates a transaction that will rename a component set.</summary>
      <returns>A transaction that will perform the operation.</returns>
      <param name="oldName">The current name of the component set to rename.</param>
      <param name="newName">The new name to apply to the component set.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxRenameScopedComponentTask(DriveWorks.Components.Tasks.ComponentTask,System.String)">
      <summary>Creates a new transaction that when executed will change the name of the given task.</summary>
      <returns>A transaction that when executed will change the name of the given task.</returns>
      <param name="task">The task to rename.</param>
      <param name="newName">The new name to give the task.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxRenameStep(DriveWorks.Navigation.NavigationStep,System.String)">
      <summary>Creates a transaction which, when committed, will delete a form by the given name.</summary>
      <param name="navStep">The form to delete.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxResetSpecificationFlow">
      <summary>Creates a transaction which, when commited, will Reset the current specification to default status.</summary>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxRestoreChildSpecificationList(DriveWorks.ProjectChildSpecificationDef)">
      <summary>Creates a new transaction that when executed will restore the state of the given child specification list to when this transaction was created.</summary>
      <param name="childSpecDefinition">The child specification list to create the backup transaction for.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxRestoreItemList(DriveWorks.ProjectItemListDef)">
      <summary>Creates a new transaction that when executed will restore the state of the item list to when this transaction was created.</summary>
      <param name="itemListDefinition">The item list to create the backup transaction for.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxSetCalculationTableColumnRowRule(System.String,System.String,System.Int32,System.String,System.String)">
      <summary>Creates a transaction that will set the rule of a calculation table's cell.</summary>
      <returns>A transaction that will perform the operation.</returns>
      <param name="tableName">The name of the table to use.</param>
      <param name="columnName">The name of the column to use.</param>
      <param name="rowIndex">The row index of the cell to set.</param>
      <param name="rule">The rule to set in the cell.</param>
      <param name="comment">The comment to set on the cell.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxSetCalculationTableOutputControlRules(System.String)">
      <summary>Creates a transaction that will find all controls that can be driven from the specified table and set their rules to point to the table.</summary>
      <returns>A transaction that will perform the operation.</returns>
      <param name="tableName">The name of the table to use.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxSetProjectMetadataSection(System.String,System.Xml.Linq.XElement)">
      <summary>Creates a transaction that will set the data element for a project metadata section.</summary>
      <param name="sectionName">The name of the section to update.</param>
      <param name="newSectionsData">The new data to place in the section.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxUndoDeleteOperation(System.String,System.String,System.String,DriveWorks.Specification.Conditions,DriveWorks.Specification.Teams,DriveWorks.Specification.TaskSequence)">
      <summary>Creates a transaction which, when committed, will undo a deletion of a operation with all its specified parameters.</summary>
      <param name="sourceStateTitle">The title of the source state.</param>
      <param name="name">The name of the operation to re-create.</param>
      <param name="title">The title of the operation.</param>
      <param name="conditions">The conditions of the operation.</param>
      <param name="teams">The teams of the operation.</param>
      <param name="taskSequence">The tasks of the operation.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxUndoDeleteTransition(System.Guid,System.Guid,System.String,System.String,DriveWorks.Specification.Conditions,DriveWorks.Specification.Teams,DriveWorks.Specification.FlowEvent)">
      <summary>Creates a transaction which, when committed, will undo the deletion of a transition with all its given parameters.</summary>
      <param name="sourceStateId">The Id of the source state.</param>
      <param name="targetStateId">The Id of the target state.</param>
      <param name="name">The name of the transition to re-create.</param>
      <param name="title">The title of the transition to re-create.</param>
      <param name="conditions">The conditions of the transition.</param>
      <param name="teams">The teams of the transition.</param>
      <param name="invokeEvent">The invoke event of the transition.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeComponentTaskProperty(DriveWorks.Components.Tasks.ComponentTask,DriveWorks.Components.Tasks.ComponentTaskRule,System.Boolean,System.String,System.Object,System.String)">
      <summary>Creates a new transaction that when executed will change the formula and comment of the given  rule.</summary>
      <returns>A transaction that when executed will change the formula and comment of the given rule.</returns>
      <param name="task">The task whose rule will be changed.</param>
      <param name="rule">The rule to change.</param>
      <param name="formula">The new formula to give the rule.</param>
      <param name="comment">The new comment to give the rule.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeComponentTaskProperty(DriveWorks.Components.ProjectComponent,System.String,System.String,System.Boolean,System.String,System.Object,System.String)">
      <summary>Creates a new transaction that when executed will change a property on the given .</summary>
      <returns>A transaction that when executed will change the property of the .</returns>
      <param name="component">The component that owns the task to change.</param>
      <param name="taskName">The name of the task that owns the property to change.</param>
      <param name="propertyName">The name of the property to change.</param>
      <param name="isBound">True to make the property rule bound, False to make the property static.</param>
      <param name="formula">The formula to apply to the property (if the property is bound).</param>
      <param name="value">The value to apply to the property (if the property is not bound).</param>
      <param name="comment">The comment to apply to the task property.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeCondition(DriveWorks.Transactions.ConditionRef,System.String,DriveWorks.Specification.ConditionFailBehavior,DriveWorks.Transactions.FlowPropertyData[])">
      <summary>Creates a transaction which, when committed, will change the properties of the specified condition.</summary>
      <param name="conditionRef">The reference to the condition to modify.</param>
      <param name="newFailBehavior">The new failure behavior of the condition.</param>
      <param name="newProperties">The new properties to assign the condition.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeCondition(DriveWorks.Transactions.ConditionRef,System.String,DriveWorks.Specification.ConditionFailBehavior,DriveWorks.Transactions.FlowPropertyData[],System.Boolean)">
      <summary>Creates a transaction which, when committed, will change the properties of the specified condition.</summary>
      <param name="conditionRef">The reference to the condition to modify.</param>
      <param name="newFailBehavior">The new failure behavior of the condition.</param>
      <param name="newProperties">The new properties to assign the condition.</param>
      <param name="allowEmptyRules">True to allow rules to be made dynamic with empty rules.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeDecision(DriveWorks.Navigation.DecisionNavigationStep,DriveWorks.Navigation.NavigationStep,DriveWorks.Navigation.NavigationStep,System.Int32,System.Int32,System.String,System.String)">
      <summary>Creates a transaction which, when committed, will update a decision with the given name to the given properties, only project and name are needed</summary>
      <param name="decision">The decision to update.</param>
      <param name="nextStepTrue">The next step, should the condition expression return true.</param>
      <param name="nextStepFalse">The next step, should the condition expression return false.</param>
      <param name="left">The horrizontal position of the decision.</param>
      <param name="top">The vertical position of the decision.</param>
      <param name="conditionExpression">The condition expression of the decision.</param>
      <param name="comment">The comment for the rule</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeDecision(DriveWorks.Navigation.DecisionNavigationStep,DriveWorks.Navigation.NavigationStep,DriveWorks.Navigation.NavigationStep,System.Int32,System.Int32,System.String)">
      <summary>Creates a transaction which, when committed, will update a decision with the given name to the given properties, only project and name are needed</summary>
      <param name="decision">The decision to update.</param>
      <param name="nextStepTrue">The next step, should the condition expression return true.</param>
      <param name="nextStepFalse">The next step, should the condition expression return false.</param>
      <param name="left">The horrizontal position of the decision.</param>
      <param name="top">The vertical position of the decision.</param>
      <param name="conditionExpression">The condition expression of the decision.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeFormControlPropertyRules(DriveWorks.Forms.ControlBase[],DriveWorks.Forms.DataModel.DynamicProperty,System.String,System.String)">
      <summary>Changes the given property on the specified controls to the provided value.</summary>
      <returns>A transaction.</returns>
      <param name="controls">The controls to change.</param>
      <param name="prop">The dynamic property to change on the named controls.</param>
      <param name="newRule">The new rule to apply to the property.</param>
      <param name="newComment">The new comment to apply to the property.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeFormControlPropertyRulesAndValues(DriveWorks.Forms.ControlBase[],DriveWorks.Forms.DataModel.DynamicProperty,System.String,System.String,System.Object)">
      <summary>Changes the given property on the specified controls to the provided value.</summary>
      <returns>A transaction.</returns>
      <param name="controls">The controls to change.</param>
      <param name="prop">The dynamic property to change on the named controls.</param>
      <param name="newRule">The new rule to apply to the property.</param>
      <param name="newComment">The new comment to apply to the property.</param>
      <param name="newValue">The new value to apply to the property.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeFormControlPropertyValues(DriveWorks.Forms.ControlBase[],DriveWorks.Forms.DataModel.DynamicProperty,System.Object)">
      <summary>Changes the given property on the specified controls to the provided value.</summary>
      <returns>A transaction.</returns>
      <param name="controls">The controls to change.</param>
      <param name="prop">The dynamic property to change on the named controls.</param>
      <param name="newValue">The new value to apply to the property.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeParentMacroCategory(DriveWorks.Specification.SpecificationMacro,DriveWorks.SpecificationMacroCategory)">
      <summary>Creates a transaction which when committed will change the parent category of the specified specification macro.</summary>
      <returns>A transaction which, when executed, will perform the operation.</returns>
      <param name="macro">The specification macro to modify.</param>
      <param name="newCategory">The new parent category, or a null reference to remove the parent.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeParentMacroCategory(DriveWorks.SpecificationMacroCategory,DriveWorks.SpecificationMacroCategory)">
      <summary>Creates a transaction which when committed will change the parent category of the specified specification macro category.</summary>
      <returns>A transaction which, when executed, will perform the operation.</returns>
      <param name="macroCategory">The macro category to modify.</param>
      <param name="newParentCategory">The new parent category, or a null reference to remove the parent.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeParentVariableCategory(DriveWorks.ProjectVariable,DriveWorks.ProjectVariableCategory)">
      <summary>Creates a transaction which, when committed, will change the parent category of the specified variable.</summary>
      <returns>A transaction which, when executed, will perform the operation.</returns>
      <param name="variable">The variable to modify.</param>
      <param name="newCategory">The new parent category, or a null reference (Nothing in Visual Basic) to remove the parent.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeParentVariableCategory(DriveWorks.ProjectVariableCategory,DriveWorks.ProjectVariableCategory)">
      <summary>Creates a transaction which, when committed, will change the parent category of the specified variable category.</summary>
      <returns>A transaction which, when executed, will perform the operation.</returns>
      <param name="variableCategory">The variable category to modify.</param>
      <param name="newParentCategory">The new parent category, or a null reference (Nothing in Visual Basic) to remove the parent.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeTask(DriveWorks.Transactions.TaskRef,System.String,DriveWorks.Transactions.FlowPropertyData[])">
      <summary>Creates a transaction which, when committed, will change the properties of the specified task.</summary>
      <param name="taskRef">The reference to the task to modify.</param>
      <param name="newTitle">The new title of the task.</param>
      <param name="newProperties">A specific object array of the new properties for the task.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxChangeTask(DriveWorks.Transactions.TaskRef,System.String,DriveWorks.Transactions.FlowPropertyData[],System.Boolean)">
      <summary>Creates a transaction which, when committed, will change the properties of the specified task.</summary>
      <param name="taskRef">The reference to the task to modify.</param>
      <param name="newTitle">The new title of the task.</param>
      <param name="newProperties">A specific object array of the new properties for the task.</param>
      <param name="allowEmptyRules">True to allow toggling properties to dynamic without a rule.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateComponentTask(System.Type,System.String,DriveWorks.Components.Tasks.ComponentTaskSequenceLocation,DriveWorks.Components.ProjectComponent)">
      <summary>Creates a new transaction that when executed will create a  that is specific to the given
<see cref="T:DriveWorks.Components.ProjectComponent" />.</summary>
      <returns>A transaction that when executed will create the task using the given parameters.</returns>
      <param name="type">The type of the task to create.</param>
      <param name="name">The name to give the newly created task.</param>
      <param name="component">The component to associate the task with.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateComponentTask(System.Type,System.String,DriveWorks.Components.Tasks.ComponentTaskCollection)">
      <summary>Creates a new transaction that when executed will create a  that is scoped to the given scope.</summary>
      <returns>A transaction that when executed will create the task using the given parameters.</returns>
      <param name="type">The type of the task to create.</param>
      <param name="name">The name to give the newly created task.</param>
      <param name="collection">The collection to add the task to.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateCondition(DriveWorks.Transactions.ConditionSequenceRef,System.Type,System.String)">
      <summary>Creates a transaction which, when committed, will create a new condition.</summary>
      <param name="conditionSequenceRef">The reference to the condition sequence.</param>
      <param name="conditionType">The type of the condition to create.</param>
      <param name="conditionTitle">The title to give the condition.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateCondition(DriveWorks.Transactions.ConditionSequenceRef,System.Type,System.String,System.Double,System.Double)">
      <summary>Creates a transaction which, when committed, will create a new condition.</summary>
      <param name="conditionSequenceRef">The reference to the condition sequence.</param>
      <param name="conditionType">The type of the condition to create.</param>
      <param name="conditionTitle">The title to give the condition.</param>
      <param name="left">The left position to give the condition.</param>
      <param name="top">The top position to give the condition.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateDecision(System.String,DriveWorks.Navigation.NavigationStep,DriveWorks.Navigation.NavigationStep,System.Int32,System.Int32,System.String,System.String)">
      <summary>Creates a transaction which, when committed, will create a decision with the given properties, name is the only needed property.</summary>
      <param name="name">The name of the new decision.</param>
      <param name="nextStepTrue">The next step, should the condition expression return true.</param>
      <param name="nextStepFalse">The next step, should the condition expression return false.</param>
      <param name="left">The horrizontal position of the decision.</param>
      <param name="top">The vertical position of the decision.</param>
      <param name="conditionExpression">The condition expression of the decision.</param>
      <param name="comment">The comment for the rule.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateDecision(System.String,DriveWorks.Navigation.NavigationStep,DriveWorks.Navigation.NavigationStep,System.Int32,System.Int32,System.String)">
      <summary>Creates a transaction which, when committed, will create a decision with the given properties, name is the only needed property.</summary>
      <param name="name">The name of the new decision.</param>
      <param name="nextStepTrue">The next step, should the condition expression return true.</param>
      <param name="nextStepFalse">The next step, should the condition expression return false.</param>
      <param name="left">The horrizontal position of the decision.</param>
      <param name="top">The vertical position of the decision.</param>
      <param name="conditionExpression">The condition expression of the decision.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateForm(System.String,DriveWorks.Navigation.NavigationStep,System.Int32,System.Int32)">
      <summary>Creates a transaction which, when committed, will create a form with the given properties, only name is needed.</summary>
      <param name="name">The name of the new form.</param>
      <param name="nextStep">The next step, from this form.</param>
      <param name="left">The horrizontal position of the form.</param>
      <param name="top">The vertical position of the form.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateForm(System.String,DriveWorks.Navigation.NavigationStep,System.Int32,System.Int32,DriveWorks.Forms.SimpleColor,DriveWorks.Forms.SimpleFont,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
      <summary>Creates a transaction which, when committed, will create a form with the given properties, only name is needed.</summary>
      <param name="name">The name of the new form.</param>
      <param name="nextStep">The next step, from this form.</param>
      <param name="left">The horrizontal position of the form.</param>
      <param name="top">The vertical position of the form.</param>
      <param name="backgroundColor">The background color to apply to the form.</param>
      <param name="defaultFont">The default font to apply to the form.</param>
      <param name="showStandardNavigation">Specifies whether the form should show standard navigation.</param>
      <param name="showTaskList">Specifies whether the form should show the task list.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateSpecificationMacro(System.String)">
      <summary>Creates a transaction which when committed will create a specification macro with the given name.</summary>
      <param name="name">The name of the new specification macro.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateSpecificationMacro(System.String,DriveWorks.SpecificationMacroCategory)">
      <summary>Creates a transaction which when committed will create a specification macro with the given name.</summary>
      <param name="name">The name of the new specification macro.</param>
      <param name="category">The category of the new specification macro.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateSpecificationMacroCategory(System.String,DriveWorks.SpecificationMacroCategory)">
      <summary>Creates a transaction which when committed will create a new specification macro category.</summary>
      <returns>A transaction which, when executed, will perform the operation.</returns>
      <param name="displayName">The display name of the new category.</param>
      <param name="parentCategory">Optionally, the parent category, or a null reference to leave the category rooted.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateSpecificationMacroCategory(System.String,System.String)">
      <summary>Creates a transaction which when committed will create a new specification macro category.</summary>
      <returns>A transaction which, when executed, will perform the operation.</returns>
      <param name="displayName">The display name of the new category.</param>
      <param name="parentCategoryPath">Optionally, the parent category path, or a null reference to leave the category rooted.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateTask(DriveWorks.Transactions.TaskSequenceRef,System.Type,System.String)">
      <summary>Creates a transaction which, when committed, will create a new task.</summary>
      <param name="taskSequenceRef">The reference to the task sequence to modify.</param>
      <param name="taskType">The type of task to create.</param>
      <param name="taskTitle">The title to give the new task.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateTask(DriveWorks.Transactions.TaskSequenceRef,System.Type,System.String,System.Double,System.Double,System.Boolean)">
      <summary>Creates a transaction which, when committed, will create a new task.</summary>
      <param name="taskSequenceRef">The reference to the task sequence to modify.</param>
      <param name="taskType">The type of task to create.</param>
      <param name="taskTitle">The title to give the new task.</param>
      <param name="left">The left position of the task.</param>
      <param name="top">The top position of the task.</param>
      <param name="createConnection">True to create a connection to the previously added task (or Start if no other tasks have been added).</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateVariable(System.String,System.String,System.String,DriveWorks.ProjectVariableCategory)">
      <summary>Creates a transaction which, when committed, will create a new variable.</summary>
      <param name="displayName">The display name of the variable to create.</param>
      <param name="rule">The rule to apply, or a null reference to not apply a comment..</param>
      <param name="comment">The comment to apply, or a null reference to not apply a comment.</param>
      <param name="category">The category to apply, or a null reference to not apply a category.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateVariable(System.String,System.String,System.String,System.String)">
      <summary>Creates a transaction which, when committed, will create a new variable.</summary>
      <param name="displayName">The display name of the variable to create.</param>
      <param name="rule">The rule to apply, or a null reference to not apply a comment..</param>
      <param name="comment">The comment to apply, or a null reference to not apply a comment.</param>
      <param name="category">The category by its path to apply, or a null reference to not apply a category.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateVariableCategory(System.String,DriveWorks.ProjectVariableCategory)">
      <summary>Creates a transaction which, when committed, will create a new variable category.</summary>
      <returns>A transaction which, when executed, will perform the operation.</returns>
      <param name="displayName">The display name of the new category.</param>
      <param name="parentCategory">Optionally, the parent category, or a null reference to leave the category rooted.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxCreateVariableCategory(System.String,System.String)">
      <summary>Creates a transaction which, when committed, will create a new variable category.</summary>
      <returns>A transaction which, when executed, will perform the operation.</returns>
      <param name="displayName">The display name of the new category.</param>
      <param name="parentCategoryPath">Optionally, the parent category path, or a null reference to leave the category rooted.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteVariable(DriveWorks.ProjectVariable)">
      <summary>Creates a transaction which, when committed, will delete the specified variable</summary>
      <returns>A transaction which, when executed, will perform the operation.</returns>
      <param name="variable">The varaible to delete.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxDeleteVariable(System.String,System.String,System.String,DriveWorks.ProjectVariableCategory)">
      <summary>Creates a transaction which, when committed, will create a new variable.</summary>
      <returns>A transaction which, when executed, will perform the operation.</returns>
      <param name="displayName">The display name of the variable to create.</param>
      <param name="rule">The rule to apply, or a null reference to not apply a comment..</param>
      <param name="comment">The comment to apply, or a null reference to not apply a comment.</param>
      <param name="category">The category to apply, or a null reference to not apply a category.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxMoveCondition(DriveWorks.Transactions.ConditionSequenceRef,System.Int32,System.Int32)">
      <summary>Creates a transaction which, when committed, will move the given condition.</summary>
      <param name="conditionSequenceRef">The reference to the condition sequence.</param>
      <param name="oldIndex">The index of the condition to move.</param>
      <param name="newIndex">The index of where to move the condition.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxMoveCondition(DriveWorks.Transactions.ConditionSequenceRef,System.String,System.Int32)">
      <summary>Creates a transaction which, when committed, will move the given condition.</summary>
      <param name="conditionSequenceRef">The reference to the condition sequence.</param>
      <param name="title">The title of the condition to move.</param>
      <param name="newIndex">The index to which to move the condition.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxRecreateFormControl(DriveWorks.Forms.Form,DriveWorks.Forms.ContainerControlBase,System.String)">
      <summary>Creates a transaction Create new controls from the given serialized text.</summary>
      <returns>A transaction</returns>
      <param name="form">The form to create the controls on.</param>
      <param name="parent">The parent control to create the controls in.</param>
      <param name="controlSerializationData">The pasted serialized text for the controls.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxRecreateFormControl(System.String,System.String,System.String)">
      <summary>Creates a transaction that creates new controls from the given serialized text.</summary>
      <returns>A transaction</returns>
      <param name="formName">The name of the form to create the controls on.</param>
      <param name="parentName">The name of the parent control to create the controls in.</param>
      <param name="controlSerializationData">The pasted serialized text for the controls.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxRecreateFormControl(System.String,System.String,System.String,System.Int32)">
      <summary>Creates a transaction that create new controls from the given serialized text.</summary>
      <returns>A transaction</returns>
      <param name="formName">The name of the form to create the controls on.</param>
      <param name="parentName">The name of the parent control to create the controls in.</param>
      <param name="controlSerializationData">The pasted serialized text for the controls.</param>
      <param name="insertIndex">The control index of which to insert the controls at.</param>
    </member>
    <member name="M:DriveWorks.Transactions.ProjectTransactionFactory.CreateTxUpdateFormControlRectangles(System.String[],System.Windows.Rect[],System.Windows.Rect[])">
      <summary>Creates a transaction which, when committed, will update the rectangles of the specified controls.</summary>
      <returns>A transaction.</returns>
      <param name="controlNames">The names of the form controls to modify.</param>
      <param name="oldRectangles">The rectangles of the form controls before the change.</param>
      <param name="newRectangles">The desired rectangles of the form controls after the change.</param>
    </member>
    <member name="M:DriveWorks.Transactions.TaskRef.GetConditionSequenceRef">
      <summary>Gets a reference to the task's condition sequence.</summary>
    </member>
    <member name="M:DriveWorks.Transactions.TaskRef.GetTask(DriveWorks.Project)">
      <summary>Gets the task from the specified project.</summary>
    </member>
    <member name="P:DriveWorks.Transactions.TaskRef.TaskIndex">
      <summary>Gets the task index.</summary>
    </member>
    <member name="P:DriveWorks.Transactions.TaskRef.TaskSequenceRef">
      <summary>Gets the task sequence reference.</summary>
    </member>
    <member name="M:DriveWorks.Transactions.TaskSequenceRef.FromMacro(DriveWorks.Specification.SpecificationMacro)">
      <summary>Constructs a task sequence reference for the given macro.</summary>
      <param name="macro">The macro for which to construct the reference.</param>
    </member>
    <member name="M:DriveWorks.Transactions.TaskSequenceRef.FromOperation(DriveWorks.Specification.Operation)">
      <summary>Constructs a task sequence reference for the given operation.</summary>
      <param name="operation">The operation for which to construct the reference.</param>
    </member>
    <member name="M:DriveWorks.Transactions.TaskSequenceRef.FromStateChildObject(DriveWorks.Specification.State,System.Object)">
      <summary>Gets a task sequence ref from a transition, operation, or event on the given state.</summary>
      <param name="state">The state to which the transition, operation, or event belongs.</param>
      <param name="obj">The transition, operation, or event for which to get a reference.</param>
    </member>
    <member name="M:DriveWorks.Transactions.TaskSequenceRef.FromStateEvent(DriveWorks.Specification.State,DriveWorks.Specification.FlowEvent)">
      <summary>Constructs a task sequence reference for the given event on the given state.</summary>
      <param name="state">The state to which the event belongs.</param>
      <param name="flowEvent">The event.</param>
    </member>
    <member name="M:DriveWorks.Transactions.TaskSequenceRef.FromTransition(DriveWorks.Specification.Transition)">
      <summary>Constructs a task sequence reference for the given transition.</summary>
      <param name="transition">The transition for which to construct the reference.</param>
    </member>
    <member name="M:DriveWorks.Transactions.TaskSequenceRef.GetTaskRef(System.Int32)">
      <summary>Gets a reference to the specified task.</summary>
      <param name="taskIndex">The index of the task in the sequence.</param>
    </member>
    <member name="M:DriveWorks.Transactions.TaskSequenceRef.GetTaskSequence(DriveWorks.Project)">
      <summary>Gets the task sequence from the specified project.</summary>
    </member>
    <member name="M:DriveWorks.Transactions.TxAggregateTransaction.#ctor(DriveWorks.Transactions.ITransaction[])">
      <summary>Initializes a new instance of the  transaction class.</summary>
      <param name="transactions">The transactions to aggregate into a single transaction.</param>
    </member>
    <member name="M:DriveWorks.Transactions.TxAggregateTransaction.#ctor(DriveWorks.Transactions.ITransaction[],System.Boolean)">
      <summary>Initializes a new instance of the  transaction class.</summary>
      <param name="transactions">The transactions to aggregate into a single transaction.</param>
      <param name="preserveOrder">Determines if the order of the reverse transaction should be kept the same as the forward.</param>
    </member>
    <member name="M:DriveWorks.Transactions.TxBase.Execute">
      <summary>Commits the transaction.</summary>
      <returns>A transaction which can undo the result of the executed transaction.</returns>
    </member>
    <member name="M:DriveWorks.Transactions.TxBase.ExecuteCore">
      <summary>When overridden by a derived class, commits the transaction.</summary>
      <returns>A transaction which can undo the result of the executed transaction.</returns>
    </member>
    <member name="T:DriveWorks.Utility.ValidateNameResult">
      <summary>DriveWorks name validation results.</summary>
    </member>
    <member name="T:DriveWorks.Utility.ValidatePathResult">
      <summary>DriveWorks path validation results.</summary>
    </member>
    <member name="T:DriveWorks.Utility.NameSearchProcess">
      <summary>Provides support for searching for an identifier throughout the project.</summary>
    </member>
    <member name="T:DriveWorks.Utility.RuleSearchProcess">
      <summary>Provides support for searching for a part of a rule throughout the project.</summary>
    </member>
    <member name="T:DriveWorks.Utility.RuleSearchResult">
      <summary>Provides a base class for data on an item found by the rule search process class.</summary>
    </member>
    <member name="T:DriveWorks.Utility.RuleSearchResultEventArgs">
      <summary>Provides event data for when a rule search item has been found.</summary>
    </member>
    <member name="T:DriveWorks.Utility.RuleToken">
      <summary>Provides a representation of a part of a rule.</summary>
    </member>
    <member name="T:DriveWorks.Utility.SearchEventArgs">
      <summary>Provides event data for when a search item has been found.</summary>
    </member>
    <member name="T:DriveWorks.Utility.SearchItem">
      <summary>Provides data on a found item from the search process class.</summary>
    </member>
    <member name="T:DriveWorks.Utility.ValidationUtility">
      <summary>Provides common validation routines.</summary>
    </member>
    <member name="M:DriveWorks.Utility.NameSearchProcess.Search">
      <summary>Starts the search process.</summary>
    </member>
    <member name="M:DriveWorks.Utility.NameSearchProcess.StopSearch">
      <summary>Stops the searching process if it is running.</summary>
      <exception caption="" cref="T:System.InvalidOperationException">Thrown when if this method is called when the process is not running.</exception>
    </member>
    <member name="P:DriveWorks.Utility.NameSearchProcess.FoundItems">
      <summary>Current search results.</summary>
    </member>
    <member name="P:DriveWorks.Utility.NameSearchProcess.IsRunning">
      <summary>Whether the search process is running or not.</summary>
    </member>
    <member name="P:DriveWorks.Utility.NameSearchProcess.RaiseEventsInMainThread">
      <summary>Gets/sets whether or not events raised from this search process should be marshalled to the main thread.</summary>
    </member>
    <member name="P:DriveWorks.Utility.NameSearchProcess.ScannedItemsCount">
      <summary>Gets the total number of scanned items.</summary>
    </member>
    <member name="P:DriveWorks.Utility.NameSearchProcess.SearchItem">
      <summary>Gets search item for this process.</summary>
    </member>
    <member name="E:DriveWorks.Utility.NameSearchProcess.Finished">
      <summary>Raised when the search process has finished.</summary>
    </member>
    <member name="E:DriveWorks.Utility.NameSearchProcess.SearchedItem">
      <summary>Raised when starting search of a specific item.</summary>
    </member>
    <member name="E:DriveWorks.Utility.NameSearchProcess.Started">
      <summary>Raised when the search process has started.</summary>
    </member>
    <member name="E:DriveWorks.Utility.NameSearchProcess.UsageFound">
      <summary>Raised when an instance of use has been found.</summary>
    </member>
    <member name="M:DriveWorks.Utility.RuleSearchProcess.Search(DriveWorks.RuleSection)">
      <summary>Starts the search process. <paramref name="section">(Optional): In which section of DriveWorks to search.</paramref></summary>
    </member>
    <member name="M:DriveWorks.Utility.RuleSearchProcess.StopSearch">
      <summary>Stops the search process.</summary>
    </member>
    <member name="P:DriveWorks.Utility.RuleSearchProcess.FoundItems">
      <summary>Current search results.</summary>
    </member>
    <member name="P:DriveWorks.Utility.RuleSearchProcess.IsRunning">
      <summary>Whether the search process is running or not.</summary>
    </member>
    <member name="P:DriveWorks.Utility.RuleSearchProcess.SearchStrings">
      <summary>Gets the search strings for this process.</summary>
    </member>
    <member name="E:DriveWorks.Utility.RuleSearchProcess.Finished">
      <summary>Occurs when the search process has finished searching.</summary>
    </member>
    <member name="E:DriveWorks.Utility.RuleSearchProcess.SearchedItem">
      <summary>Occurs for every item that is searched by the search process.</summary>
    </member>
    <member name="E:DriveWorks.Utility.RuleSearchProcess.Started">
      <summary>Occurs when the search process is started.</summary>
    </member>
    <member name="E:DriveWorks.Utility.RuleSearchProcess.UsageFound">
      <summary>Occurs when a match has been found.</summary>
    </member>
    <member name="M:DriveWorks.Utility.RuleSearchResult.CreateTransaction(DriveWorks.Project,DriveWorks.Transactions.ProjectTransactionFactory,System.String)">
      <summary>Creates a new transaction responsible for changing the rule of the item.</summary>
      <returns>A transaction which, when executed, will perform the operation.</returns>
      <param name="factory">The  used to create the transaction.</param>
      <param name="rule">The new rule to apply.</param>
    </member>
    <member name="P:DriveWorks.Utility.RuleSearchResult.Indices">
      <summary>Gets the array of start and end indices.</summary>
    </member>
    <member name="P:DriveWorks.Utility.RuleSearchResult.Location">
      <summary>Gets the location.</summary>
    </member>
    <member name="P:DriveWorks.Utility.RuleSearchResult.MaxEndIndex">
      <summary>Gets the highest end index of the item.</summary>
    </member>
    <member name="P:DriveWorks.Utility.RuleSearchResult.MinStartIndex">
      <summary>Gets the lowest start index of the item.</summary>
    </member>
    <member name="P:DriveWorks.Utility.RuleSearchResult.RealRule">
      <summary>Gets the underlying  or a generic wrapper.</summary>
      <returns>The  for this item.</returns>
    </member>
    <member name="P:DriveWorks.Utility.RuleSearchResult.Rule">
      <summary>Gets the rule this item represents.</summary>
    </member>
    <member name="P:DriveWorks.Utility.RuleSearchResult.RuleId">
      <summary>Gets the display name of the rule this item represents.</summary>
    </member>
    <member name="P:DriveWorks.Utility.RuleSearchResult.Section">
      <summary>The section this item is in.</summary>
    </member>
    <member name="P:DriveWorks.Utility.RuleSearchResultEventArgs.Item">
      <summary>The found item from the search.</summary>
    </member>
    <member name="M:DriveWorks.Utility.RuleToken.IsValueEqual(System.Object)">
      <summary>Determines whether the specified token represents an identical part of a rule as the current token.</summary>
    </member>
    <member name="P:DriveWorks.Utility.RuleToken.EndIndex">
      <summary>Gets the end index of this token.</summary>
    </member>
    <member name="P:DriveWorks.Utility.RuleToken.IsOperator">
      <summary>Gets whether this token is an operator.</summary>
    </member>
    <member name="P:DriveWorks.Utility.RuleToken.IsUnaryOperator">
      <summary>Gets whether this token is a Unary operator.</summary>
    </member>
    <member name="P:DriveWorks.Utility.RuleToken.Rule">
      <summary>Gets the full rule this token is a part of.</summary>
    </member>
    <member name="P:DriveWorks.Utility.RuleToken.StartIndex">
      <summary>Gets the start index of this token.</summary>
    </member>
    <member name="P:DriveWorks.Utility.RuleToken.Text">
      <summary>Gets the text of this token.</summary>
    </member>
    <member name="P:DriveWorks.Utility.RuleToken.Type">
      <summary>Gets the type of this token.</summary>
    </member>
    <member name="P:DriveWorks.Utility.SearchEventArgs.Item">
      <summary>The found item from the search.</summary>
    </member>
    <member name="P:DriveWorks.Utility.SearchItem.Context">
      <summary>Gets the rule context for this item.</summary>
    </member>
    <member name="P:DriveWorks.Utility.SearchItem.Location">
      <summary>The path to the rule. This could be categories or parent objects etc</summary>
    </member>
    <member name="P:DriveWorks.Utility.SearchItem.Name">
      <summary>Gets the name of this item, if it has name.</summary>
    </member>
    <member name="P:DriveWorks.Utility.SearchItem.Rule">
      <summary>The location of the item.</summary>
    </member>
    <member name="P:DriveWorks.Utility.SearchItem.RuleId">
      <summary>The identifier for the rule.</summary>
    </member>
    <member name="P:DriveWorks.Utility.SearchItem.RuleType">
      <summary>The type of the rule.</summary>
    </member>
    <member name="P:DriveWorks.Utility.SearchItem.RuleTypes">
      <summary>Gets the types for this item.</summary>
    </member>
    <member name="M:DriveWorks.Utility.ValidationUtility.Validate3DAppearanceName(System.String)">
      <summary>Validates a 3D document's appearance name.</summary>
      <param name="name">The name to validate</param>
    </member>
    <member name="M:DriveWorks.Utility.ValidationUtility.Validate3DNodeName(System.String)">
      <summary>Validates a 3D document's node name.</summary>
      <param name="name">The name to validate</param>
    </member>
    <member name="M:DriveWorks.Utility.ValidationUtility.Validate3DSuppressionStateName(System.String)">
      <summary>Validates a 3D document's suppression state name.</summary>
      <param name="name">The name to validate</param>
    </member>
    <member name="M:DriveWorks.Utility.ValidationUtility.ValidateCalculationTableColumnName(System.String)">
      <summary>Validates a DriveWorks calculation table column name.</summary>
      <param name="name">The name to validate</param>
    </member>
    <member name="M:DriveWorks.Utility.ValidationUtility.ValidateCalculationTableName(System.String)">
      <summary>Validates a DriveWorks calculation table name.</summary>
      <param name="name">The name to validate</param>
    </member>
    <member name="M:DriveWorks.Utility.ValidationUtility.ValidateCategoryName(System.String)">
      <summary>Validates a DriveWorks Category Name.</summary>
    </member>
    <member name="M:DriveWorks.Utility.ValidationUtility.ValidateChildSpecificationListControlName(System.String)">
      <summary>Validates a DriveWorks control name.</summary>
    </member>
    <member name="M:DriveWorks.Utility.ValidationUtility.ValidateComponentTaskName(System.String)">
      <summary>Validates a DriveWorks component task name.</summary>
      <returns>The result of the validation.</returns>
      <param name="taskName">The name to validate.</param>
    </member>
    <member name="M:DriveWorks.Utility.ValidationUtility.ValidateConstantName(System.String)">
      <summary>Validates a DriveWorks Constant name</summary>
      <returns>True if value contains bad characters.</returns>
    </member>
    <member name="M:DriveWorks.Utility.ValidationUtility.ValidateDocumentName(System.String)">
      <summary>Validates a DriveWorks document name</summary>
      <param name="doc">The name to validate.</param>
    </member>
    <member name="M:DriveWorks.Utility.ValidationUtility.ValidateFormOrDecisionName(System.String)">
      <summary>Validates a DriveWorks form or decision name</summary>
      <param name="name">The name to validate.</param>
    </member>
    <member name="M:DriveWorks.Utility.ValidationUtility.ValidateGroupConnectorName(System.String)">
      <summary>Validates the DriveWorks Connector name.</summary>
      <param name="name">The name to validate.</param>
    </member>
    <member name="M:DriveWorks.Utility.ValidationUtility.ValidateGroupName(System.String)">
      <summary>Validates a DriveWorks Group name.</summary>
      <returns>True is the path validates correctly, and false otherwise</returns>
      <param name="groupName">The name to validate</param>
    </member>
    <member name="M:DriveWorks.Utility.ValidationUtility.ValidateGroupTableName(System.String)">
      <summary>Validates a DriveWorks group table name.</summary>
      <returns>The result of the validation.</returns>
      <param name="tableName">The name to validate.</param>
    </member>
    <member name="M:DriveWorks.Utility.ValidationUtility.ValidateItemListControlName(System.String)">
      <summary>Validates a DriveWorks control name.</summary>
    </member>
    <member name="M:DriveWorks.Utility.ValidationUtility.ValidateOperation(System.String)">
      <summary>Validates a DriveWorks operation name.</summary>
      <param name="operation">The name to validate.</param>
    </member>
    <member name="M:DriveWorks.Utility.ValidationUtility.ValidateProjectName(System.String)">
      <summary>Validates a DriveWorks Project name.</summary>
    </member>
    <member name="M:DriveWorks.Utility.ValidationUtility.ValidateSpecificationMacro(System.String)">
      <summary>Validates a DriveWorks specification macro name.</summary>
      <param name="macro">The name to validate.</param>
    </member>
    <member name="M:DriveWorks.Utility.ValidationUtility.ValidateState(System.String)">
      <summary>Validates a DriveWorks state name.</summary>
      <param name="state">The name to validate.</param>
    </member>
    <member name="M:DriveWorks.Utility.ValidationUtility.ValidateTableName(System.String)">
      <summary>Validates a DriveWorks table name</summary>
    </member>
    <member name="M:DriveWorks.Utility.ValidationUtility.ValidateTeamName(System.String)">
      <summary>Validates a DriveWorks team name</summary>
      <param name="name">The name to validate.</param>
    </member>
    <member name="M:DriveWorks.Utility.ValidationUtility.ValidateTransition(System.String)">
      <summary>Validates a DriveWorks transition name.</summary>
      <param name="transition">The name to validate.</param>
    </member>
    <member name="M:DriveWorks.Utility.ValidationUtility.ValidateUserEmail(System.String)">
      <summary>Validates a DriveWorks user email.</summary>
      <param name="email">The name to validate.</param>
    </member>
    <member name="M:DriveWorks.Utility.ValidationUtility.ValidateUserFullname(System.String)">
      <summary>Validates a DriveWorks full name.</summary>
      <param name="name">The name to validate.</param>
    </member>
    <member name="M:DriveWorks.Utility.ValidationUtility.ValidateUserName(System.String)">
      <summary>Validates a DriveWorks username.</summary>
      <param name="name">The name to validate.</param>
    </member>
    <member name="M:DriveWorks.Utility.ValidationUtility.ValidateVariableName(System.String)">
      <summary>Validates a DriveWorks Variable Name.</summary>
    </member>
    <member name="M:DriveWorks.Utility.ValidationUtility.ValidateWin32FileName(System.String)">
      <summary>Validates a file name</summary>
      <returns>True if the path validates correctly, and false otherwise.</returns>
      <param name="fileName">The name of the file without extension or path to validate.</param>
    </member>
    <member name="M:DriveWorks.Utility.ValidationUtility.ValidateWin32FileNameWithPath(System.String)">
      <summary>Validates a full file path according to NTFS guidelines.</summary>
      <returns>True if the path validates correctly, and false otherwise.</returns>
      <param name="fileNameWithPath">The name of the file with its path and extension to validate.</param>
    </member>
    <member name="M:DriveWorks.Utility.ValidationUtility.ValidateWin32Path(System.String)">
      <summary>Validates a path according to NTFS guidelines</summary>
      <param name="path">The path to validate</param>
    </member>
    <member name="M:DriveWorks.Utility.ValidationUtility.ValidateControlName(System.String)">
      <summary>Validates a DriveWorks control name.</summary>
    </member>
  </members>
</doc>